# SPDX-License-Identifier: Apache-2.0
#
# This file was auto-generated by dev/gen_python_model_from_spec.py
# Do not manually edit!

from ..core import Agent, CreationInfo, ExternalIdentifier, ExternalReference, IntegrityMethod
from ..licensing import AnyLicenseInfo
from ..software import SoftwareArtifact, SoftwarePurpose
from beartype.typing import List, Optional
from datetime import datetime
from spdx_tools.common.typing.type_checks import check_types_and_set_values

from spdx_tools.common.typing.dataclass_with_properties import dataclass_with_properties


@dataclass_with_properties
class Package(SoftwareArtifact):
    """
    A package refers to any unit of content that can be associated with a distribution of software. Typically, a package
    is composed of one or more files.  
    Any of the following non-limiting examples may be (but are not required to be) represented in SPDX as a package:

    - a tarball, zip file or other archive
    - a directory or sub-directory
    - a separately distributed piece of software which another Package or File uses or depends upon (e.g., a Python
      package, a Go module, ...)
    - a container image, and/or each image layer within a container image
    - a collection of one or more sub-packages
    - a Git repository snapshot from a particular point in time

    Note that some of these could be represented in SPDX as a file as well. External property restriction on
    /Core/Element/name: minCount: 1
    """
    package_version: Optional[str] = None
    """
    A packageVersion is useful for identification purposes and for indicating later changes of the package version.
    """
    download_location: Optional[str] = None
    """
    DownloadLocation identifies the download Uniform Resource Identifier for the package at the time that the document
    was created. Where and how to download the exact package being referenced is critical for verification and tracking
    data.
    """
    package_url: Optional[str] = None
    """
    A packageUrl (commonly pronounced and referred to as "purl") is an attempt to standardize package representations in
    order to reliably identify and locate software packages. A purl is a URL string which represents a package in a
    mostly universal and uniform way across programming languages, package managers, packaging conventions, tools, APIs
    and databases.

    the purl URL string is defined by seven components:
    ```
    scheme:type/namespace/name@version?qualifiers#subpath
    ```

    The definition for each component can be found in the [purl
    specification](https://github.com/package-url/purl-spec/blob/master/PURL-SPECIFICATION.rst). Components are designed
    such that they form a hierarchy from the most significant on the left to the least significant components on the
    right.

    Parsing a purl string into its components works from left to right. Some extra type-specific normalizations are
    required. For more information, see [How to parse a purl string in its
    components](https://github.com/package-url/purl-spec/blob/master/PURL-SPECIFICATION.rst#how-to-parse-a-purl-string-in-its-components).
    """
    homepage: Optional[str] = None
    """
    HomePage is a place for the SPDX document creator to record a website that serves as the package's home page. This
    saves the recipient of the SPDX document who is looking for more info from having to search for and verify a match
    between the package and the associated project home page. This link can also be used to reference further
    information about the package referenced by the SPDX document creator.
    """
    source_info: Optional[str] = None
    """
    SourceInfo records any relevant background information or additional comments about the origin of the package. For
    example, this field might include comments indicating whether the package was pulled from a source code management
    system or has been repackaged. The creator can provide additional information to describe any anomalies or
    discoveries in the determination of the origin of the package.
    """

    def __init__(
        self,
        spdx_id: str,
        name: str,
        creation_info: CreationInfo,
        summary: Optional[str] = None,
        description: Optional[str] = None,
        comment: Optional[str] = None,
        verified_using: List[IntegrityMethod] = None,
        external_reference: List[ExternalReference] = None,
        external_identifier: List[ExternalIdentifier] = None,
        extension: List[str] = None,
        originated_by: List[str] = None,
        supplied_by: List[str] = None,
        built_time: Optional[datetime] = None,
        release_time: Optional[datetime] = None,
        valid_until_time: Optional[datetime] = None,
        standard: List[str] = None,
        content_identifier: Optional[str] = None,
        primary_purpose: Optional[SoftwarePurpose] = None,
        additional_purpose: List[SoftwarePurpose] = None,
        concluded_license: Optional[AnyLicenseInfo] = None,
        declared_license: Optional[AnyLicenseInfo] = None,
        copyright_text: Optional[str] = None,
        attribution_text: Optional[str] = None,
        package_version: Optional[str] = None,
        download_location: Optional[str] = None,
        package_url: Optional[str] = None,
        homepage: Optional[str] = None,
        source_info: Optional[str] = None,
    ):
        verified_using = [] if verified_using is None else verified_using
        external_reference = [] if external_reference is None else external_reference
        external_identifier = [] if external_identifier is None else external_identifier
        extension = [] if extension is None else extension
        originated_by = [] if originated_by is None else originated_by
        supplied_by = [] if supplied_by is None else supplied_by
        standard = [] if standard is None else standard
        additional_purpose = [] if additional_purpose is None else additional_purpose
        check_types_and_set_values(self, locals())
