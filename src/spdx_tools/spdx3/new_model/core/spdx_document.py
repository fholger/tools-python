# SPDX-License-Identifier: Apache-2.0
#
# This file was auto-generated by dev/gen_python_model_from_spec.py
# Do not manually edit!

from ..core import Bundle, CreationInfo, Element, ExternalIdentifier, ExternalMap, ExternalReference, IntegrityMethod
from beartype.typing import List, Optional
from spdx_tools.common.typing.type_checks import check_types_and_set_values

from spdx_tools.common.typing.dataclass_with_properties import dataclass_with_properties


@dataclass_with_properties
class SpdxDocument(Bundle):
    """
    An SpdxDocument assembles a collection of Elements under a common string, the name of the document. Commonly used
    when representing a unit of transfer of SPDX Elements. External property restriction on /Core/Element/name:
    minCount: 1
    """
    name: str
    """
    This field identifies the name of an Element as designated by the creator. The name of an Element is an important
    convention and easier to refer to than the URI.
    """

    def __init__(
        self,
        spdx_id: str,
        creation_info: CreationInfo,
        element: List[str],
        root_element: List[str],
        name: str,
        name: Optional[str] = None,
        summary: Optional[str] = None,
        description: Optional[str] = None,
        comment: Optional[str] = None,
        verified_using: List[IntegrityMethod] = None,
        external_reference: List[ExternalReference] = None,
        external_identifier: List[ExternalIdentifier] = None,
        extension: List[str] = None,
        imports: List[ExternalMap] = None,
        context: Optional[str] = None,
    ):
        verified_using = [] if verified_using is None else verified_using
        external_reference = [] if external_reference is None else external_reference
        external_identifier = [] if external_identifier is None else external_identifier
        extension = [] if extension is None else extension
        imports = [] if imports is None else imports
        check_types_and_set_values(self, locals())
