# SPDX-License-Identifier: Apache-2.0
#
# This file was auto-generated by dev/gen_python_model_from_spec.py
# Do not manually edit!

from ..core import Agent, CreationInfo, Element, ExternalIdentifier, ExternalReference, IntegrityMethod, RelationshipCompleteness, RelationshipType
from ..security import VexJustificationType, VexVulnAssessmentRelationship
from beartype.typing import List, Optional
from datetime import datetime
from spdx_tools.common.typing.type_checks import check_types_and_set_values

from spdx_tools.common.typing.dataclass_with_properties import dataclass_with_properties


@dataclass_with_properties
class VexNotAffectedVulnAssessmentRelationship(VexVulnAssessmentRelationship):
    """
    VexNotAffectedVulnAssessmentRelationship connects a vulnerability and a number of elements designating them as
    products not affected by the vulnerability. This relationship corresponds to the VEX not_affected status.

    **Constraints**

    When linking elements using a VexNotVulnAffectedAssessmentRelationship, the following requirements must be observed:

    * Relating elements with a VexNotAffectedVulnAssessmentRelationship is restricted to the doesNotAffect relationship
      type.
    * The from: end of the relationship must be a /Security/Vulnerability classed element.
    * Both impactStatement and justificationType properties have a cardinality of 0..1 making them optional.
      Nevertheless, to produce a valid VEX not_affected statement, one of them MUST be defined. This is specified in the
      Minimum Elements for VEX.

    **Syntax**

    ```json
    {
      "@type": "VexNotAffectedVulnAssessmentRelationship",
      "@id": "urn:spdx.dev:vex-not-affected-1",
      "relationshipType": "doesNotAffect",
      "from": "urn:spdx.dev:vuln-cve-2020-28498",
      "to": ["urn:product-acme-application-1.3"],
      "assessedElement": "urn:npm-elliptic-6.5.2",
      "justificationType": "componentNotPresent",
      "impactStatement": "Not using this vulnerable part of this library.",
      "suppliedBy": ["urn:spdx.dev:agent-jane-doe"],
      "publishedTime": "2021-03-09T11:04:53Z"
    }
    ```
    """
    justification_type: Optional[VexJustificationType] = None
    """
    When stating that an element is not affected by a vulnerability, the VexNotAffectedVulnAssessmentRelationship must
    include a justification from the machine-readable labels catalog informing the reason the element is not impacted.

    impactStatement which is a string with English prose can be used instead or as complementary to the justification
    label, but one of both MUST be defined.
    """
    impact_statement: Optional[str] = None
    """
    When a VEX product element is related with a VexNotAffectedVulnAssessmentRelationship and a machine readable
    justification label is not provided, then an impactStatement that further explains how or why the prouct(s) are not
    affected by the vulnerability must be provided.
    """
    impact_statement_time: Optional[datetime] = None
    """
    TODO
    """

    def __init__(
        self,
        spdx_id: str,
        creation_info: CreationInfo,
        from_element: str,
        to: List[str],
        relationship_type: RelationshipType,
        name: Optional[str] = None,
        summary: Optional[str] = None,
        description: Optional[str] = None,
        comment: Optional[str] = None,
        verified_using: List[IntegrityMethod] = None,
        external_reference: List[ExternalReference] = None,
        external_identifier: List[ExternalIdentifier] = None,
        extension: List[str] = None,
        completeness: Optional[RelationshipCompleteness] = None,
        start_time: Optional[datetime] = None,
        end_time: Optional[datetime] = None,
        assessed_element: Optional[str] = None,
        published_time: Optional[datetime] = None,
        supplied_by: Optional[str] = None,
        modified_time: Optional[datetime] = None,
        withdrawn_time: Optional[datetime] = None,
        vex_version: Optional[str] = None,
        status_notes: Optional[str] = None,
        justification_type: Optional[VexJustificationType] = None,
        impact_statement: Optional[str] = None,
        impact_statement_time: Optional[datetime] = None,
    ):
        verified_using = [] if verified_using is None else verified_using
        external_reference = [] if external_reference is None else external_reference
        external_identifier = [] if external_identifier is None else external_identifier
        extension = [] if extension is None else extension
        check_types_and_set_values(self, locals())
