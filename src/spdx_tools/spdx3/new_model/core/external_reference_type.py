# SPDX-License-Identifier: Apache-2.0
#
# This file was auto-generated by dev/gen_python_model_from_spec.py
# Do not manually edit!

from beartype.typing import Optional
from enum import Enum, auto


class ExternalReferenceType(Enum):
    """
    ExteralReferenceType specifies the type of an external reference.
    """

    ALT_DOWNLOAD_LOCATION = auto()
    """
    A reference to an alternative download location.
    """
    ALT_WEB_PAGE = auto()
    """
    A reference to an alternative web page.
    """
    BINARY_ARTIFACT = auto()
    """
    A reference to binary artifacts related to a package.
    """
    BUILD_META = auto()
    """
    A reference build metadata related to a published package.
    """
    BUILD_SYSTEM = auto()
    """
    A reference build system used to create or publish the package.
    """
    CHAT = auto()
    """
    A reference to the instant messaging system used by the maintainer for a package.
    """
    CERTIFICATION_REPORT = auto()
    """
    A reference to a certification report for a package from an accredited/independent body.
    """
    COMPONENT_ANALYSIS_REPORT = auto()
    """
    A reference to a Software Composition Analysis (SCA) report.
    """
    DOCUMENTATION = auto()
    """
    A reference to the documentation for a package.
    """
    DYNAMIC_ANALYSIS_REPORT = auto()
    """
    A reference to a dynamic analysis report for a package.
    """
    EOL_NOTICE = auto()
    """
    A reference to the End Of Sale (EOS) and/or End Of Life (EOL) information related to a package.
    """
    EXPORT_CONTROL_ASSESSMENT = auto()
    """
    A reference to a export control assessment for a package.
    """
    FUNDING = auto()
    """
    A reference to funding information related to a package.
    """
    ISSUE_TRACKER = auto()
    """
    A reference to the issue tracker for a package.
    """
    MAILING_LIST = auto()
    """
    A reference to the mailing list used by the maintainer for a package.
    """
    METRICS = auto()
    """
    A reference to metrics related to package such as OpenSSF scorecards.
    """
    LICENSE = auto()
    """
    A reference to additional license information related to an artifact.
    """
    OTHER = auto()
    """
    Used when the type doesn't match any of the other options.
    """
    PRIVACY_ASSESSMENT = auto()
    """
    A reference to a privacy assessment for a package.
    """
    PRODUCT_METADATA = auto()
    """
    A reference to additional product metadata such as reference within organization's product catalog.
    """
    PURCHASE_ORDER = auto()
    """
    A reference to a purchase order for a package.
    """
    RELEASE_NOTES = auto()
    """
    A reference to the release notes for a package.
    """
    RELEASE_HISTORY = auto()
    """
    A reference to a published list of releases for a package.
    """
    RISK_ASSESSMENT = auto()
    """
    A reference to a risk assessment for a package.
    """
    RUNTIME_ANALYSIS_REPORT = auto()
    """
    A reference to a runtime analysis report for a package.
    """
    SECURE_SOFTWARE_ATTESTATION = auto()
    """
    A reference to information assuring that the software is developed using security practices as defined by [NIST SP
    800-218 Secure Software Development Framework (SSDF)](https://csrc.nist.gov/publications/detail/sp/800-218/final) or
    [CISA Secure Software Development Attestation
    Form](https://www.cisa.gov/sites/default/files/2023-04/secure-software-self-attestation_common-form_508.pdf).
    """
    SECURITY_ADVISORY = auto()
    """
    A reference to a published security advisory (where advisory as defined per ISO 29147:2018) that may affect one or
    more elements, e.g., vendor advisories or specific NVD entries.
    """
    SECURITY_ADVERSARY_MODEL = auto()
    """
    A reference to the security adversary model for a package.
    """
    SECURITY_FIX = auto()
    """
    A reference to the patch or source code that fixes a vulnerability.
    """
    SECURITY_OTHER = auto()
    """
    A reference to related security information of unspecified type.
    """
    SECURITY_PEN_TEST_REPORT = auto()
    """
    A reference to a [penetration test](https://en.wikipedia.org/wiki/Penetration_test) report for a package.
    """
    SECURITY_POLICY = auto()
    """
    A reference to instructions for reporting newly discovered security vulnerabilities for a package.
    """
    SECURITY_THREAT_MODEL = auto()
    """
    A reference the [security threat model](https://en.wikipedia.org/wiki/Threat_model) for a package.
    """
    SOCIAL_MEDIA = auto()
    """
    A reference to a social media channel for a package.
    """
    SOURCE_ARTIFACT = auto()
    """
    A reference to an artifact containing the sources for a package.
    """
    STATIC_ANALYSIS_REPORT = auto()
    """
    A reference to a static analysis report for a package.
    """
    SUPPORT = auto()
    """
    A reference to the software support channel or other support information for a package.
    """
    VCS = auto()
    """
    A reference to a version control system related to a software artifact.
    """
    VULNERABILITY_DISCLOSURE_REPORT = auto()
    """
    A reference to a Vulnerability Disclosure Report (VDR) which provides the software supplier's analysis and findings
    describing the impact (or lack of impact) that reported vulnerabilities have on packages or products in the
    supplier's SBOM as defined in [NIST SP 800-161](https://csrc.nist.gov/publications/detail/sp/800-161/rev-1/final).
    """
    VULNERABILITY_EXPLOITABILITY_ASSESSMENT = auto()
    """
    A reference to a Vulnerability Exploitability eXchange (VEX) statement which provides information on whether a
    product is impacted by a specific vulnerability in an included package and, if affected, whether there are actions
    recommended to remediate. See also [NTIA VEX
    one-page](https://ntia.gov/files/ntia/publications/vex_one-page_summary.pdf)..
    """
    QUALITY_ASSESSMENT_REPORT = auto()
    """
    A reference to a quality assessment for a package.
    """

    def __str__(self) -> str:
        if self == ExternalReferenceType.ALT_DOWNLOAD_LOCATION:
            return "altDownloadLocation"
        if self == ExternalReferenceType.ALT_WEB_PAGE:
            return "altWebPage"
        if self == ExternalReferenceType.BINARY_ARTIFACT:
            return "binaryArtifact"
        if self == ExternalReferenceType.BUILD_META:
            return "buildMeta"
        if self == ExternalReferenceType.BUILD_SYSTEM:
            return "buildSystem"
        if self == ExternalReferenceType.CHAT:
            return "chat"
        if self == ExternalReferenceType.CERTIFICATION_REPORT:
            return "certificationReport"
        if self == ExternalReferenceType.COMPONENT_ANALYSIS_REPORT:
            return "componentAnalysisReport"
        if self == ExternalReferenceType.DOCUMENTATION:
            return "documentation"
        if self == ExternalReferenceType.DYNAMIC_ANALYSIS_REPORT:
            return "dynamicAnalysisReport"
        if self == ExternalReferenceType.EOL_NOTICE:
            return "eolNotice"
        if self == ExternalReferenceType.EXPORT_CONTROL_ASSESSMENT:
            return "exportControlAssessment"
        if self == ExternalReferenceType.FUNDING:
            return "funding"
        if self == ExternalReferenceType.ISSUE_TRACKER:
            return "issueTracker"
        if self == ExternalReferenceType.MAILING_LIST:
            return "mailingList"
        if self == ExternalReferenceType.METRICS:
            return "metrics"
        if self == ExternalReferenceType.LICENSE:
            return "license"
        if self == ExternalReferenceType.OTHER:
            return "other"
        if self == ExternalReferenceType.PRIVACY_ASSESSMENT:
            return "privacyAssessment"
        if self == ExternalReferenceType.PRODUCT_METADATA:
            return "productMetadata"
        if self == ExternalReferenceType.PURCHASE_ORDER:
            return "purchaseOrder"
        if self == ExternalReferenceType.RELEASE_NOTES:
            return "releaseNotes"
        if self == ExternalReferenceType.RELEASE_HISTORY:
            return "releaseHistory"
        if self == ExternalReferenceType.RISK_ASSESSMENT:
            return "riskAssessment"
        if self == ExternalReferenceType.RUNTIME_ANALYSIS_REPORT:
            return "runtimeAnalysisReport"
        if self == ExternalReferenceType.SECURE_SOFTWARE_ATTESTATION:
            return "secureSoftwareAttestation"
        if self == ExternalReferenceType.SECURITY_ADVISORY:
            return "securityAdvisory"
        if self == ExternalReferenceType.SECURITY_ADVERSARY_MODEL:
            return "securityAdversaryModel"
        if self == ExternalReferenceType.SECURITY_FIX:
            return "securityFix"
        if self == ExternalReferenceType.SECURITY_OTHER:
            return "securityOther"
        if self == ExternalReferenceType.SECURITY_PEN_TEST_REPORT:
            return "securityPenTestReport"
        if self == ExternalReferenceType.SECURITY_POLICY:
            return "securityPolicy"
        if self == ExternalReferenceType.SECURITY_THREAT_MODEL:
            return "securityThreatModel"
        if self == ExternalReferenceType.SOCIAL_MEDIA:
            return "socialMedia"
        if self == ExternalReferenceType.SOURCE_ARTIFACT:
            return "sourceArtifact"
        if self == ExternalReferenceType.STATIC_ANALYSIS_REPORT:
            return "staticAnalysisReport"
        if self == ExternalReferenceType.SUPPORT:
            return "support"
        if self == ExternalReferenceType.VCS:
            return "vcs"
        if self == ExternalReferenceType.VULNERABILITY_DISCLOSURE_REPORT:
            return "vulnerabilityDisclosureReport"
        if self == ExternalReferenceType.VULNERABILITY_EXPLOITABILITY_ASSESSMENT:
            return "vulnerabilityExploitabilityAssessment"
        if self == ExternalReferenceType.QUALITY_ASSESSMENT_REPORT:
            return "qualityAssessmentReport"
        return "unknown"

    @staticmethod
    def from_str(value: str) -> Optional['ExternalReferenceType']:
        if value == "altDownloadLocation":
            return ExternalReferenceType.ALT_DOWNLOAD_LOCATION
        if value == "altWebPage":
            return ExternalReferenceType.ALT_WEB_PAGE
        if value == "binaryArtifact":
            return ExternalReferenceType.BINARY_ARTIFACT
        if value == "buildMeta":
            return ExternalReferenceType.BUILD_META
        if value == "buildSystem":
            return ExternalReferenceType.BUILD_SYSTEM
        if value == "chat":
            return ExternalReferenceType.CHAT
        if value == "certificationReport":
            return ExternalReferenceType.CERTIFICATION_REPORT
        if value == "componentAnalysisReport":
            return ExternalReferenceType.COMPONENT_ANALYSIS_REPORT
        if value == "documentation":
            return ExternalReferenceType.DOCUMENTATION
        if value == "dynamicAnalysisReport":
            return ExternalReferenceType.DYNAMIC_ANALYSIS_REPORT
        if value == "eolNotice":
            return ExternalReferenceType.EOL_NOTICE
        if value == "exportControlAssessment":
            return ExternalReferenceType.EXPORT_CONTROL_ASSESSMENT
        if value == "funding":
            return ExternalReferenceType.FUNDING
        if value == "issueTracker":
            return ExternalReferenceType.ISSUE_TRACKER
        if value == "mailingList":
            return ExternalReferenceType.MAILING_LIST
        if value == "metrics":
            return ExternalReferenceType.METRICS
        if value == "license":
            return ExternalReferenceType.LICENSE
        if value == "other":
            return ExternalReferenceType.OTHER
        if value == "privacyAssessment":
            return ExternalReferenceType.PRIVACY_ASSESSMENT
        if value == "productMetadata":
            return ExternalReferenceType.PRODUCT_METADATA
        if value == "purchaseOrder":
            return ExternalReferenceType.PURCHASE_ORDER
        if value == "releaseNotes":
            return ExternalReferenceType.RELEASE_NOTES
        if value == "releaseHistory":
            return ExternalReferenceType.RELEASE_HISTORY
        if value == "riskAssessment":
            return ExternalReferenceType.RISK_ASSESSMENT
        if value == "runtimeAnalysisReport":
            return ExternalReferenceType.RUNTIME_ANALYSIS_REPORT
        if value == "secureSoftwareAttestation":
            return ExternalReferenceType.SECURE_SOFTWARE_ATTESTATION
        if value == "securityAdvisory":
            return ExternalReferenceType.SECURITY_ADVISORY
        if value == "securityAdversaryModel":
            return ExternalReferenceType.SECURITY_ADVERSARY_MODEL
        if value == "securityFix":
            return ExternalReferenceType.SECURITY_FIX
        if value == "securityOther":
            return ExternalReferenceType.SECURITY_OTHER
        if value == "securityPenTestReport":
            return ExternalReferenceType.SECURITY_PEN_TEST_REPORT
        if value == "securityPolicy":
            return ExternalReferenceType.SECURITY_POLICY
        if value == "securityThreatModel":
            return ExternalReferenceType.SECURITY_THREAT_MODEL
        if value == "socialMedia":
            return ExternalReferenceType.SOCIAL_MEDIA
        if value == "sourceArtifact":
            return ExternalReferenceType.SOURCE_ARTIFACT
        if value == "staticAnalysisReport":
            return ExternalReferenceType.STATIC_ANALYSIS_REPORT
        if value == "support":
            return ExternalReferenceType.SUPPORT
        if value == "vcs":
            return ExternalReferenceType.VCS
        if value == "vulnerabilityDisclosureReport":
            return ExternalReferenceType.VULNERABILITY_DISCLOSURE_REPORT
        if value == "vulnerabilityExploitabilityAssessment":
            return ExternalReferenceType.VULNERABILITY_EXPLOITABILITY_ASSESSMENT
        if value == "qualityAssessmentReport":
            return ExternalReferenceType.QUALITY_ASSESSMENT_REPORT
        return None
