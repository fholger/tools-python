# SPDX-License-Identifier: Apache-2.0
#
# This file was auto-generated by dev/gen_python_model_from_spec.py
# Do not manually edit!

from beartype.typing import Optional
from enum import Enum, auto


class SbomType(Enum):
    """
    The set of SBOM types with definitions as defined in [Types of Software Bill of Material (SBOM)
    Documents](https://www.cisa.gov/sites/default/files/2023-04/sbom-types-document-508c.pdf), published on April 21,
    2023. An SBOM type describes the most likely type of an SBOM from the producer perspective, so that consumers can
    draw conclusions about the data inside an SBOM. A single SBOM can have multiple SBOM document types associated with
    it.
    """

    DESIGN = auto()
    """
    SBOM of intended, planned software project or product with included components (some of which may not yet exist) for
    a new software artifact.
    """
    SOURCE = auto()
    """
    SBOM created directly from the development environment, source files, and included dependencies used to build an
    product artifact.
    """
    BUILD = auto()
    """
    SBOM generated as part of the process of building the software to create a releasable artifact (e.g., executable or
    package) from data such as source files, dependencies, built components, build process ephemeral data, and other
    SBOMs.
    """
    DEPLOYED = auto()
    """
    SBOM provides an inventory of software that is present on a system. This may be an assembly of other SBOMs that
    combines analysis of configuration options, and examination of execution behavior in a (potentially simulated)
    deployment environment.
    """
    RUNTIME = auto()
    """
    SBOM generated through instrumenting the system running the software, to capture only components present in the
    system, as well as external call-outs or dynamically loaded components. In some contexts, this may also be referred
    to as an “Instrumented” or “Dynamic” SBOM.
    """
    ANALYZED = auto()
    """
    SBOM generated through analysis of artifacts (e.g., executables, packages, containers, and virtual machine images)
    after its build. Such analysis generally requires a variety of heuristics. In some contexts, this may also be
    referred to as a “3rd party” SBOM.
    """

    def __str__(self) -> str:
        if self == SbomType.DESIGN:
            return "design"
        if self == SbomType.SOURCE:
            return "source"
        if self == SbomType.BUILD:
            return "build"
        if self == SbomType.DEPLOYED:
            return "deployed"
        if self == SbomType.RUNTIME:
            return "runtime"
        if self == SbomType.ANALYZED:
            return "analyzed"
        return "unknown"

    @staticmethod
    def from_str(value: str) -> Optional['SbomType']:
        if value == "design":
            return SbomType.DESIGN
        if value == "source":
            return SbomType.SOURCE
        if value == "build":
            return SbomType.BUILD
        if value == "deployed":
            return SbomType.DEPLOYED
        if value == "runtime":
            return SbomType.RUNTIME
        if value == "analyzed":
            return SbomType.ANALYZED
        return None
