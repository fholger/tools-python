# SPDX-License-Identifier: Apache-2.0
#
# This file was auto-generated by dev/gen_model_to_rdf.py
# Do not manually edit!
# flake8: noqa
# isort:skip_file

# fmt: off

from rdflib import Graph, URIRef, RDF, Literal, BNode
from rdflib.term import Identifier
from spdx_tools.spdx.casing_tools import snake_case_to_camel_case
from . import expanded_license, core, dataset, licensing, ai, security, build, software


def positive_integer_range_to_rdf(obj, graph: Graph) -> Identifier:
    if '_spdx_id' in obj.__dict__:
        element_node = URIRef(obj.spdx_id)
    else:
        element_node = BNode()
    type_node = URIRef("https://spdx.org/rdf/v3/Core/PositiveIntegerRange")
    graph.add((element_node, RDF.type, type_node))
    positive_integer_range_properties_to_rdf(element_node, obj, graph)
    return element_node


def positive_integer_range_properties_to_rdf(node: Identifier, obj, graph: Graph):
    from .converter import model_to_rdf
    if obj.begin is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/Core/begin")
        graph.add((node, prop_node, model_to_rdf(obj.begin, graph)))
    if obj.end is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/Core/end")
        graph.add((node, prop_node, model_to_rdf(obj.end, graph)))


def element_collection_to_rdf(obj, graph: Graph) -> Identifier:
    if '_spdx_id' in obj.__dict__:
        element_node = URIRef(obj.spdx_id)
    else:
        element_node = BNode()
    type_node = URIRef("https://spdx.org/rdf/v3/Core/ElementCollection")
    graph.add((element_node, RDF.type, type_node))
    element_collection_properties_to_rdf(element_node, obj, graph)
    return element_node


def element_collection_properties_to_rdf(node: Identifier, obj, graph: Graph):
    from .converter import model_to_rdf
    for value in obj.element:
        prop_node = URIRef("https://spdx.org/rdf/v3/Core/element")
        graph.add((node, prop_node, model_to_rdf(value, graph)))
    for value in obj.root_element:
        prop_node = URIRef("https://spdx.org/rdf/v3/Core/rootElement")
        graph.add((node, prop_node, model_to_rdf(value, graph)))
    for value in obj.namespaces:
        prop_node = URIRef("https://spdx.org/rdf/v3/Core/namespaces")
        graph.add((node, prop_node, model_to_rdf(value, graph)))
    for value in obj.imports:
        prop_node = URIRef("https://spdx.org/rdf/v3/Core/imports")
        graph.add((node, prop_node, model_to_rdf(value, graph)))
    core.element_properties_to_rdf(node, obj, graph)


def external_reference_to_rdf(obj, graph: Graph) -> Identifier:
    if '_spdx_id' in obj.__dict__:
        element_node = URIRef(obj.spdx_id)
    else:
        element_node = BNode()
    type_node = URIRef("https://spdx.org/rdf/v3/Core/ExternalReference")
    graph.add((element_node, RDF.type, type_node))
    external_reference_properties_to_rdf(element_node, obj, graph)
    return element_node


def external_reference_properties_to_rdf(node: Identifier, obj, graph: Graph):
    from .converter import model_to_rdf
    if obj.external_reference_type is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/Core/externalReferenceType")
        graph.add((node, prop_node, model_to_rdf(obj.external_reference_type, graph)))
    for value in obj.locator:
        prop_node = URIRef("https://spdx.org/rdf/v3/Core/locator")
        graph.add((node, prop_node, model_to_rdf(value, graph)))
    if obj.content_type is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/Core/contentType")
        graph.add((node, prop_node, model_to_rdf(obj.content_type, graph)))
    if obj.comment is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/Core/comment")
        graph.add((node, prop_node, model_to_rdf(obj.comment, graph)))


def external_identifier_to_rdf(obj, graph: Graph) -> Identifier:
    if '_spdx_id' in obj.__dict__:
        element_node = URIRef(obj.spdx_id)
    else:
        element_node = BNode()
    type_node = URIRef("https://spdx.org/rdf/v3/Core/ExternalIdentifier")
    graph.add((element_node, RDF.type, type_node))
    external_identifier_properties_to_rdf(element_node, obj, graph)
    return element_node


def external_identifier_properties_to_rdf(node: Identifier, obj, graph: Graph):
    from .converter import model_to_rdf
    if obj.external_identifier_type is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/Core/externalIdentifierType")
        graph.add((node, prop_node, model_to_rdf(obj.external_identifier_type, graph)))
    if obj.identifier is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/Core/identifier")
        graph.add((node, prop_node, model_to_rdf(obj.identifier, graph)))
    if obj.comment is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/Core/comment")
        graph.add((node, prop_node, model_to_rdf(obj.comment, graph)))
    for value in obj.identifier_locator:
        prop_node = URIRef("https://spdx.org/rdf/v3/Core/identifierLocator")
        graph.add((node, prop_node, model_to_rdf(value, graph)))
    if obj.issuing_authority is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/Core/issuingAuthority")
        graph.add((node, prop_node, model_to_rdf(obj.issuing_authority, graph)))


def bom_to_rdf(obj, graph: Graph) -> Identifier:
    if '_spdx_id' in obj.__dict__:
        element_node = URIRef(obj.spdx_id)
    else:
        element_node = BNode()
    type_node = URIRef("https://spdx.org/rdf/v3/Core/Bom")
    graph.add((element_node, RDF.type, type_node))
    bom_properties_to_rdf(element_node, obj, graph)
    return element_node


def bom_properties_to_rdf(node: Identifier, obj, graph: Graph):
    from .converter import model_to_rdf
    core.bundle_properties_to_rdf(node, obj, graph)


def spdx_document_to_rdf(obj, graph: Graph) -> Identifier:
    if '_spdx_id' in obj.__dict__:
        element_node = URIRef(obj.spdx_id)
    else:
        element_node = BNode()
    type_node = URIRef("https://spdx.org/rdf/v3/Core/SpdxDocument")
    graph.add((element_node, RDF.type, type_node))
    spdx_document_properties_to_rdf(element_node, obj, graph)
    return element_node


def spdx_document_properties_to_rdf(node: Identifier, obj, graph: Graph):
    from .converter import model_to_rdf
    if obj.name is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/Core/name")
        graph.add((node, prop_node, model_to_rdf(obj.name, graph)))
    core.bundle_properties_to_rdf(node, obj, graph)


def tool_to_rdf(obj, graph: Graph) -> Identifier:
    if '_spdx_id' in obj.__dict__:
        element_node = URIRef(obj.spdx_id)
    else:
        element_node = BNode()
    type_node = URIRef("https://spdx.org/rdf/v3/Core/Tool")
    graph.add((element_node, RDF.type, type_node))
    tool_properties_to_rdf(element_node, obj, graph)
    return element_node


def tool_properties_to_rdf(node: Identifier, obj, graph: Graph):
    from .converter import model_to_rdf
    core.element_properties_to_rdf(node, obj, graph)


def namespace_map_to_rdf(obj, graph: Graph) -> Identifier:
    if '_spdx_id' in obj.__dict__:
        element_node = URIRef(obj.spdx_id)
    else:
        element_node = BNode()
    type_node = URIRef("https://spdx.org/rdf/v3/Core/NamespaceMap")
    graph.add((element_node, RDF.type, type_node))
    namespace_map_properties_to_rdf(element_node, obj, graph)
    return element_node


def namespace_map_properties_to_rdf(node: Identifier, obj, graph: Graph):
    from .converter import model_to_rdf
    if obj.prefix is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/Core/prefix")
        graph.add((node, prop_node, model_to_rdf(obj.prefix, graph)))
    if obj.namespace is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/Core/namespace")
        graph.add((node, prop_node, model_to_rdf(obj.namespace, graph)))


def creation_info_to_rdf(obj, graph: Graph) -> Identifier:
    if '_spdx_id' in obj.__dict__:
        element_node = URIRef(obj.spdx_id)
    else:
        element_node = BNode()
    type_node = URIRef("https://spdx.org/rdf/v3/Core/CreationInfo")
    graph.add((element_node, RDF.type, type_node))
    creation_info_properties_to_rdf(element_node, obj, graph)
    return element_node


def creation_info_properties_to_rdf(node: Identifier, obj, graph: Graph):
    from .converter import model_to_rdf
    if obj.spec_version is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/Core/specVersion")
        graph.add((node, prop_node, model_to_rdf(obj.spec_version, graph)))
    if obj.comment is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/Core/comment")
        graph.add((node, prop_node, model_to_rdf(obj.comment, graph)))
    if obj.created is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/Core/created")
        graph.add((node, prop_node, model_to_rdf(obj.created, graph)))
    for value in obj.created_by:
        prop_node = URIRef("https://spdx.org/rdf/v3/Core/createdBy")
        graph.add((node, prop_node, model_to_rdf(value, graph)))
    for value in obj.created_using:
        prop_node = URIRef("https://spdx.org/rdf/v3/Core/createdUsing")
        graph.add((node, prop_node, model_to_rdf(value, graph)))
    for value in obj.profile:
        prop_node = URIRef("https://spdx.org/rdf/v3/Core/profile")
        graph.add((node, prop_node, model_to_rdf(value, graph)))
    if obj.data_license is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/Core/dataLicense")
        graph.add((node, prop_node, model_to_rdf(obj.data_license, graph)))


def organization_to_rdf(obj, graph: Graph) -> Identifier:
    if '_spdx_id' in obj.__dict__:
        element_node = URIRef(obj.spdx_id)
    else:
        element_node = BNode()
    type_node = URIRef("https://spdx.org/rdf/v3/Core/Organization")
    graph.add((element_node, RDF.type, type_node))
    organization_properties_to_rdf(element_node, obj, graph)
    return element_node


def organization_properties_to_rdf(node: Identifier, obj, graph: Graph):
    from .converter import model_to_rdf
    core.agent_properties_to_rdf(node, obj, graph)


def lifecycle_scoped_relationship_to_rdf(obj, graph: Graph) -> Identifier:
    if '_spdx_id' in obj.__dict__:
        element_node = URIRef(obj.spdx_id)
    else:
        element_node = BNode()
    type_node = URIRef("https://spdx.org/rdf/v3/Core/LifecycleScopedRelationship")
    graph.add((element_node, RDF.type, type_node))
    lifecycle_scoped_relationship_properties_to_rdf(element_node, obj, graph)
    return element_node


def lifecycle_scoped_relationship_properties_to_rdf(node: Identifier, obj, graph: Graph):
    from .converter import model_to_rdf
    if obj.scope is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/Core/scope")
        graph.add((node, prop_node, model_to_rdf(obj.scope, graph)))
    core.relationship_properties_to_rdf(node, obj, graph)


def software_agent_to_rdf(obj, graph: Graph) -> Identifier:
    if '_spdx_id' in obj.__dict__:
        element_node = URIRef(obj.spdx_id)
    else:
        element_node = BNode()
    type_node = URIRef("https://spdx.org/rdf/v3/Core/SoftwareAgent")
    graph.add((element_node, RDF.type, type_node))
    software_agent_properties_to_rdf(element_node, obj, graph)
    return element_node


def software_agent_properties_to_rdf(node: Identifier, obj, graph: Graph):
    from .converter import model_to_rdf
    core.agent_properties_to_rdf(node, obj, graph)


def integrity_method_to_rdf(obj, graph: Graph) -> Identifier:
    if '_spdx_id' in obj.__dict__:
        element_node = URIRef(obj.spdx_id)
    else:
        element_node = BNode()
    type_node = URIRef("https://spdx.org/rdf/v3/Core/IntegrityMethod")
    graph.add((element_node, RDF.type, type_node))
    integrity_method_properties_to_rdf(element_node, obj, graph)
    return element_node


def integrity_method_properties_to_rdf(node: Identifier, obj, graph: Graph):
    from .converter import model_to_rdf
    if obj.comment is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/Core/comment")
        graph.add((node, prop_node, model_to_rdf(obj.comment, graph)))


def relationship_to_rdf(obj, graph: Graph) -> Identifier:
    if '_spdx_id' in obj.__dict__:
        element_node = URIRef(obj.spdx_id)
    else:
        element_node = BNode()
    type_node = URIRef("https://spdx.org/rdf/v3/Core/Relationship")
    graph.add((element_node, RDF.type, type_node))
    relationship_properties_to_rdf(element_node, obj, graph)
    return element_node


def relationship_properties_to_rdf(node: Identifier, obj, graph: Graph):
    from .converter import model_to_rdf
    if obj.from_element is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/Core/from")
        graph.add((node, prop_node, model_to_rdf(obj.from_element, graph)))
    for value in obj.to:
        prop_node = URIRef("https://spdx.org/rdf/v3/Core/to")
        graph.add((node, prop_node, model_to_rdf(value, graph)))
    if obj.relationship_type is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/Core/relationshipType")
        graph.add((node, prop_node, model_to_rdf(obj.relationship_type, graph)))
    if obj.completeness is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/Core/completeness")
        graph.add((node, prop_node, model_to_rdf(obj.completeness, graph)))
    if obj.start_time is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/Core/startTime")
        graph.add((node, prop_node, model_to_rdf(obj.start_time, graph)))
    if obj.end_time is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/Core/endTime")
        graph.add((node, prop_node, model_to_rdf(obj.end_time, graph)))
    core.element_properties_to_rdf(node, obj, graph)


def element_to_rdf(obj, graph: Graph) -> Identifier:
    if '_spdx_id' in obj.__dict__:
        element_node = URIRef(obj.spdx_id)
    else:
        element_node = BNode()
    type_node = URIRef("https://spdx.org/rdf/v3/Core/Element")
    graph.add((element_node, RDF.type, type_node))
    element_properties_to_rdf(element_node, obj, graph)
    return element_node


def element_properties_to_rdf(node: Identifier, obj, graph: Graph):
    from .converter import model_to_rdf
    if obj.name is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/Core/name")
        graph.add((node, prop_node, model_to_rdf(obj.name, graph)))
    if obj.summary is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/Core/summary")
        graph.add((node, prop_node, model_to_rdf(obj.summary, graph)))
    if obj.description is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/Core/description")
        graph.add((node, prop_node, model_to_rdf(obj.description, graph)))
    if obj.comment is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/Core/comment")
        graph.add((node, prop_node, model_to_rdf(obj.comment, graph)))
    if obj.creation_info is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/Core/creationInfo")
        graph.add((node, prop_node, model_to_rdf(obj.creation_info, graph)))
    for value in obj.verified_using:
        prop_node = URIRef("https://spdx.org/rdf/v3/Core/verifiedUsing")
        graph.add((node, prop_node, model_to_rdf(value, graph)))
    for value in obj.external_reference:
        prop_node = URIRef("https://spdx.org/rdf/v3/Core/externalReference")
        graph.add((node, prop_node, model_to_rdf(value, graph)))
    for value in obj.external_identifier:
        prop_node = URIRef("https://spdx.org/rdf/v3/Core/externalIdentifier")
        graph.add((node, prop_node, model_to_rdf(value, graph)))
    if obj.extension is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/Core/extension")
        graph.add((node, prop_node, model_to_rdf(obj.extension, graph)))


def agent_to_rdf(obj, graph: Graph) -> Identifier:
    if '_spdx_id' in obj.__dict__:
        element_node = URIRef(obj.spdx_id)
    else:
        element_node = BNode()
    type_node = URIRef("https://spdx.org/rdf/v3/Core/Agent")
    graph.add((element_node, RDF.type, type_node))
    agent_properties_to_rdf(element_node, obj, graph)
    return element_node


def agent_properties_to_rdf(node: Identifier, obj, graph: Graph):
    from .converter import model_to_rdf
    core.element_properties_to_rdf(node, obj, graph)


def hash_to_rdf(obj, graph: Graph) -> Identifier:
    if '_spdx_id' in obj.__dict__:
        element_node = URIRef(obj.spdx_id)
    else:
        element_node = BNode()
    type_node = URIRef("https://spdx.org/rdf/v3/Core/Hash")
    graph.add((element_node, RDF.type, type_node))
    hash_properties_to_rdf(element_node, obj, graph)
    return element_node


def hash_properties_to_rdf(node: Identifier, obj, graph: Graph):
    from .converter import model_to_rdf
    if obj.algorithm is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/Core/algorithm")
        graph.add((node, prop_node, model_to_rdf(obj.algorithm, graph)))
    if obj.hash_value is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/Core/hashValue")
        graph.add((node, prop_node, model_to_rdf(obj.hash_value, graph)))
    core.integrity_method_properties_to_rdf(node, obj, graph)


def dictionary_entry_to_rdf(obj, graph: Graph) -> Identifier:
    if '_spdx_id' in obj.__dict__:
        element_node = URIRef(obj.spdx_id)
    else:
        element_node = BNode()
    type_node = URIRef("https://spdx.org/rdf/v3/Core/DictionaryEntry")
    graph.add((element_node, RDF.type, type_node))
    dictionary_entry_properties_to_rdf(element_node, obj, graph)
    return element_node


def dictionary_entry_properties_to_rdf(node: Identifier, obj, graph: Graph):
    from .converter import model_to_rdf
    if obj.key is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/Core/key")
        graph.add((node, prop_node, model_to_rdf(obj.key, graph)))
    if obj.value is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/Core/value")
        graph.add((node, prop_node, model_to_rdf(obj.value, graph)))


def person_to_rdf(obj, graph: Graph) -> Identifier:
    if '_spdx_id' in obj.__dict__:
        element_node = URIRef(obj.spdx_id)
    else:
        element_node = BNode()
    type_node = URIRef("https://spdx.org/rdf/v3/Core/Person")
    graph.add((element_node, RDF.type, type_node))
    person_properties_to_rdf(element_node, obj, graph)
    return element_node


def person_properties_to_rdf(node: Identifier, obj, graph: Graph):
    from .converter import model_to_rdf
    core.agent_properties_to_rdf(node, obj, graph)


def bundle_to_rdf(obj, graph: Graph) -> Identifier:
    if '_spdx_id' in obj.__dict__:
        element_node = URIRef(obj.spdx_id)
    else:
        element_node = BNode()
    type_node = URIRef("https://spdx.org/rdf/v3/Core/Bundle")
    graph.add((element_node, RDF.type, type_node))
    bundle_properties_to_rdf(element_node, obj, graph)
    return element_node


def bundle_properties_to_rdf(node: Identifier, obj, graph: Graph):
    from .converter import model_to_rdf
    if obj.context is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/Core/context")
        graph.add((node, prop_node, model_to_rdf(obj.context, graph)))
    core.element_collection_properties_to_rdf(node, obj, graph)


def artifact_to_rdf(obj, graph: Graph) -> Identifier:
    if '_spdx_id' in obj.__dict__:
        element_node = URIRef(obj.spdx_id)
    else:
        element_node = BNode()
    type_node = URIRef("https://spdx.org/rdf/v3/Core/Artifact")
    graph.add((element_node, RDF.type, type_node))
    artifact_properties_to_rdf(element_node, obj, graph)
    return element_node


def artifact_properties_to_rdf(node: Identifier, obj, graph: Graph):
    from .converter import model_to_rdf
    for value in obj.originated_by:
        prop_node = URIRef("https://spdx.org/rdf/v3/Core/originatedBy")
        graph.add((node, prop_node, model_to_rdf(value, graph)))
    for value in obj.supplied_by:
        prop_node = URIRef("https://spdx.org/rdf/v3/Core/suppliedBy")
        graph.add((node, prop_node, model_to_rdf(value, graph)))
    if obj.built_time is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/Core/builtTime")
        graph.add((node, prop_node, model_to_rdf(obj.built_time, graph)))
    if obj.release_time is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/Core/releaseTime")
        graph.add((node, prop_node, model_to_rdf(obj.release_time, graph)))
    if obj.valid_until_time is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/Core/validUntilTime")
        graph.add((node, prop_node, model_to_rdf(obj.valid_until_time, graph)))
    for value in obj.standard:
        prop_node = URIRef("https://spdx.org/rdf/v3/Core/standard")
        graph.add((node, prop_node, model_to_rdf(value, graph)))
    core.element_properties_to_rdf(node, obj, graph)


def annotation_to_rdf(obj, graph: Graph) -> Identifier:
    if '_spdx_id' in obj.__dict__:
        element_node = URIRef(obj.spdx_id)
    else:
        element_node = BNode()
    type_node = URIRef("https://spdx.org/rdf/v3/Core/Annotation")
    graph.add((element_node, RDF.type, type_node))
    annotation_properties_to_rdf(element_node, obj, graph)
    return element_node


def annotation_properties_to_rdf(node: Identifier, obj, graph: Graph):
    from .converter import model_to_rdf
    if obj.annotation_type is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/Core/annotationType")
        graph.add((node, prop_node, model_to_rdf(obj.annotation_type, graph)))
    for value in obj.content_type:
        prop_node = URIRef("https://spdx.org/rdf/v3/Core/contentType")
        graph.add((node, prop_node, model_to_rdf(value, graph)))
    if obj.statement is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/Core/statement")
        graph.add((node, prop_node, model_to_rdf(obj.statement, graph)))
    if obj.subject is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/Core/subject")
        graph.add((node, prop_node, model_to_rdf(obj.subject, graph)))
    core.element_properties_to_rdf(node, obj, graph)


def external_map_to_rdf(obj, graph: Graph) -> Identifier:
    if '_spdx_id' in obj.__dict__:
        element_node = URIRef(obj.spdx_id)
    else:
        element_node = BNode()
    type_node = URIRef("https://spdx.org/rdf/v3/Core/ExternalMap")
    graph.add((element_node, RDF.type, type_node))
    external_map_properties_to_rdf(element_node, obj, graph)
    return element_node


def external_map_properties_to_rdf(node: Identifier, obj, graph: Graph):
    from .converter import model_to_rdf
    if obj.external_id is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/Core/externalId")
        graph.add((node, prop_node, model_to_rdf(obj.external_id, graph)))
    for value in obj.verified_using:
        prop_node = URIRef("https://spdx.org/rdf/v3/Core/verifiedUsing")
        graph.add((node, prop_node, model_to_rdf(value, graph)))
    if obj.location_hint is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/Core/locationHint")
        graph.add((node, prop_node, model_to_rdf(obj.location_hint, graph)))
    if obj.defining_document is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/Core/definingDocument")
        graph.add((node, prop_node, model_to_rdf(obj.defining_document, graph)))


def relationship_completeness_to_rdf(obj, graph: Graph) -> Identifier:
    from .converter import enum_value_to_str
    name = enum_value_to_str(obj)
    return URIRef("https://spdx.org/rdf/v3/Core/RelationshipCompleteness/" + name)


def profile_identifier_type_to_rdf(obj, graph: Graph) -> Identifier:
    from .converter import enum_value_to_str
    name = enum_value_to_str(obj)
    return URIRef("https://spdx.org/rdf/v3/Core/ProfileIdentifierType/" + name)


def external_identifier_type_to_rdf(obj, graph: Graph) -> Identifier:
    from .converter import enum_value_to_str
    name = enum_value_to_str(obj)
    return URIRef("https://spdx.org/rdf/v3/Core/ExternalIdentifierType/" + name)


def external_reference_type_to_rdf(obj, graph: Graph) -> Identifier:
    from .converter import enum_value_to_str
    name = enum_value_to_str(obj)
    return URIRef("https://spdx.org/rdf/v3/Core/ExternalReferenceType/" + name)


def lifecycle_scope_type_to_rdf(obj, graph: Graph) -> Identifier:
    from .converter import enum_value_to_str
    name = enum_value_to_str(obj)
    return URIRef("https://spdx.org/rdf/v3/Core/LifecycleScopeType/" + name)


def annotation_type_to_rdf(obj, graph: Graph) -> Identifier:
    from .converter import enum_value_to_str
    name = enum_value_to_str(obj)
    return URIRef("https://spdx.org/rdf/v3/Core/AnnotationType/" + name)


def hash_algorithm_to_rdf(obj, graph: Graph) -> Identifier:
    from .converter import enum_value_to_str
    name = enum_value_to_str(obj)
    return URIRef("https://spdx.org/rdf/v3/Core/HashAlgorithm/" + name)


def relationship_type_to_rdf(obj, graph: Graph) -> Identifier:
    from .converter import enum_value_to_str
    name = enum_value_to_str(obj)
    return URIRef("https://spdx.org/rdf/v3/Core/RelationshipType/" + name)


# fmt: on
