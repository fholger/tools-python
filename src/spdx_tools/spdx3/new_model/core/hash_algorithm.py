# SPDX-License-Identifier: Apache-2.0
#
# This file was auto-generated by dev/gen_python_model_from_spec.py
# Do not manually edit!

from beartype.typing import Optional
from enum import Enum, auto


class HashAlgorithm(Enum):
    """
    A HashAlgorithm is a mathematical algorithm that maps data of arbitrary size to a bit string (the hash) and is a
    one-way function, that is, a function which is practically infeasible to invert.
    """

    BLAKE2B256 = auto()
    """
    blake2b algorithm with a digest size of 256 https://datatracker.ietf.org/doc/html/rfc7693#section-4
    """
    BLAKE2B384 = auto()
    """
    blake2b algorithm with a digest size of 384 https://datatracker.ietf.org/doc/html/rfc7693#section-4
    """
    BLAKE2B512 = auto()
    """
    blake2b algorithm with a digest size of 512 https://datatracker.ietf.org/doc/html/rfc7693#section-4
    """
    BLAKE3 = auto()
    """
    https://github.com/BLAKE3-team/BLAKE3-specs/blob/master/blake3.pdf
    """
    CRYSTALS_KYBER = auto()
    """
    https://pq-crystals.org/kyber/index.shtml
    """
    CRYSTALS_DILITHIUM = auto()
    """
    https://pq-crystals.org/dilithium/index.shtml
    """
    FALCON = auto()
    """
    https://falcon-sign.info/falcon.pdf
    """
    MD2 = auto()
    """
    https://datatracker.ietf.org/doc/rfc1319/
    """
    MD4 = auto()
    """
    https://datatracker.ietf.org/doc/html/rfc1186
    """
    MD5 = auto()
    """
    https://datatracker.ietf.org/doc/html/rfc1321
    """
    MD6 = auto()
    """
    https://people.csail.mit.edu/rivest/pubs/RABCx08.pdf
    """
    OTHER = auto()
    """
    any hashing algorithm that does not exist in this list of entries
    """
    SHA1 = auto()
    """
    https://datatracker.ietf.org/doc/html/rfc3174
    """
    SHA224 = auto()
    """
    secure hashing algorithm with a digest length of 224 https://datatracker.ietf.org/doc/html/draft-ietf-pkix-sha224-01
    """
    SHA256 = auto()
    """
    secure hashing algorithm with a digest length of 256 https://www.rfc-editor.org/rfc/rfc4634
    """
    SHA3_224 = auto()
    """
    sha3 with a digest length of 224 https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.202.pdf
    """
    SHA3_256 = auto()
    """
    sha3 with a digest length of 256 https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.202.pdf
    """
    SHA3_384 = auto()
    """
    sha3 with a digest length of 384 https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.202.pdf
    """
    SHA3_512 = auto()
    """
    sha3 with a digest length of 512 https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.202.pdf
    """
    SHA384 = auto()
    """
    secure hashing algorithm with a digest length of 384 https://www.rfc-editor.org/rfc/rfc4634
    """
    SHA512 = auto()
    """
    secure hashing algorithm with a digest length of 512 https://www.rfc-editor.org/rfc/rfc4634
    """
    SPDX_PVC_SHA1 = auto()
    """
    TODOdescription
    """
    SPDX_PVC_SHA256 = auto()
    """
    TODOdescription
    """
    SPHINCS_PLUS = auto()
    """
    TODOdescription
    """

    def __str__(self) -> str:
        if self == HashAlgorithm.BLAKE2B256:
            return "blake2b256"
        if self == HashAlgorithm.BLAKE2B384:
            return "blake2b384"
        if self == HashAlgorithm.BLAKE2B512:
            return "blake2b512"
        if self == HashAlgorithm.BLAKE3:
            return "blake3"
        if self == HashAlgorithm.CRYSTALS_KYBER:
            return "crystalsKyber"
        if self == HashAlgorithm.CRYSTALS_DILITHIUM:
            return "crystalsDilithium"
        if self == HashAlgorithm.FALCON:
            return "falcon"
        if self == HashAlgorithm.MD2:
            return "md2"
        if self == HashAlgorithm.MD4:
            return "md4"
        if self == HashAlgorithm.MD5:
            return "md5"
        if self == HashAlgorithm.MD6:
            return "md6"
        if self == HashAlgorithm.OTHER:
            return "other"
        if self == HashAlgorithm.SHA1:
            return "sha1"
        if self == HashAlgorithm.SHA224:
            return "sha224"
        if self == HashAlgorithm.SHA256:
            return "sha256"
        if self == HashAlgorithm.SHA3_224:
            return "sha3_224"
        if self == HashAlgorithm.SHA3_256:
            return "sha3_256"
        if self == HashAlgorithm.SHA3_384:
            return "sha3_384"
        if self == HashAlgorithm.SHA3_512:
            return "sha3_512"
        if self == HashAlgorithm.SHA384:
            return "sha384"
        if self == HashAlgorithm.SHA512:
            return "sha512"
        if self == HashAlgorithm.SPDX_PVC_SHA1:
            return "spdxPvcSha1"
        if self == HashAlgorithm.SPDX_PVC_SHA256:
            return "spdxPvcSha256"
        if self == HashAlgorithm.SPHINCS_PLUS:
            return "sphincsPlus"
        return "unknown"

    @staticmethod
    def from_str(value: str) -> Optional['HashAlgorithm']:
        if value == "blake2b256":
            return HashAlgorithm.BLAKE2B256
        if value == "blake2b384":
            return HashAlgorithm.BLAKE2B384
        if value == "blake2b512":
            return HashAlgorithm.BLAKE2B512
        if value == "blake3":
            return HashAlgorithm.BLAKE3
        if value == "crystalsKyber":
            return HashAlgorithm.CRYSTALS_KYBER
        if value == "crystalsDilithium":
            return HashAlgorithm.CRYSTALS_DILITHIUM
        if value == "falcon":
            return HashAlgorithm.FALCON
        if value == "md2":
            return HashAlgorithm.MD2
        if value == "md4":
            return HashAlgorithm.MD4
        if value == "md5":
            return HashAlgorithm.MD5
        if value == "md6":
            return HashAlgorithm.MD6
        if value == "other":
            return HashAlgorithm.OTHER
        if value == "sha1":
            return HashAlgorithm.SHA1
        if value == "sha224":
            return HashAlgorithm.SHA224
        if value == "sha256":
            return HashAlgorithm.SHA256
        if value == "sha3_224":
            return HashAlgorithm.SHA3_224
        if value == "sha3_256":
            return HashAlgorithm.SHA3_256
        if value == "sha3_384":
            return HashAlgorithm.SHA3_384
        if value == "sha3_512":
            return HashAlgorithm.SHA3_512
        if value == "sha384":
            return HashAlgorithm.SHA384
        if value == "sha512":
            return HashAlgorithm.SHA512
        if value == "spdxPvcSha1":
            return HashAlgorithm.SPDX_PVC_SHA1
        if value == "spdxPvcSha256":
            return HashAlgorithm.SPDX_PVC_SHA256
        if value == "sphincsPlus":
            return HashAlgorithm.SPHINCS_PLUS
        return None
