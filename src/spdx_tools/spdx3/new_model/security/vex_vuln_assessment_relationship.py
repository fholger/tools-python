# SPDX-License-Identifier: Apache-2.0
#
# This file was auto-generated by dev/gen_python_model_from_spec.py
# Do not manually edit!

from ..core import Agent, CreationInfo, Element, ExternalIdentifier, ExternalReference, IntegrityMethod, RelationshipCompleteness, RelationshipType
from ..security import VulnAssessmentRelationship
from abc import abstractmethod
from beartype.typing import List, Optional
from datetime import datetime

from spdx_tools.common.typing.dataclass_with_properties import dataclass_with_properties


@dataclass_with_properties
class VexVulnAssessmentRelationship(VulnAssessmentRelationship):
    """
    VexVulnAssessmentRelationship is an abstract subclass that defined the common properties shared by all the SPDX-VEX
    status relationships.

    **Constraints**

    When linking elements using a VexVulnAssessmentRelationship, the following requirements must be observed:

    - The from: end must be a /Security/Vulnerability classed element
    - The to: end must point to elements representing the VEX _products_. To specify a different element where the
      vulnerability was detected, the VEX relationship can optionally specify _subcomponents_ using the assessedElement
      property.

    VEX inherits information from the document level down to its statements. When a statement is missing information it
    can be completed by reading the equivalent field from the containing document. For example, if a VEX relationship is
    missing data in its createdBy property, tools must consider the entity listed in the CreationInfo section of the
    document as the VEX author. In the same way, when a VEX relationship does not have a created property, the
    document's date must be considered as authoritative.
    """
    vex_version: Optional[str] = None
    """
    TODO
    """
    status_notes: Optional[str] = None
    """
    TODO
    """

    @abstractmethod
    def __init__(self):
        pass
