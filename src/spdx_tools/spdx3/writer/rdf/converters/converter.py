# SPDX-License-Identifier: Apache-2.0
#
# This file was auto-generated by dev/gen_model_to_rdf.py
# Do not manually edit!
# flake8: noqa
# fmt: off
# isort:skip_file

from beartype.typing import List, Optional, Dict, Callable
from rdflib import Graph, Literal, URIRef
from rdflib.term import Identifier
from spdx_tools.spdx.casing_tools import snake_case_to_camel_case
from spdx_tools.spdx3.model import HashAlgorithm
from . import expanded_licensing, core, dataset, ai, security, build, software, simple_licensing


_CONVERTER_FUNCTIONS: Dict[str, Callable[[any, Graph], Identifier]] = {
    "ExpandedLicensing/ListedLicense": expanded_licensing.listed_license_to_rdf,
    "ExpandedLicensing/WithAdditionOperator": expanded_licensing.with_addition_operator_to_rdf,
    "ExpandedLicensing/License": expanded_licensing.license_to_rdf,
    "ExpandedLicensing/CustomLicenseAddition": expanded_licensing.custom_license_addition_to_rdf,
    "ExpandedLicensing/ConjunctiveLicenseSet": expanded_licensing.conjunctive_license_set_to_rdf,
    "ExpandedLicensing/LicenseAddition": expanded_licensing.license_addition_to_rdf,
    "ExpandedLicensing/OrLaterOperator": expanded_licensing.or_later_operator_to_rdf,
    "ExpandedLicensing/DisjunctiveLicenseSet": expanded_licensing.disjunctive_license_set_to_rdf,
    "ExpandedLicensing/CustomLicense": expanded_licensing.custom_license_to_rdf,
    "ExpandedLicensing/ListedLicenseException": expanded_licensing.listed_license_exception_to_rdf,
    "ExpandedLicensing/ExtendableLicense": expanded_licensing.extendable_license_to_rdf,
    "Core/PositiveIntegerRange": core.positive_integer_range_to_rdf,
    "Core/ElementCollection": core.element_collection_to_rdf,
    "Core/ExternalReference": core.external_reference_to_rdf,
    "Core/ExternalIdentifier": core.external_identifier_to_rdf,
    "Core/Bom": core.bom_to_rdf,
    "Core/SpdxDocument": core.spdx_document_to_rdf,
    "Core/Tool": core.tool_to_rdf,
    "Core/CreationInfo": core.creation_info_to_rdf,
    "Core/Organization": core.organization_to_rdf,
    "Core/LifecycleScopedRelationship": core.lifecycle_scoped_relationship_to_rdf,
    "Core/SoftwareAgent": core.software_agent_to_rdf,
    "Core/IntegrityMethod": core.integrity_method_to_rdf,
    "Core/Relationship": core.relationship_to_rdf,
    "Core/Element": core.element_to_rdf,
    "Core/Agent": core.agent_to_rdf,
    "Core/Hash": core.hash_to_rdf,
    "Core/DictionaryEntry": core.dictionary_entry_to_rdf,
    "Core/Person": core.person_to_rdf,
    "Core/Bundle": core.bundle_to_rdf,
    "Core/Artifact": core.artifact_to_rdf,
    "Core/Annotation": core.annotation_to_rdf,
    "Core/ExternalMap": core.external_map_to_rdf,
    "Core/RelationshipCompleteness": core.relationship_completeness_to_rdf,
    "Core/ProfileIdentifierType": core.profile_identifier_type_to_rdf,
    "Core/ExternalIdentifierType": core.external_identifier_type_to_rdf,
    "Core/ExternalReferenceType": core.external_reference_type_to_rdf,
    "Core/LifecycleScopeType": core.lifecycle_scope_type_to_rdf,
    "Core/AnnotationType": core.annotation_type_to_rdf,
    "Core/HashAlgorithm": core.hash_algorithm_to_rdf,
    "Core/RelationshipType": core.relationship_type_to_rdf,
    "Dataset/Dataset": dataset.dataset_to_rdf,
    "Dataset/DatasetType": dataset.dataset_type_to_rdf,
    "Dataset/DatasetAvailabilityType": dataset.dataset_availability_type_to_rdf,
    "Dataset/ConfidentialityLevelType": dataset.confidentiality_level_type_to_rdf,
    "AI/AIPackage": ai.a_ipackage_to_rdf,
    "AI/SafetyRiskAssessmentType": ai.safety_risk_assessment_type_to_rdf,
    "AI/PresenceType": ai.presence_type_to_rdf,
    "Security/VexNotAffectedVulnAssessmentRelationship": security.vex_not_affected_vuln_assessment_relationship_to_rdf,
    "Security/SsvcVulnAssessmentRelationship": security.ssvc_vuln_assessment_relationship_to_rdf,
    "Security/VexFixedVulnAssessmentRelationship": security.vex_fixed_vuln_assessment_relationship_to_rdf,
    "Security/VexVulnAssessmentRelationship": security.vex_vuln_assessment_relationship_to_rdf,
    "Security/CvssV3VulnAssessmentRelationship": security.cvss_v3_vuln_assessment_relationship_to_rdf,
    "Security/VulnAssessmentRelationship": security.vuln_assessment_relationship_to_rdf,
    "Security/Vulnerability": security.vulnerability_to_rdf,
    "Security/CvssV2VulnAssessmentRelationship": security.cvss_v2_vuln_assessment_relationship_to_rdf,
    "Security/VexAffectedVulnAssessmentRelationship": security.vex_affected_vuln_assessment_relationship_to_rdf,
    "Security/ExploitCatalogVulnAssessmentRelationship": security.exploit_catalog_vuln_assessment_relationship_to_rdf,
    "Security/EpssVulnAssessmentRelationship": security.epss_vuln_assessment_relationship_to_rdf,
    "Security/VexUnderInvestigationVulnAssessmentRelationship": security.vex_under_investigation_vuln_assessment_relationship_to_rdf,
    "Security/VexJustificationType": security.vex_justification_type_to_rdf,
    "Security/ExploitCatalogType": security.exploit_catalog_type_to_rdf,
    "Security/SsvcDecisionType": security.ssvc_decision_type_to_rdf,
    "Build/Build": build.build_to_rdf,
    "Software/Package": software.package_to_rdf,
    "Software/File": software.file_to_rdf,
    "Software/Snippet": software.snippet_to_rdf,
    "Software/Sbom": software.sbom_to_rdf,
    "Software/SoftwareArtifact": software.software_artifact_to_rdf,
    "Software/SoftwareDependencyRelationship": software.software_dependency_relationship_to_rdf,
    "Software/DependencyConditionalityType": software.dependency_conditionality_type_to_rdf,
    "Software/SoftwarePurpose": software.software_purpose_to_rdf,
    "Software/SoftwareDependencyLinkType": software.software_dependency_link_type_to_rdf,
    "Software/SbomType": software.sbom_type_to_rdf,
    "SimpleLicensing/SimpleLicensingText": simple_licensing.simple_licensing_text_to_rdf,
    "SimpleLicensing/LicenseExpression": simple_licensing.license_expression_to_rdf,
    "SimpleLicensing/AnyLicenseInfo": simple_licensing.any_license_info_to_rdf
}


def module_to_namespace(module: str) -> Optional[str]:
    if not module.startswith("spdx_tools.spdx3.model"):
        return None
    if module.startswith("spdx_tools.spdx3.model.expanded_licensing"):
        return "ExpandedLicensing"
    if module.startswith("spdx_tools.spdx3.model.core"):
        return "Core"
    if module.startswith("spdx_tools.spdx3.model.dataset"):
        return "Dataset"
    if module.startswith("spdx_tools.spdx3.model.ai"):
        return "AI"
    if module.startswith("spdx_tools.spdx3.model.security"):
        return "Security"
    if module.startswith("spdx_tools.spdx3.model.build"):
        return "Build"
    if module.startswith("spdx_tools.spdx3.model.software"):
        return "Software"
    if module.startswith("spdx_tools.spdx3.model.simple_licensing"):
        return "SimpleLicensing"
    return "Core"


def literal_to_rdf(obj, _: Graph) -> Identifier:
    return Literal(obj)


def enum_value_to_str(obj) -> str:
    if obj == HashAlgorithm.BLAKE2B256:
        return "blake2b256"
    if obj == HashAlgorithm.BLAKE2B384:
        return "blake2b384"
    if obj == HashAlgorithm.BLAKE2B512:
        return "blake2b512"
    if obj == HashAlgorithm.SHA3_224:
        return "sha3_224"
    if obj == HashAlgorithm.SHA3_256:
        return "sha3_224"
    if obj == HashAlgorithm.SHA3_384:
        return "sha3_384"
    if obj == HashAlgorithm.SHA3_512:
        return "sha3_512"
    return snake_case_to_camel_case(obj.name.lower())


def model_to_rdf(obj, graph: Graph) -> Identifier:
    if isinstance(obj, str):
        return URIRef(obj)
    type_name = obj.__class__.__qualname__
    module_name = obj.__class__.__module__
    namespace = module_to_namespace(module_name)
    if namespace is None:
        return literal_to_rdf(obj, graph)

    lookup = f"{namespace}/{type_name}"
    converter = _CONVERTER_FUNCTIONS[lookup] if lookup in _CONVERTER_FUNCTIONS else literal_to_rdf
    return converter(obj, graph)
# fmt: on
