# SPDX-License-Identifier: Apache-2.0
#
# This file was auto-generated by dev/gen_model_to_rdf.py
# Do not manually edit!
# flake8: noqa
# isort:skip_file

# fmt: off

from rdflib import Graph, URIRef, RDF, Literal, BNode
from rdflib.term import Identifier
from spdx_tools.spdx.casing_tools import snake_case_to_camel_case
from . import expanded_licensing, core, dataset, ai, security, build, software, simple_licensing


def simple_licensing_text_to_rdf(obj, graph: Graph) -> Identifier:
    if '_spdx_id' in obj.__dict__:
        element_node = URIRef(obj.spdx_id)
    else:
        element_node = BNode()
    type_node = URIRef("https://spdx.org/rdf/v3/SimpleLicensing/SimpleLicensingText")
    graph.add((element_node, RDF.type, type_node))
    simple_licensing_text_properties_to_rdf(element_node, obj, graph)
    return element_node


def simple_licensing_text_properties_to_rdf(node: Identifier, obj, graph: Graph):
    from .converter import model_to_rdf
    if obj.license_text is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/SimpleLicensing/licenseText")
        value = obj.license_text
        graph.add((node, prop_node, Literal(value, datatype="http://www.w3.org/2001/XMLSchema#string")))
    core.element_properties_to_rdf(node, obj, graph)


def license_expression_to_rdf(obj, graph: Graph) -> Identifier:
    if '_spdx_id' in obj.__dict__:
        element_node = URIRef(obj.spdx_id)
    else:
        element_node = BNode()
    type_node = URIRef("https://spdx.org/rdf/v3/SimpleLicensing/LicenseExpression")
    graph.add((element_node, RDF.type, type_node))
    license_expression_properties_to_rdf(element_node, obj, graph)
    return element_node


def license_expression_properties_to_rdf(node: Identifier, obj, graph: Graph):
    from .converter import model_to_rdf
    if obj.license_expression is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/SimpleLicensing/licenseExpression")
        value = obj.license_expression
        graph.add((node, prop_node, Literal(value, datatype="http://www.w3.org/2001/XMLSchema#string")))
    simple_licensing.any_license_info_properties_to_rdf(node, obj, graph)


def any_license_info_to_rdf(obj, graph: Graph) -> Identifier:
    if '_spdx_id' in obj.__dict__:
        element_node = URIRef(obj.spdx_id)
    else:
        element_node = BNode()
    type_node = URIRef("https://spdx.org/rdf/v3/SimpleLicensing/AnyLicenseInfo")
    graph.add((element_node, RDF.type, type_node))
    any_license_info_properties_to_rdf(element_node, obj, graph)
    return element_node


def any_license_info_properties_to_rdf(node: Identifier, obj, graph: Graph):
    from .converter import model_to_rdf
    core.element_properties_to_rdf(node, obj, graph)


# fmt: on
