# SPDX-License-Identifier: Apache-2.0
#
# This file was auto-generated by dev/gen_model_to_rdf.py
# Do not manually edit!
# flake8: noqa
# isort:skip_file

# fmt: off

from rdflib import Graph, URIRef, RDF, Literal, BNode
from rdflib.term import Identifier
from spdx_tools.spdx.casing_tools import snake_case_to_camel_case
from . import expanded_license, core, dataset, licensing, ai, security, build, software


def conjunctive_license_set_to_rdf(obj, graph: Graph) -> Identifier:
    if '_spdx_id' in obj.__dict__:
        element_node = URIRef(obj.spdx_id)
    else:
        element_node = BNode()
    type_node = URIRef("https://spdx.org/rdf/v3/ExpandedLicense/ConjunctiveLicenseSet")
    graph.add((element_node, RDF.type, type_node))
    conjunctive_license_set_properties_to_rdf(element_node, obj, graph)
    return element_node


def conjunctive_license_set_properties_to_rdf(node: Identifier, obj, graph: Graph):
    from .converter import model_to_rdf
    for value in obj.member:
        prop_node = URIRef("https://spdx.org/rdf/v3/ExpandedLicense/member")
        graph.add((node, prop_node, model_to_rdf(value, graph)))
    licensing.any_license_info_properties_to_rdf(node, obj, graph)


def disjunctive_license_set_to_rdf(obj, graph: Graph) -> Identifier:
    if '_spdx_id' in obj.__dict__:
        element_node = URIRef(obj.spdx_id)
    else:
        element_node = BNode()
    type_node = URIRef("https://spdx.org/rdf/v3/ExpandedLicense/DisjunctiveLicenseSet")
    graph.add((element_node, RDF.type, type_node))
    disjunctive_license_set_properties_to_rdf(element_node, obj, graph)
    return element_node


def disjunctive_license_set_properties_to_rdf(node: Identifier, obj, graph: Graph):
    from .converter import model_to_rdf
    for value in obj.member:
        prop_node = URIRef("https://spdx.org/rdf/v3/ExpandedLicense/member")
        graph.add((node, prop_node, model_to_rdf(value, graph)))
    licensing.any_license_info_properties_to_rdf(node, obj, graph)


def extendable_license_to_rdf(obj, graph: Graph) -> Identifier:
    if '_spdx_id' in obj.__dict__:
        element_node = URIRef(obj.spdx_id)
    else:
        element_node = BNode()
    type_node = URIRef("https://spdx.org/rdf/v3/ExpandedLicense/ExtendableLicense")
    graph.add((element_node, RDF.type, type_node))
    extendable_license_properties_to_rdf(element_node, obj, graph)
    return element_node


def extendable_license_properties_to_rdf(node: Identifier, obj, graph: Graph):
    from .converter import model_to_rdf
    licensing.any_license_info_properties_to_rdf(node, obj, graph)


# fmt: on
