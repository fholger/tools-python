# SPDX-License-Identifier: Apache-2.0
#
# This file was auto-generated by dev/gen_python_model_from_spec.py
# Do not manually edit!
# flake8: noqa

from enum import Enum, auto

from beartype.typing import Optional


class SsvcDecisionType(Enum):
    """
    SsvcDecisionType specifies the type of decision that's been made according to the Stakeholder-Specific
    Vulnerability Categorization (SSVC) system
    [https://www.cisa.gov/stakeholder-specific-vulnerability-categorization-ssvc](https://www.cisa.gov/stakeholder-specific-vulnerability-categorization-ssvc)
    """

    ACT = auto()
    """
    The vulnerability requires attention from the organization's internal, supervisory-level and leadership-level
    individuals. Necessary actions include requesting assistance or information about the vulnerability, as well as
    publishing a notification either internally and/or externally. Typically, internal groups would meet to determine
    the overall response and then execute agreed upon actions. CISA recommends remediating Act vulnerabilities as soon
    as possible.
    """
    ATTEND = auto()
    """
    The vulnerability requires attention from the organization's internal, supervisory-level individuals. Necessary
    actions include requesting assistance or information about the vulnerability, and may involve publishing a
    notification either internally and/or externally. CISA recommends remediating Attend vulnerabilities sooner than
    standard update timelines.
    """
    TRACK = auto()
    """
    The vulnerability does not require action at this time. The organization would continue to track the vulnerability
    and reassess it if new information becomes available. CISA recommends remediating Track vulnerabilities within
    standard update timelines.
    """
    TRACK_STAR = auto()
    """
    (Track* in the SSVC spec) The vulnerability contains specific characteristics that may require closer monitoring
    for changes. CISA recommends remediating Track* vulnerabilities within standard update timelines.
    """

    def __str__(self) -> str:
        if self == SsvcDecisionType.ACT:
            return "act"
        if self == SsvcDecisionType.ATTEND:
            return "attend"
        if self == SsvcDecisionType.TRACK:
            return "track"
        if self == SsvcDecisionType.TRACK_STAR:
            return "trackStar"
        return "unknown"

    @staticmethod
    def from_str(value: str) -> Optional["SsvcDecisionType"]:
        if value == "act":
            return SsvcDecisionType.ACT
        if value == "attend":
            return SsvcDecisionType.ATTEND
        if value == "track":
            return SsvcDecisionType.TRACK
        if value == "trackStar":
            return SsvcDecisionType.TRACK_STAR
        return None
