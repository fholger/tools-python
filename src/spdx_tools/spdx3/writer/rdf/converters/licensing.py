# SPDX-License-Identifier: Apache-2.0
#
# This file was auto-generated by dev/gen_model_to_rdf.py
# Do not manually edit!
# flake8: noqa
# isort:skip_file

# fmt: off

from rdflib import Graph, URIRef, RDF, Literal, BNode
from rdflib.term import Identifier
from spdx_tools.spdx.casing_tools import snake_case_to_camel_case
from . import expanded_license, core, dataset, licensing, ai, security, build, software


def listed_license_to_rdf(obj, graph: Graph) -> Identifier:
    if '_spdx_id' in obj.__dict__:
        element_node = URIRef(obj.spdx_id)
    else:
        element_node = BNode()
    type_node = URIRef("https://spdx.org/rdf/v3/Licensing/ListedLicense")
    graph.add((element_node, RDF.type, type_node))
    listed_license_properties_to_rdf(element_node, obj, graph)
    return element_node


def listed_license_properties_to_rdf(node: Identifier, obj, graph: Graph):
    from .converter import model_to_rdf
    if obj.list_version_added is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/Licensing/listVersionAdded")
        graph.add((node, prop_node, model_to_rdf(obj.list_version_added, graph)))
    if obj.deprecated_version is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/Licensing/deprecatedVersion")
        graph.add((node, prop_node, model_to_rdf(obj.deprecated_version, graph)))
    licensing.license_properties_to_rdf(node, obj, graph)


def with_addition_operator_to_rdf(obj, graph: Graph) -> Identifier:
    if '_spdx_id' in obj.__dict__:
        element_node = URIRef(obj.spdx_id)
    else:
        element_node = BNode()
    type_node = URIRef("https://spdx.org/rdf/v3/Licensing/WithAdditionOperator")
    graph.add((element_node, RDF.type, type_node))
    with_addition_operator_properties_to_rdf(element_node, obj, graph)
    return element_node


def with_addition_operator_properties_to_rdf(node: Identifier, obj, graph: Graph):
    from .converter import model_to_rdf
    if obj.subject_license is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/ExpandedLicense/subjectLicense")
        graph.add((node, prop_node, model_to_rdf(obj.subject_license, graph)))
    if obj.subject_addition is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/ExpandedLicense/subjectAddition")
        graph.add((node, prop_node, model_to_rdf(obj.subject_addition, graph)))
    licensing.any_license_info_properties_to_rdf(node, obj, graph)


def license_to_rdf(obj, graph: Graph) -> Identifier:
    if '_spdx_id' in obj.__dict__:
        element_node = URIRef(obj.spdx_id)
    else:
        element_node = BNode()
    type_node = URIRef("https://spdx.org/rdf/v3/Licensing/License")
    graph.add((element_node, RDF.type, type_node))
    license_properties_to_rdf(element_node, obj, graph)
    return element_node


def license_properties_to_rdf(node: Identifier, obj, graph: Graph):
    from .converter import model_to_rdf
    if obj.license_text is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/Licensing/licenseText")
        graph.add((node, prop_node, model_to_rdf(obj.license_text, graph)))
    if obj.is_osi_approved is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/Licensing/isOsiApproved")
        graph.add((node, prop_node, model_to_rdf(obj.is_osi_approved, graph)))
    if obj.is_fsf_libre is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/Licensing/isFsfLibre")
        graph.add((node, prop_node, model_to_rdf(obj.is_fsf_libre, graph)))
    if obj.standard_license_header is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/Licensing/standardLicenseHeader")
        graph.add((node, prop_node, model_to_rdf(obj.standard_license_header, graph)))
    if obj.standard_license_template is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/Licensing/standardLicenseTemplate")
        graph.add((node, prop_node, model_to_rdf(obj.standard_license_template, graph)))
    if obj.is_deprecated_license_id is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/Licensing/isDeprecatedLicenseId")
        graph.add((node, prop_node, model_to_rdf(obj.is_deprecated_license_id, graph)))
    if obj.obsoleted_by is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/Licensing/obsoletedBy")
        graph.add((node, prop_node, model_to_rdf(obj.obsoleted_by, graph)))
    licensing.extendable_license_properties_to_rdf(node, obj, graph)


def custom_license_addition_to_rdf(obj, graph: Graph) -> Identifier:
    if '_spdx_id' in obj.__dict__:
        element_node = URIRef(obj.spdx_id)
    else:
        element_node = BNode()
    type_node = URIRef("https://spdx.org/rdf/v3/Licensing/CustomLicenseAddition")
    graph.add((element_node, RDF.type, type_node))
    custom_license_addition_properties_to_rdf(element_node, obj, graph)
    return element_node


def custom_license_addition_properties_to_rdf(node: Identifier, obj, graph: Graph):
    from .converter import model_to_rdf
    licensing.license_addition_properties_to_rdf(node, obj, graph)


def license_addition_to_rdf(obj, graph: Graph) -> Identifier:
    if '_spdx_id' in obj.__dict__:
        element_node = URIRef(obj.spdx_id)
    else:
        element_node = BNode()
    type_node = URIRef("https://spdx.org/rdf/v3/Licensing/LicenseAddition")
    graph.add((element_node, RDF.type, type_node))
    license_addition_properties_to_rdf(element_node, obj, graph)
    return element_node


def license_addition_properties_to_rdf(node: Identifier, obj, graph: Graph):
    from .converter import model_to_rdf
    if obj.addition_text is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/Licensing/additionText")
        graph.add((node, prop_node, model_to_rdf(obj.addition_text, graph)))
    if obj.standard_addition_template is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/Licensing/standardAdditionTemplate")
        graph.add((node, prop_node, model_to_rdf(obj.standard_addition_template, graph)))
    if obj.is_deprecated_addition_id is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/Licensing/isDeprecatedAdditionId")
        graph.add((node, prop_node, model_to_rdf(obj.is_deprecated_addition_id, graph)))
    if obj.obsoleted_by is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/Licensing/obsoletedBy")
        graph.add((node, prop_node, model_to_rdf(obj.obsoleted_by, graph)))
    core.element_properties_to_rdf(node, obj, graph)


def or_later_operator_to_rdf(obj, graph: Graph) -> Identifier:
    if '_spdx_id' in obj.__dict__:
        element_node = URIRef(obj.spdx_id)
    else:
        element_node = BNode()
    type_node = URIRef("https://spdx.org/rdf/v3/Licensing/OrLaterOperator")
    graph.add((element_node, RDF.type, type_node))
    or_later_operator_properties_to_rdf(element_node, obj, graph)
    return element_node


def or_later_operator_properties_to_rdf(node: Identifier, obj, graph: Graph):
    from .converter import model_to_rdf
    if obj.subject_license is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/ExpandedLicense/subjectLicense")
        graph.add((node, prop_node, model_to_rdf(obj.subject_license, graph)))
    licensing.extendable_license_properties_to_rdf(node, obj, graph)


def custom_license_to_rdf(obj, graph: Graph) -> Identifier:
    if '_spdx_id' in obj.__dict__:
        element_node = URIRef(obj.spdx_id)
    else:
        element_node = BNode()
    type_node = URIRef("https://spdx.org/rdf/v3/Licensing/CustomLicense")
    graph.add((element_node, RDF.type, type_node))
    custom_license_properties_to_rdf(element_node, obj, graph)
    return element_node


def custom_license_properties_to_rdf(node: Identifier, obj, graph: Graph):
    from .converter import model_to_rdf
    licensing.license_properties_to_rdf(node, obj, graph)


def license_expression_to_rdf(obj, graph: Graph) -> Identifier:
    if '_spdx_id' in obj.__dict__:
        element_node = URIRef(obj.spdx_id)
    else:
        element_node = BNode()
    type_node = URIRef("https://spdx.org/rdf/v3/Licensing/LicenseExpression")
    graph.add((element_node, RDF.type, type_node))
    license_expression_properties_to_rdf(element_node, obj, graph)
    return element_node


def license_expression_properties_to_rdf(node: Identifier, obj, graph: Graph):
    from .converter import model_to_rdf
    if obj.license_expression is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/Licensing/licenseExpression")
        graph.add((node, prop_node, model_to_rdf(obj.license_expression, graph)))
    licensing.any_license_info_properties_to_rdf(node, obj, graph)


def listed_license_exception_to_rdf(obj, graph: Graph) -> Identifier:
    if '_spdx_id' in obj.__dict__:
        element_node = URIRef(obj.spdx_id)
    else:
        element_node = BNode()
    type_node = URIRef("https://spdx.org/rdf/v3/Licensing/ListedLicenseException")
    graph.add((element_node, RDF.type, type_node))
    listed_license_exception_properties_to_rdf(element_node, obj, graph)
    return element_node


def listed_license_exception_properties_to_rdf(node: Identifier, obj, graph: Graph):
    from .converter import model_to_rdf
    if obj.list_version_added is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/Licensing/listVersionAdded")
        graph.add((node, prop_node, model_to_rdf(obj.list_version_added, graph)))
    if obj.deprecated_version is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/Licensing/deprecatedVersion")
        graph.add((node, prop_node, model_to_rdf(obj.deprecated_version, graph)))
    licensing.license_addition_properties_to_rdf(node, obj, graph)


def any_license_info_to_rdf(obj, graph: Graph) -> Identifier:
    if '_spdx_id' in obj.__dict__:
        element_node = URIRef(obj.spdx_id)
    else:
        element_node = BNode()
    type_node = URIRef("https://spdx.org/rdf/v3/Licensing/AnyLicenseInfo")
    graph.add((element_node, RDF.type, type_node))
    any_license_info_properties_to_rdf(element_node, obj, graph)
    return element_node


def any_license_info_properties_to_rdf(node: Identifier, obj, graph: Graph):
    from .converter import model_to_rdf
    core.element_properties_to_rdf(node, obj, graph)


# fmt: on
