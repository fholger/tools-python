# SPDX-License-Identifier: Apache-2.0
#
# This file was auto-generated by dev/gen_python_model_from_spec.py
# Do not manually edit!
# flake8: noqa

from abc import abstractmethod

from beartype.typing import Optional

from spdx_tools.common.typing.dataclass_with_properties import dataclass_with_properties

from ..expanded_license.extendable_license import ExtendableLicense


@dataclass_with_properties
class License(ExtendableLicense):
    """
    A License represents a license text, whether listed on the SPDX License List (ListedLicense) or defined by an SPDX
    data creator (CustomLicense).
    """

    license_text: str = None
    """
    A licenseText contains the plain text of the License, without templating or other similar markup.

    Users of the licenseText for a License can apply the SPDX Matching Guidelines when comparing it to another text for
    matching purposes.
    """
    is_osi_approved: Optional[bool] = None
    """
    isOsiApproved specifies whether the [Open Source Initiative (OSI)](https://opensource.org) has listed this License
    as "approved" in their list of OSI Approved Licenses, located at the time of this writing at
    https://opensource.org/licenses/.

    A value of "true" indicates that the OSI has listed this License as approved.

    A value of "false" indicates that the OSI has not listed this License as approved.

    If the isOsiApproved field is not specified, the SPDX data creator makes no assertions about whether the License is
    approved by the OSI.
    """
    is_fsf_libre: Optional[bool] = None
    """
    isFsfLibre specifies whether the [Free Software Foundation FSF](https://fsf.org) has listed this License as "free"
    in their commentary on licenses, located at the time of this writing at
    https://www.gnu.org/licenses/license-list.en.html.

    A value of "true" indicates that the FSF has listed this License as _free_.

    A value of "false" indicates that the FSF has listed this License as _not free_.

    If the isFsfLibre field is not specified, the SPDX data creator makes no assertions about whether the License is
    listed in the FSF's commentary.
    """
    standard_license_header: Optional[str] = None
    """
    A standardLicenseHeader contains the plain text of the License author's preferred wording to be used, typically in
    a source code file's header comments or similar location, to indicate that the file is subject to the specified
    License.
    """
    standard_license_template: Optional[str] = None
    """
    A standardLicenseTemplate contains a license template which describes sections of the License text which can be
    varied. See the Legacy Text Template format section of the SPDX specification for format information.
    """
    is_deprecated_license_id: Optional[bool] = None
    """
    The isDeprecatedLicenseId property specifies whether an identifier for a License or LicenseAddition has been marked
    as deprecated. If the property is not defined, then it is presumed to be false (i.e., not deprecated).

    If the License or LicenseAddition is included on the SPDX License List, then the `deprecatedVersion` property
    indicates on which version release of the License List it was first marked as deprecated.

    "Deprecated" in this context refers to deprecating the use of the _identifier_, not the underlying license. In
    other words, even if a License's author or steward has stated that a particular License generally should not be
    used, that would _not_ mean that the License's identifier is "deprecated." Rather, a License or LicenseAddition
    operator is typically marked as "deprecated" when it is determined that use of another identifier is preferable.
    """
    obsoleted_by: Optional[str] = None
    """
    An obsoletedBy value for a deprecated License or LicenseAddition specifies the licenseId of the replacement License
    or LicenseAddition that is preferred to be used in its place. It should use the same format as specified for a
    licenseId.

    The License's or LicenseAddition's comment value may include more information about the reason why the licenseId
    specified in the obsoletedBy value is preferred.
    """

    @abstractmethod
    def __init__(self):
        pass
