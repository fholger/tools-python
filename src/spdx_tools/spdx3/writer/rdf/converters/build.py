# SPDX-License-Identifier: Apache-2.0
#
# This file was auto-generated by dev/gen_model_to_rdf.py
# Do not manually edit!
# flake8: noqa
# isort:skip_file

# fmt: off

from rdflib import Graph, URIRef, RDF, Literal, BNode
from rdflib.term import Identifier
from spdx_tools.spdx.casing_tools import snake_case_to_camel_case
from . import expanded_licensing, core, dataset, ai, security, build, software, simple_licensing


def build_to_rdf(obj, graph: Graph) -> Identifier:
    if '_spdx_id' in obj.__dict__:
        element_node = URIRef(obj.spdx_id)
    else:
        element_node = BNode()
    type_node = URIRef("https://spdx.org/rdf/v3/Build/Build")
    graph.add((element_node, RDF.type, type_node))
    build_properties_to_rdf(element_node, obj, graph)
    return element_node


def build_properties_to_rdf(node: Identifier, obj, graph: Graph):
    from .converter import model_to_rdf
    if obj.build_type is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/Build/buildType")
        value = obj.build_type
        graph.add((node, prop_node, Literal(value, datatype="http://www.w3.org/2001/XMLSchema#anyURI")))
    if obj.build_id is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/Build/buildId")
        value = obj.build_id
        graph.add((node, prop_node, Literal(value, datatype="http://www.w3.org/2001/XMLSchema#string")))
    for value in obj.config_source_entrypoint:
        prop_node = URIRef("https://spdx.org/rdf/v3/Build/configSourceEntrypoint")
        graph.add((node, prop_node, Literal(value, datatype="http://www.w3.org/2001/XMLSchema#string")))
    for value in obj.config_source_uri:
        prop_node = URIRef("https://spdx.org/rdf/v3/Build/configSourceUri")
        graph.add((node, prop_node, Literal(value, datatype="http://www.w3.org/2001/XMLSchema#anyURI")))
    for value in obj.config_source_digest:
        prop_node = URIRef("https://spdx.org/rdf/v3/Build/configSourceDigest")
        graph.add((node, prop_node, model_to_rdf(value, graph)))
    for key, value in obj.parameters.items():
        dict_node = BNode()
        graph.add((dict_node, RDF.type, URIRef("https://spdx.org/rdf/v3/Core/DictionaryEntry")))
        key_node = URIRef("https://spdx.org/rdf/v3/Core/key")
        graph.add((dict_node, key_node, Literal(key, datatype="http://www.w3.org/2001/XMLSchema#string")))
        if value is not None:
            value_node = URIRef("https://spdx.org/rdf/v3/Core/value")
            graph.add((dict_node, value_node, Literal(value, datatype="http://www.w3.org/2001/XMLSchema#string")))
        prop_node = URIRef("https://spdx.org/rdf/v3/Build/parameters")
        graph.add((node, prop_node, dict_node))
    if obj.build_start_time is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/Build/buildStartTime")
        value = obj.build_start_time
        graph.add((node, prop_node, Literal(value, datatype="https://spdx.org/rdf/v3/Core/DateTime")))
    if obj.build_end_time is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/Build/buildEndTime")
        value = obj.build_end_time
        graph.add((node, prop_node, Literal(value, datatype="https://spdx.org/rdf/v3/Core/DateTime")))
    for key, value in obj.environment.items():
        dict_node = BNode()
        graph.add((dict_node, RDF.type, URIRef("https://spdx.org/rdf/v3/Core/DictionaryEntry")))
        key_node = URIRef("https://spdx.org/rdf/v3/Core/key")
        graph.add((dict_node, key_node, Literal(key, datatype="http://www.w3.org/2001/XMLSchema#string")))
        if value is not None:
            value_node = URIRef("https://spdx.org/rdf/v3/Core/value")
            graph.add((dict_node, value_node, Literal(value, datatype="http://www.w3.org/2001/XMLSchema#string")))
        prop_node = URIRef("https://spdx.org/rdf/v3/Build/environment")
        graph.add((node, prop_node, dict_node))
    core.element_properties_to_rdf(node, obj, graph)


# fmt: on
