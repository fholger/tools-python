# SPDX-License-Identifier: Apache-2.0
#
# This file was auto-generated by dev/gen_python_model_from_spec.py
# Do not manually edit!

from ..core import Agent, CreationInfo, ExternalIdentifier, ExternalReference, IntegrityMethod
from ..dataset import ConfidentialityLevelType, DatasetAvailabilityType, DatasetType, PresenceType
from ..licensing import AnyLicenseInfo
from ..software import Package, SoftwarePurpose
from beartype.typing import Dict, List, Optional
from dataclasses import field
from datetime import datetime
from spdx_tools.common.typing.type_checks import check_types_and_set_values

from spdx_tools.common.typing.dataclass_with_properties import dataclass_with_properties


@dataclass_with_properties
class Dataset(Package):
    """
    Metadata information that can be added to a dataset that may be used in a software or to train/test an AI package.
    External property restriction on /Core/Artifact/originatedBy: minCount: 1 External property restriction on
    /Software/Package/downloadLocation: minCount: 1 External property restriction on
    /Software/SoftwareArtifact/primaryPurpose: minCount: 1 External property restriction on /Core/Artifact/releaseTime:
    minCount: 1 External property restriction on /Core/Artifact/builtTime: minCount: 1
    """
    dataset_type: List[DatasetType] = field(default_factory=list)
    """
    Type describes the datatype contained in the dataset. For example a dataset can be an image dataset for computer
    vision applications, a text dataset such as the contents of a book or Wikipedia article, or sometimes a multimodal
    dataset that contains multiple types of data.
    """
    data_collection_process: Optional[str] = None
    """
    DataCollectionProcess describes how a dataset was collected. Examples include the sources from which a dataset was
    scrapped or the interview protocol that was used for data collection.
    """
    intended_use: Optional[str] = None
    """
    IntendedUse describes what the given dataset should be used for. Some datasets are collected to be used only for
    particular purposes. For example, medical data collected from a specific demography might only be applicable for
    training machine learning models to make predictions for that demography. In such a case, the intendedUse field
    would capture this information. Similarly, if a dataset is collected for building a facial recognition model, the
    intendedUse field would specify that.
    """
    dataset_size: Optional[int] = None
    """
    DatasetSize Captures how large a dataset is. The size is to be measured in bytes.
    """
    dataset_noise: Optional[str] = None
    """
    DatasetNoise describes what kinds of noises a dataset might encompass. The field uses free form text to specify the
    fields or the samples that might be noisy. Alternatively, it can also be used to describe various noises that could
    impact the whole dataset.
    """
    data_preprocessing: List[str] = field(default_factory=list)
    """
    DataPreprocessing describes the various preprocessing steps that were applied to the raw data to create the dataset.
    """
    sensor: Dict[str, Optional[str]] = field(default_factory=list)
    """
    Sensor describes a sensor that was used for collecting the data and its calibration value as a key-value pair.
    """
    known_bias: List[str] = field(default_factory=list)
    """
    KnownBias is a free form text field that describes the different biases that the dataset encompasses.
    """
    sensitive_personal_information: Optional[PresenceType] = None
    """
    SensitivePersonalInformation indicates the presence of sensitive personal data or information that allows drawing
    conclusions about a person's identity.
    """
    anonymization_method_used: List[str] = field(default_factory=list)
    """
    AnonymizationMethodUsed describes the methods used to anonymize the dataset (of fields in the dataset).
    """
    confidentiality_level: Optional[ConfidentialityLevelType] = None
    """
    ConfidentialityLevel describes the levels of confidentiality of the data points contained in the dataset.
    """
    dataset_update_mechanism: Optional[str] = None
    """
    DatasetUpdateMechanism describes a mechanism to update the dataset.
    """
    dataset_availability: Optional[DatasetAvailabilityType] = None
    """
    Some datasets are publicly available and can be downloaded directly. Others are only accessible behind a
    clickthrough, or after filling a registration form. This field will describe the dataset availability from that
    perspective.
    """

    def __init__(
        self,
        spdx_id: str,
        creation_info: CreationInfo,
        dataset_type: List[DatasetType],
        name: Optional[str] = None,
        summary: Optional[str] = None,
        description: Optional[str] = None,
        comment: Optional[str] = None,
        verified_using: List[IntegrityMethod] = None,
        external_reference: List[ExternalReference] = None,
        external_identifier: List[ExternalIdentifier] = None,
        extension: List[str] = None,
        originated_by: List[str] = None,
        supplied_by: List[str] = None,
        built_time: Optional[datetime] = None,
        release_time: Optional[datetime] = None,
        valid_until_time: Optional[datetime] = None,
        standard: List[str] = None,
        content_identifier: Optional[str] = None,
        primary_purpose: Optional[SoftwarePurpose] = None,
        additional_purpose: List[SoftwarePurpose] = None,
        concluded_license: Optional[AnyLicenseInfo] = None,
        declared_license: Optional[AnyLicenseInfo] = None,
        copyright_text: Optional[str] = None,
        attribution_text: Optional[str] = None,
        package_version: Optional[str] = None,
        download_location: Optional[str] = None,
        package_url: Optional[str] = None,
        homepage: Optional[str] = None,
        source_info: Optional[str] = None,
        data_collection_process: Optional[str] = None,
        intended_use: Optional[str] = None,
        dataset_size: Optional[int] = None,
        dataset_noise: Optional[str] = None,
        data_preprocessing: List[str] = None,
        sensor: Dict[str, Optional[str]] = None,
        known_bias: List[str] = None,
        sensitive_personal_information: Optional[PresenceType] = None,
        anonymization_method_used: List[str] = None,
        confidentiality_level: Optional[ConfidentialityLevelType] = None,
        dataset_update_mechanism: Optional[str] = None,
        dataset_availability: Optional[DatasetAvailabilityType] = None,
    ):
        verified_using = [] if verified_using is None else verified_using
        external_reference = [] if external_reference is None else external_reference
        external_identifier = [] if external_identifier is None else external_identifier
        extension = [] if extension is None else extension
        originated_by = [] if originated_by is None else originated_by
        supplied_by = [] if supplied_by is None else supplied_by
        standard = [] if standard is None else standard
        additional_purpose = [] if additional_purpose is None else additional_purpose
        data_preprocessing = [] if data_preprocessing is None else data_preprocessing
        sensor = {} if sensor is None else sensor
        known_bias = [] if known_bias is None else known_bias
        anonymization_method_used = [] if anonymization_method_used is None else anonymization_method_used
        check_types_and_set_values(self, locals())
