# SPDX-License-Identifier: Apache-2.0
#
# This file was auto-generated by dev/gen_model_to_rdf.py
# Do not manually edit!
# flake8: noqa
# isort:skip_file

# fmt: off

from rdflib import Graph, URIRef, RDF, Literal, BNode
from rdflib.term import Identifier
from spdx_tools.spdx.casing_tools import snake_case_to_camel_case
from . import expanded_licensing, core, dataset, ai, security, build, software, simple_licensing


def listed_license_to_rdf(obj, graph: Graph) -> Identifier:
    if '_spdx_id' in obj.__dict__:
        element_node = URIRef(obj.spdx_id)
    else:
        element_node = BNode()
    type_node = URIRef("https://spdx.org/rdf/v3/ExpandedLicensing/ListedLicense")
    graph.add((element_node, RDF.type, type_node))
    listed_license_properties_to_rdf(element_node, obj, graph)
    return element_node


def listed_license_properties_to_rdf(node: Identifier, obj, graph: Graph):
    from .converter import model_to_rdf
    if obj.list_version_added is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/ExpandedLicensing/listVersionAdded")
        value = obj.list_version_added
        graph.add((node, prop_node, Literal(value, datatype="http://www.w3.org/2001/XMLSchema#string")))
    if obj.deprecated_version is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/ExpandedLicensing/deprecatedVersion")
        value = obj.deprecated_version
        graph.add((node, prop_node, Literal(value, datatype="http://www.w3.org/2001/XMLSchema#string")))
    expanded_licensing.license_properties_to_rdf(node, obj, graph)


def with_addition_operator_to_rdf(obj, graph: Graph) -> Identifier:
    if '_spdx_id' in obj.__dict__:
        element_node = URIRef(obj.spdx_id)
    else:
        element_node = BNode()
    type_node = URIRef("https://spdx.org/rdf/v3/ExpandedLicensing/WithAdditionOperator")
    graph.add((element_node, RDF.type, type_node))
    with_addition_operator_properties_to_rdf(element_node, obj, graph)
    return element_node


def with_addition_operator_properties_to_rdf(node: Identifier, obj, graph: Graph):
    from .converter import model_to_rdf
    if obj.subject_license is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/ExpandedLicensing/subjectLicense")
        value = obj.subject_license
        graph.add((node, prop_node, model_to_rdf(value, graph)))
    if obj.subject_addition is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/ExpandedLicensing/subjectAddition")
        value = obj.subject_addition
        graph.add((node, prop_node, model_to_rdf(value, graph)))
    simple_licensing.any_license_info_properties_to_rdf(node, obj, graph)


def license_to_rdf(obj, graph: Graph) -> Identifier:
    if '_spdx_id' in obj.__dict__:
        element_node = URIRef(obj.spdx_id)
    else:
        element_node = BNode()
    type_node = URIRef("https://spdx.org/rdf/v3/ExpandedLicensing/License")
    graph.add((element_node, RDF.type, type_node))
    license_properties_to_rdf(element_node, obj, graph)
    return element_node


def license_properties_to_rdf(node: Identifier, obj, graph: Graph):
    from .converter import model_to_rdf
    if obj.license_text is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/SimpleLicensing/licenseText")
        value = obj.license_text
        graph.add((node, prop_node, Literal(value, datatype="http://www.w3.org/2001/XMLSchema#string")))
    if obj.is_osi_approved is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/ExpandedLicensing/isOsiApproved")
        value = obj.is_osi_approved
        graph.add((node, prop_node, Literal(value, datatype="http://www.w3.org/2001/XMLSchema#boolean")))
    if obj.is_fsf_libre is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/ExpandedLicensing/isFsfLibre")
        value = obj.is_fsf_libre
        graph.add((node, prop_node, Literal(value, datatype="http://www.w3.org/2001/XMLSchema#boolean")))
    if obj.standard_license_header is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/ExpandedLicensing/standardLicenseHeader")
        value = obj.standard_license_header
        graph.add((node, prop_node, Literal(value, datatype="http://www.w3.org/2001/XMLSchema#string")))
    if obj.standard_license_template is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/ExpandedLicensing/standardLicenseTemplate")
        value = obj.standard_license_template
        graph.add((node, prop_node, Literal(value, datatype="http://www.w3.org/2001/XMLSchema#string")))
    if obj.is_deprecated_license_id is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/ExpandedLicensing/isDeprecatedLicenseId")
        value = obj.is_deprecated_license_id
        graph.add((node, prop_node, Literal(value, datatype="http://www.w3.org/2001/XMLSchema#boolean")))
    if obj.obsoleted_by is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/ExpandedLicensing/obsoletedBy")
        value = obj.obsoleted_by
        graph.add((node, prop_node, Literal(value, datatype="http://www.w3.org/2001/XMLSchema#string")))
    expanded_licensing.extendable_license_properties_to_rdf(node, obj, graph)


def custom_license_addition_to_rdf(obj, graph: Graph) -> Identifier:
    if '_spdx_id' in obj.__dict__:
        element_node = URIRef(obj.spdx_id)
    else:
        element_node = BNode()
    type_node = URIRef("https://spdx.org/rdf/v3/ExpandedLicensing/CustomLicenseAddition")
    graph.add((element_node, RDF.type, type_node))
    custom_license_addition_properties_to_rdf(element_node, obj, graph)
    return element_node


def custom_license_addition_properties_to_rdf(node: Identifier, obj, graph: Graph):
    from .converter import model_to_rdf
    expanded_licensing.license_addition_properties_to_rdf(node, obj, graph)


def conjunctive_license_set_to_rdf(obj, graph: Graph) -> Identifier:
    if '_spdx_id' in obj.__dict__:
        element_node = URIRef(obj.spdx_id)
    else:
        element_node = BNode()
    type_node = URIRef("https://spdx.org/rdf/v3/ExpandedLicensing/ConjunctiveLicenseSet")
    graph.add((element_node, RDF.type, type_node))
    conjunctive_license_set_properties_to_rdf(element_node, obj, graph)
    return element_node


def conjunctive_license_set_properties_to_rdf(node: Identifier, obj, graph: Graph):
    from .converter import model_to_rdf
    for value in obj.member:
        prop_node = URIRef("https://spdx.org/rdf/v3/ExpandedLicensing/member")
        graph.add((node, prop_node, model_to_rdf(value, graph)))
    simple_licensing.any_license_info_properties_to_rdf(node, obj, graph)


def license_addition_to_rdf(obj, graph: Graph) -> Identifier:
    if '_spdx_id' in obj.__dict__:
        element_node = URIRef(obj.spdx_id)
    else:
        element_node = BNode()
    type_node = URIRef("https://spdx.org/rdf/v3/ExpandedLicensing/LicenseAddition")
    graph.add((element_node, RDF.type, type_node))
    license_addition_properties_to_rdf(element_node, obj, graph)
    return element_node


def license_addition_properties_to_rdf(node: Identifier, obj, graph: Graph):
    from .converter import model_to_rdf
    if obj.addition_text is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/ExpandedLicensing/additionText")
        value = obj.addition_text
        graph.add((node, prop_node, Literal(value, datatype="http://www.w3.org/2001/XMLSchema#string")))
    if obj.standard_addition_template is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/ExpandedLicensing/standardAdditionTemplate")
        value = obj.standard_addition_template
        graph.add((node, prop_node, Literal(value, datatype="http://www.w3.org/2001/XMLSchema#string")))
    if obj.is_deprecated_addition_id is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/ExpandedLicensing/isDeprecatedAdditionId")
        value = obj.is_deprecated_addition_id
        graph.add((node, prop_node, Literal(value, datatype="http://www.w3.org/2001/XMLSchema#boolean")))
    if obj.obsoleted_by is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/ExpandedLicensing/obsoletedBy")
        value = obj.obsoleted_by
        graph.add((node, prop_node, Literal(value, datatype="http://www.w3.org/2001/XMLSchema#string")))
    core.element_properties_to_rdf(node, obj, graph)


def or_later_operator_to_rdf(obj, graph: Graph) -> Identifier:
    if '_spdx_id' in obj.__dict__:
        element_node = URIRef(obj.spdx_id)
    else:
        element_node = BNode()
    type_node = URIRef("https://spdx.org/rdf/v3/ExpandedLicensing/OrLaterOperator")
    graph.add((element_node, RDF.type, type_node))
    or_later_operator_properties_to_rdf(element_node, obj, graph)
    return element_node


def or_later_operator_properties_to_rdf(node: Identifier, obj, graph: Graph):
    from .converter import model_to_rdf
    if obj.subject_license is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/ExpandedLicensing/subjectLicense")
        value = obj.subject_license
        graph.add((node, prop_node, model_to_rdf(value, graph)))
    expanded_licensing.extendable_license_properties_to_rdf(node, obj, graph)


def disjunctive_license_set_to_rdf(obj, graph: Graph) -> Identifier:
    if '_spdx_id' in obj.__dict__:
        element_node = URIRef(obj.spdx_id)
    else:
        element_node = BNode()
    type_node = URIRef("https://spdx.org/rdf/v3/ExpandedLicensing/DisjunctiveLicenseSet")
    graph.add((element_node, RDF.type, type_node))
    disjunctive_license_set_properties_to_rdf(element_node, obj, graph)
    return element_node


def disjunctive_license_set_properties_to_rdf(node: Identifier, obj, graph: Graph):
    from .converter import model_to_rdf
    for value in obj.member:
        prop_node = URIRef("https://spdx.org/rdf/v3/ExpandedLicensing/member")
        graph.add((node, prop_node, model_to_rdf(value, graph)))
    simple_licensing.any_license_info_properties_to_rdf(node, obj, graph)


def custom_license_to_rdf(obj, graph: Graph) -> Identifier:
    if '_spdx_id' in obj.__dict__:
        element_node = URIRef(obj.spdx_id)
    else:
        element_node = BNode()
    type_node = URIRef("https://spdx.org/rdf/v3/ExpandedLicensing/CustomLicense")
    graph.add((element_node, RDF.type, type_node))
    custom_license_properties_to_rdf(element_node, obj, graph)
    return element_node


def custom_license_properties_to_rdf(node: Identifier, obj, graph: Graph):
    from .converter import model_to_rdf
    expanded_licensing.license_properties_to_rdf(node, obj, graph)


def listed_license_exception_to_rdf(obj, graph: Graph) -> Identifier:
    if '_spdx_id' in obj.__dict__:
        element_node = URIRef(obj.spdx_id)
    else:
        element_node = BNode()
    type_node = URIRef("https://spdx.org/rdf/v3/ExpandedLicensing/ListedLicenseException")
    graph.add((element_node, RDF.type, type_node))
    listed_license_exception_properties_to_rdf(element_node, obj, graph)
    return element_node


def listed_license_exception_properties_to_rdf(node: Identifier, obj, graph: Graph):
    from .converter import model_to_rdf
    if obj.list_version_added is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/ExpandedLicensing/listVersionAdded")
        value = obj.list_version_added
        graph.add((node, prop_node, Literal(value, datatype="http://www.w3.org/2001/XMLSchema#string")))
    if obj.deprecated_version is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/ExpandedLicensing/deprecatedVersion")
        value = obj.deprecated_version
        graph.add((node, prop_node, Literal(value, datatype="http://www.w3.org/2001/XMLSchema#string")))
    expanded_licensing.license_addition_properties_to_rdf(node, obj, graph)


def extendable_license_to_rdf(obj, graph: Graph) -> Identifier:
    if '_spdx_id' in obj.__dict__:
        element_node = URIRef(obj.spdx_id)
    else:
        element_node = BNode()
    type_node = URIRef("https://spdx.org/rdf/v3/ExpandedLicensing/ExtendableLicense")
    graph.add((element_node, RDF.type, type_node))
    extendable_license_properties_to_rdf(element_node, obj, graph)
    return element_node


def extendable_license_properties_to_rdf(node: Identifier, obj, graph: Graph):
    from .converter import model_to_rdf
    licensing.any_license_info_properties_to_rdf(node, obj, graph)


# fmt: on
