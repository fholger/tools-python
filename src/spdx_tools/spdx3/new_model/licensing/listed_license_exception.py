# SPDX-License-Identifier: Apache-2.0
#
# This file was auto-generated by dev/gen_python_model_from_spec.py
# Do not manually edit!

from ..core import CreationInfo, ExternalIdentifier, ExternalReference, IntegrityMethod
from ..licensing import LicenseAddition
from beartype.typing import List, Optional
from spdx_tools.common.typing.type_checks import check_types_and_set_values

from spdx_tools.common.typing.dataclass_with_properties import dataclass_with_properties


@dataclass_with_properties
class ListedLicenseException(LicenseAddition):
    """
    A ListedLicenseException represents an exception to a License (in other words, an exception to a license condition
    or an additional permission beyond those granted in a License) which is listed on the SPDX Exceptions List at
    https://spdx.org/licenses/exceptions-index.html.
    """
    list_version_added: Optional[str] = None
    """
    A listVersionAdded for a ListedLicense or ListedLicenseException on the SPDX License List specifies which version
    release of the License List was the first one in which it was included.
    """
    deprecated_version: Optional[str] = None
    """
    A deprecatedVersion for a ListedLicense or ListedLicenseException on the SPDX License List specifies which version
    release of the License List was the first one in which it was marked as deprecated.
    """

    def __init__(
        self,
        spdx_id: str,
        creation_info: CreationInfo,
        addition_text: str,
        name: Optional[str] = None,
        summary: Optional[str] = None,
        description: Optional[str] = None,
        comment: Optional[str] = None,
        verified_using: List[IntegrityMethod] = None,
        external_reference: List[ExternalReference] = None,
        external_identifier: List[ExternalIdentifier] = None,
        extension: List[str] = None,
        standard_addition_template: Optional[str] = None,
        is_deprecated_addition_id: Optional[bool] = None,
        obsoleted_by: Optional[str] = None,
        list_version_added: Optional[str] = None,
        deprecated_version: Optional[str] = None,
    ):
        verified_using = [] if verified_using is None else verified_using
        external_reference = [] if external_reference is None else external_reference
        external_identifier = [] if external_identifier is None else external_identifier
        extension = [] if extension is None else extension
        check_types_and_set_values(self, locals())
