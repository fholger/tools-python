# SPDX-License-Identifier: Apache-2.0
#
# This file was auto-generated by dev/gen_python_model_from_spec.py
# Do not manually edit!

from ..core import Agent, CreationInfo, Element, ExternalIdentifier, ExternalReference, IntegrityMethod, RelationshipCompleteness, RelationshipType
from ..security import VexVulnAssessmentRelationship
from beartype.typing import List, Optional
from dataclasses import field
from datetime import datetime
from spdx_tools.common.typing.type_checks import check_types_and_set_values

from spdx_tools.common.typing.dataclass_with_properties import dataclass_with_properties


@dataclass_with_properties
class VexAffectedVulnAssessmentRelationship(VexVulnAssessmentRelationship):
    """
    VexAffectedVulnAssessmentRelationship connects a vulnerability and a number of elements. The relationship marks
    these elements as products affected by the vulnerability. This relationship corresponds to the VEX affected status.

    **Constraints**

    When linking elements using a VexAffectedVulnAssessmentRelationship, the following requirements must be observed:

    - Elements linked with a VulnVexAffectedAssessmentRelationship are constrained to the affects relationship type.

    **Syntax**

    ```json
    {
      "@type": "VexAffectedVulnAssessmentRelationship",
      "@id": "urn:spdx.dev:vex-affected-1",
      "relationshipType": "affects",
      "from": "urn:spdx.dev:vuln-cve-2020-28498",
      "to": ["urn:product-acme-application-1.3"],
      "assessedElement": "urn:npm-elliptic-6.5.2",
      "actionStatement": "Upgrade to version 1.4 of ACME application.",
      "suppliedBy": ["urn:spdx.dev:agent-jane-doe"],
      "publishedTime": "2021-03-09T11:04:53Z"
    }
    ```
    """
    action_statement: Optional[str] = None
    """
    When an element is referenced with a VexAffectedVulnAssessmentRelationship, the relationship MUST include one
    actionStatement that SHOULD describe actions to remediate or mitigate the vulnerability.
    """
    action_statement_time: List[datetime] = field(default_factory=list)
    """
    When a VEX statement communicates an affected status, the author MUST include an action statement with a recommended
    action to help mitigate the vulnerability's impact. The actionStatementTime property records the time when the
    action statement was first communicated.
    """

    def __init__(
        self,
        spdx_id: str,
        creation_info: CreationInfo,
        from_element: str,
        to: List[str],
        relationship_type: RelationshipType,
        name: Optional[str] = None,
        summary: Optional[str] = None,
        description: Optional[str] = None,
        comment: Optional[str] = None,
        verified_using: List[IntegrityMethod] = None,
        external_reference: List[ExternalReference] = None,
        external_identifier: List[ExternalIdentifier] = None,
        extension: List[str] = None,
        completeness: Optional[RelationshipCompleteness] = None,
        start_time: Optional[datetime] = None,
        end_time: Optional[datetime] = None,
        assessed_element: Optional[str] = None,
        published_time: Optional[datetime] = None,
        supplied_by: Optional[str] = None,
        modified_time: Optional[datetime] = None,
        withdrawn_time: Optional[datetime] = None,
        vex_version: Optional[str] = None,
        status_notes: Optional[str] = None,
        action_statement: Optional[str] = None,
        action_statement_time: List[datetime] = None,
    ):
        verified_using = [] if verified_using is None else verified_using
        external_reference = [] if external_reference is None else external_reference
        external_identifier = [] if external_identifier is None else external_identifier
        extension = [] if extension is None else extension
        action_statement_time = [] if action_statement_time is None else action_statement_time
        check_types_and_set_values(self, locals())
