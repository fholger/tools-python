# SPDX-License-Identifier: Apache-2.0
#
# This file was auto-generated by dev/gen_python_model_from_spec.py
# Do not manually edit!

from ..ai import PresenceType, SafetyRiskAssessmentType
from ..core import Agent, CreationInfo, ExternalIdentifier, ExternalReference, IntegrityMethod
from ..licensing import AnyLicenseInfo
from ..software import Package, SoftwarePurpose
from beartype.typing import Dict, List, Optional
from dataclasses import field
from datetime import datetime
from spdx_tools.common.typing.type_checks import check_types_and_set_values

from spdx_tools.common.typing.dataclass_with_properties import dataclass_with_properties


@dataclass_with_properties
class AIPackage(Package):
    """
    Metadata information that can be added to a package to describe an AI application or trained AI model. External
    property restriction on /Core/Artifact/suppliedBy: minCount: 1 External property restriction on
    /Software/Package/downloadLocation: minCount: 1 External property restriction on /Software/Package/packageVersion:
    minCount: 1 External property restriction on /Software/SoftwareArtifact/primaryPurpose: minCount: 1 External
    property restriction on /Core/Artifact/releaseTime: minCount: 1
    """
    energy_consumption: Optional[str] = None
    """
    EnergyConsumption captures the amount of energy needed to train and operate the AI model. This value is also known
    as training energy consumption or inference energy consumption.
    """
    standard_compliance: List[str] = field(default_factory=list)
    """
    StandardCompliance captures a standard that the AI software complies with. This includes both published and
    unpublished standards, for example ISO, IEEE, ETSI etc. The standard could (but not necessarily have to) be used to
    satisfy a legal or regulatory requirement.
    """
    limitation: Optional[str] = None
    """
    Limitation captures a limitation of the AI Package (or of the AI models present in the AI package), expressed as
    free form text. Note that this is not guaranteed to be exhaustive. For instance, a limitation might be that the AI
    package cannot be used on datasets from a certain demography.
    """
    type_of_model: List[str] = field(default_factory=list)
    """
    TypeOfModel records the type of the AI model(s) used in the software. For instance, if it is a supervised model,
    unsupervised model, reinforcement learning model or a combination of those.
    """
    information_about_training: Optional[str] = None
    """
    InformationAboutTraining describes the specific steps involved in the training of the AI model. For example, it can
    be specified whether supervised fine-tuning or active learning is used as part of training the model.
    """
    information_about_application: Optional[str] = None
    """
    InformationAboutApplication describes any relevant information in free form text about how the AI model is used
    inside the software, as well as any relevant pre-processing steps, third party APIs etc.
    """
    hyperparameter: Dict[str, Optional[str]] = field(default_factory=list)
    """
    This field records a hyperparameter value. Hyperparameters are parameters of the machine learning model that are
    used to control the learning process, for example the optimization and learning rate used during the training of the
    model.
    """
    model_data_preprocessing: List[str] = field(default_factory=list)
    """
    ModelDataPreprocessing is a free form text that describes the preprocessing steps applied to the training data
    before training of the model(s) contained in the AI software.
    """
    model_explainability: List[str] = field(default_factory=list)
    """
    ModelExplainability is a free form text that lists the different explainability mechanisms (such as SHAP, or other
    model specific explainability mechanisms) that can be used to explain the model.
    """
    sensitive_personal_information: Optional[PresenceType] = None
    """
    SensitivePersonalInformation notes if sensitive personal information is used in the training or inference of the AI
    models. This might include biometric data, addresses or other data that can be used to infer a person's identity.
    """
    metric_decision_threshold: Dict[str, Optional[str]] = field(default_factory=list)
    """
    Each metric might be computed based on a decision threshold. For instance, precision or recall is typically computed
    by checking if the probability of the outcome is larger than 0.5. Each decision threshold should match with a metric
    field defined in the AI Package.
    """
    metric: Dict[str, Optional[str]] = field(default_factory=list)
    """
    Metric records the measurement with which the AI model was evaluated. This makes statements about the prediction
    quality including uncertainty, accuracy, characteristics of the tested population, quality, fairness,
    explainability, robustness etc.
    """
    domain: List[str] = field(default_factory=list)
    """
    Domain describes the domain in which the AI model contained in the AI software can be expected to operate
    successfully. Examples include computer vision, natural language etc.
    """
    autonomy_type: Optional[PresenceType] = None
    """
    AutonomyType indicates if a human is involved in any of the decisions of the AI software or if that software is
    fully automatic.
    """
    safety_risk_assessment: Optional[SafetyRiskAssessmentType] = None
    """
    SafetyRiskAssessment categorizes the safety risk impact of the AI software in accordance with Article 20 of [EC
    Regulation No 765/2008](https://ec.europa.eu/docsroom/documents/17107/attachments/1/translations/en/renditions/pdf).
    """

    def __init__(
        self,
        spdx_id: str,
        name: str,
        creation_info: CreationInfo,
        supplied_by: List[str],
        release_time: datetime,
        primary_purpose: SoftwarePurpose,
        package_version: str,
        download_location: str,
        summary: Optional[str] = None,
        description: Optional[str] = None,
        comment: Optional[str] = None,
        verified_using: List[IntegrityMethod] = None,
        external_reference: List[ExternalReference] = None,
        external_identifier: List[ExternalIdentifier] = None,
        extension: List[str] = None,
        originated_by: List[str] = None,
        built_time: Optional[datetime] = None,
        valid_until_time: Optional[datetime] = None,
        standard: List[str] = None,
        content_identifier: Optional[str] = None,
        additional_purpose: List[SoftwarePurpose] = None,
        concluded_license: Optional[AnyLicenseInfo] = None,
        declared_license: Optional[AnyLicenseInfo] = None,
        copyright_text: Optional[str] = None,
        attribution_text: Optional[str] = None,
        package_url: Optional[str] = None,
        homepage: Optional[str] = None,
        source_info: Optional[str] = None,
        energy_consumption: Optional[str] = None,
        standard_compliance: List[str] = None,
        limitation: Optional[str] = None,
        type_of_model: List[str] = None,
        information_about_training: Optional[str] = None,
        information_about_application: Optional[str] = None,
        hyperparameter: Dict[str, Optional[str]] = None,
        model_data_preprocessing: List[str] = None,
        model_explainability: List[str] = None,
        sensitive_personal_information: Optional[PresenceType] = None,
        metric_decision_threshold: Dict[str, Optional[str]] = None,
        metric: Dict[str, Optional[str]] = None,
        domain: List[str] = None,
        autonomy_type: Optional[PresenceType] = None,
        safety_risk_assessment: Optional[SafetyRiskAssessmentType] = None,
    ):
        verified_using = [] if verified_using is None else verified_using
        external_reference = [] if external_reference is None else external_reference
        external_identifier = [] if external_identifier is None else external_identifier
        extension = [] if extension is None else extension
        originated_by = [] if originated_by is None else originated_by
        standard = [] if standard is None else standard
        additional_purpose = [] if additional_purpose is None else additional_purpose
        standard_compliance = [] if standard_compliance is None else standard_compliance
        type_of_model = [] if type_of_model is None else type_of_model
        hyperparameter = {} if hyperparameter is None else hyperparameter
        model_data_preprocessing = [] if model_data_preprocessing is None else model_data_preprocessing
        model_explainability = [] if model_explainability is None else model_explainability
        metric_decision_threshold = {} if metric_decision_threshold is None else metric_decision_threshold
        metric = {} if metric is None else metric
        domain = [] if domain is None else domain
        check_types_and_set_values(self, locals())
