# SPDX-License-Identifier: Apache-2.0
#
# This file was auto-generated by dev/gen_model_to_rdf.py
# Do not manually edit!
# flake8: noqa
# isort:skip_file

# fmt: off

from rdflib import Graph, URIRef, RDF, Literal, BNode
from rdflib.term import Identifier
from spdx_tools.spdx.casing_tools import snake_case_to_camel_case
from . import expanded_license, core, dataset, licensing, ai, security, build, software


def a_ipackage_to_rdf(obj, graph: Graph) -> Identifier:
    if '_spdx_id' in obj.__dict__:
        element_node = URIRef(obj.spdx_id)
    else:
        element_node = BNode()
    type_node = URIRef("https://spdx.org/rdf/v3/AI/AIPackage")
    graph.add((element_node, RDF.type, type_node))
    a_ipackage_properties_to_rdf(element_node, obj, graph)
    return element_node


def a_ipackage_properties_to_rdf(node: Identifier, obj, graph: Graph):
    from .converter import model_to_rdf
    if obj.energy_consumption is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/AI/energyConsumption")
        value = obj.energy_consumption
        graph.add((node, prop_node, Literal(value, datatype="http://www.w3.org/2001/XMLSchema#string")))
    for value in obj.standard_compliance:
        prop_node = URIRef("https://spdx.org/rdf/v3/AI/standardCompliance")
        graph.add((node, prop_node, Literal(value, datatype="http://www.w3.org/2001/XMLSchema#string")))
    if obj.limitation is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/AI/limitation")
        value = obj.limitation
        graph.add((node, prop_node, Literal(value, datatype="http://www.w3.org/2001/XMLSchema#string")))
    for value in obj.type_of_model:
        prop_node = URIRef("https://spdx.org/rdf/v3/AI/typeOfModel")
        graph.add((node, prop_node, Literal(value, datatype="http://www.w3.org/2001/XMLSchema#string")))
    if obj.information_about_training is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/AI/informationAboutTraining")
        value = obj.information_about_training
        graph.add((node, prop_node, Literal(value, datatype="http://www.w3.org/2001/XMLSchema#string")))
    if obj.information_about_application is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/AI/informationAboutApplication")
        value = obj.information_about_application
        graph.add((node, prop_node, Literal(value, datatype="http://www.w3.org/2001/XMLSchema#string")))
    for value in obj.hyperparameter:
        prop_node = URIRef("https://spdx.org/rdf/v3/AI/hyperparameter")
        graph.add((node, prop_node, model_to_rdf(value, graph)))
    for value in obj.model_data_preprocessing:
        prop_node = URIRef("https://spdx.org/rdf/v3/AI/modelDataPreprocessing")
        graph.add((node, prop_node, Literal(value, datatype="http://www.w3.org/2001/XMLSchema#string")))
    for value in obj.model_explainability:
        prop_node = URIRef("https://spdx.org/rdf/v3/AI/modelExplainability")
        graph.add((node, prop_node, Literal(value, datatype="http://www.w3.org/2001/XMLSchema#string")))
    if obj.sensitive_personal_information is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/AI/sensitivePersonalInformation")
        value = obj.sensitive_personal_information
        graph.add((node, prop_node, model_to_rdf(value, graph)))
    for value in obj.metric_decision_threshold:
        prop_node = URIRef("https://spdx.org/rdf/v3/AI/metricDecisionThreshold")
        graph.add((node, prop_node, model_to_rdf(value, graph)))
    for value in obj.metric:
        prop_node = URIRef("https://spdx.org/rdf/v3/AI/metric")
        graph.add((node, prop_node, model_to_rdf(value, graph)))
    for value in obj.domain:
        prop_node = URIRef("https://spdx.org/rdf/v3/AI/domain")
        graph.add((node, prop_node, Literal(value, datatype="http://www.w3.org/2001/XMLSchema#string")))
    if obj.autonomy_type is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/AI/autonomyType")
        value = obj.autonomy_type
        graph.add((node, prop_node, model_to_rdf(value, graph)))
    if obj.safety_risk_assessment is not None:
        prop_node = URIRef("https://spdx.org/rdf/v3/AI/safetyRiskAssessment")
        value = obj.safety_risk_assessment
        graph.add((node, prop_node, model_to_rdf(value, graph)))
    software.package_properties_to_rdf(node, obj, graph)


def safety_risk_assessment_type_to_rdf(obj, graph: Graph) -> Identifier:
    from .converter import enum_value_to_str
    name = enum_value_to_str(obj)
    return URIRef("https://spdx.org/rdf/v3/AI/SafetyRiskAssessmentType/" + name)


def presence_type_to_rdf(obj, graph: Graph) -> Identifier:
    from .converter import enum_value_to_str
    name = enum_value_to_str(obj)
    return URIRef("https://spdx.org/rdf/v3/AI/PresenceType/" + name)


# fmt: on
