# SPDX-License-Identifier: Apache-2.0
#
# This file was auto-generated by dev/gen_python_model_from_spec.py
# Do not manually edit!
# flake8: noqa

from datetime import datetime

from beartype.typing import List, Optional

from spdx_tools.common.typing.dataclass_with_properties import dataclass_with_properties
from spdx_tools.common.typing.type_checks import check_types_and_set_values

from ..core import CreationInfo, ExternalIdentifier, ExternalReference, IntegrityMethod
from ..licensing import AnyLicenseInfo
from ..software import SoftwareArtifact, SoftwarePurpose


@dataclass_with_properties
class File(SoftwareArtifact):
    """
    Refers to any object that stores content on a computer. The type of content can optionally be provided in the
    contentType property. External property restriction on /Core/Element/name: minCount: 1
    """

    content_type: Optional[str] = None
    """
    This field is a reasonable estimation of the content type of the Element, from a creator perspective. Content type
    is intrinsic to the Element, independent of how the Element is being used.
    """

    def __init__(
        self,
        spdx_id: str,
        name: str,
        creation_info: CreationInfo,
        summary: Optional[str] = None,
        description: Optional[str] = None,
        comment: Optional[str] = None,
        verified_using: List[IntegrityMethod] = None,
        external_reference: List[ExternalReference] = None,
        external_identifier: List[ExternalIdentifier] = None,
        extension: List[str] = None,
        originated_by: List[str] = None,
        supplied_by: List[str] = None,
        built_time: Optional[datetime] = None,
        release_time: Optional[datetime] = None,
        valid_until_time: Optional[datetime] = None,
        standard: List[str] = None,
        content_identifier: Optional[str] = None,
        primary_purpose: Optional[SoftwarePurpose] = None,
        additional_purpose: List[SoftwarePurpose] = None,
        concluded_license: Optional[AnyLicenseInfo] = None,
        declared_license: Optional[AnyLicenseInfo] = None,
        copyright_text: Optional[str] = None,
        attribution_text: Optional[str] = None,
        content_type: Optional[str] = None,
    ):
        verified_using = [] if verified_using is None else verified_using
        external_reference = [] if external_reference is None else external_reference
        external_identifier = [] if external_identifier is None else external_identifier
        extension = [] if extension is None else extension
        originated_by = [] if originated_by is None else originated_by
        supplied_by = [] if supplied_by is None else supplied_by
        standard = [] if standard is None else standard
        additional_purpose = [] if additional_purpose is None else additional_purpose
        check_types_and_set_values(self, locals())
