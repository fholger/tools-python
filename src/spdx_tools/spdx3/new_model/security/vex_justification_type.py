# SPDX-License-Identifier: Apache-2.0
#
# This file was auto-generated by dev/gen_python_model_from_spec.py
# Do not manually edit!

from beartype.typing import Optional
from enum import Enum, auto


class VexJustificationType(Enum):
    """
    VexJustificationType specifies the type of Vulnerability Exploitability eXchange (VEX) justification.
    """

    COMPONENT_NOT_PRESENT = auto()
    """
    The software is not affected because the vulnerable component is not in the product.
    """
    VULNERABLE_CODE_NOT_PRESENT = auto()
    """
    The product is not affected because the code underlying the vulnerability is not present in the product.
    """
    VULNERABLE_CODE_CANNOT_BE_CONTROLLED_BY_ADVERSARY = auto()
    """
    The vulnerable component is present, and the component contains the vulnerable code. However, vulnerable code is
    used in such a way that an attacker cannot mount any anticipated attack.
    """
    VULNERABLE_CODE_NOT_IN_EXECUTE_PATH = auto()
    """
    The affected code is not reachable through the execution of the code, including non-anticipated states of the
    product.
    """
    INLINE_MITIGATIONS_ALREADY_EXIST = auto()
    """
    Built-in inline controls or mitigations prevent an adversary from leveraging the vulnerability.
    """

    def __str__(self) -> str:
        if self == VexJustificationType.COMPONENT_NOT_PRESENT:
            return "componentNotPresent"
        if self == VexJustificationType.VULNERABLE_CODE_NOT_PRESENT:
            return "vulnerableCodeNotPresent"
        if self == VexJustificationType.VULNERABLE_CODE_CANNOT_BE_CONTROLLED_BY_ADVERSARY:
            return "vulnerableCodeCannotBeControlledByAdversary"
        if self == VexJustificationType.VULNERABLE_CODE_NOT_IN_EXECUTE_PATH:
            return "vulnerableCodeNotInExecutePath"
        if self == VexJustificationType.INLINE_MITIGATIONS_ALREADY_EXIST:
            return "inlineMitigationsAlreadyExist"
        return "unknown"

    @staticmethod
    def from_str(value: str) -> Optional['VexJustificationType']:
        if value == "componentNotPresent":
            return VexJustificationType.COMPONENT_NOT_PRESENT
        if value == "vulnerableCodeNotPresent":
            return VexJustificationType.VULNERABLE_CODE_NOT_PRESENT
        if value == "vulnerableCodeCannotBeControlledByAdversary":
            return VexJustificationType.VULNERABLE_CODE_CANNOT_BE_CONTROLLED_BY_ADVERSARY
        if value == "vulnerableCodeNotInExecutePath":
            return VexJustificationType.VULNERABLE_CODE_NOT_IN_EXECUTE_PATH
        if value == "inlineMitigationsAlreadyExist":
            return VexJustificationType.INLINE_MITIGATIONS_ALREADY_EXIST
        return None
