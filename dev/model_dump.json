{
  "ExpandedLicense": {
    "name": "ExpandedLicense",
    "classes": {
      "ConjunctiveLicenseSet": {
        "summary": "Portion of an AnyLicenseInfo representing a set of licensing information\nwhere all elements apply.",
        "description": "A ConjunctiveLicenseSet indicates that _each_ of its subsidiary\nAnyLicenseInfos apply. In other words, a ConjunctiveLicenseSet of two or\nmore licenses represents a licensing situation where _all_ of the specified\nlicenses are to be complied with. It is represented in the SPDX License\nExpression Syntax by the `AND` operator.\n\nIt is syntactically correct to specify a ConjunctiveLicenseSet where the\nsubsidiary AnyLicenseInfos may be \"incompatible\" according to a particular\ninterpretation of the corresponding Licenses. The SPDX License Expression\nSyntax does not take into account interpretation of license texts, which is\nleft to the consumer of SPDX data to determine for themselves.",
        "metadata": {
          "name": "ConjunctiveLicenseSet",
          "SubclassOf": "Licensing/AnyLicenseInfo",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/ExpandedLicense/ConjunctiveLicenseSet"
        },
        "properties": {
          "member": {
            "type": "Licensing/AnyLicenseInfo",
            "minCount": "2",
            "maxCount": "*"
          }
        },
        "externalPropertyRestrictions": {}
      },
      "DisjunctiveLicenseSet": {
        "summary": "Portion of an AnyLicenseInfo representing a set of licensing information\nwhere only any one of the elements applies.",
        "description": "A DisjunctiveLicenseSet indicates that _only one_ of its subsidiary\nAnyLicenseInfos is required to apply. In other words, a\nDisjunctiveLicenseSet of two or more licenses represents a licensing\nsituation where _only one_ of the specified licenses are to be complied with.\nA consumer of SPDX data would typically understand this to permit the recipient\nof the licensed content to choose which of the corresponding license they\nwould prefer to use. It is represented in the SPDX License Expression Syntax\nby the `OR` operator.",
        "metadata": {
          "name": "DisjunctiveLicenseSet",
          "SubclassOf": "Licensing/AnyLicenseInfo",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/ExpandedLicense/DisjunctiveLicenseSet"
        },
        "properties": {
          "member": {
            "type": "Licensing/AnyLicenseInfo",
            "minCount": "2",
            "maxCount": "*"
          }
        },
        "externalPropertyRestrictions": {}
      },
      "ExtendableLicense": {
        "summary": "Abstract class representing a License or an OrLaterOperator.",
        "description": "The WithAdditionOperator can have a License or an OrLaterOperator as the license property value.  This class is used for the value.",
        "metadata": {
          "name": "ExtendableLicense",
          "SubclassOf": "Licensing/AnyLicenseInfo",
          "Instantiability": "Abstract",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/ExpandedLicense/ExtendableLicense"
        },
        "properties": {},
        "externalPropertyRestrictions": {}
      }
    },
    "properties": {
      "subjectLicense": {
        "summary": "A License participating in a 'with addition' or 'or later' model.",
        "description": "A subjectLicense is a License which is subject to either an 'or later' effect\n(OrLaterOperator) or a 'with additional text' effect (WithAdditionOperator).",
        "metadata": {
          "name": "subjectLicense",
          "Nature": "ObjectProperty",
          "Range": "Licensing/License",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/ExpandedLicense/subjectLicense"
        }
      },
      "subjectAddition": {
        "summary": "A LicenseAddition participating in a 'with addition' model.",
        "description": "A subjectAddition is a LicenseAddition which is subject to a 'with additional\ntext' effect (WithAdditionOperator).",
        "metadata": {
          "name": "subjectAddition",
          "Nature": "ObjectProperty",
          "Range": "LicenseAddition",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/ExpandedLicense/subjectAddition"
        }
      },
      "member": {
        "summary": "A license expression participating in a license set.",
        "description": "A member is a license expression participating in a conjuctive (of type\nConjunctiveLicenseSet) or a disjunctive (of type DisjunctiveLicenseSet)\nlicense set.",
        "metadata": {
          "name": "member",
          "Nature": "ObjectProperty",
          "Range": "Licensing/AnyLicenseInfo",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/ExpandedLicense/member",
          "Domain": [
            "ConjunctiveLicenseSet",
            "DisjunctiveLicenseSet"
          ]
        }
      }
    },
    "vocabs": {}
  },
  "Core": {
    "name": "Core",
    "classes": {
      "PositiveIntegerRange": {
        "summary": "A tuple of two positive integers that define a range.",
        "description": "PositiveIntegerRange is a tuple of two positive integers that define a range.\n\"begin\" must be less than or equal to \"end\".",
        "metadata": {
          "name": "PositiveIntegerRange",
          "SubclassOf": "none",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Core/PositiveIntegerRange"
        },
        "properties": {
          "begin": {
            "type": "xsd:positiveInteger",
            "minCount": "1",
            "maxCount": "1"
          },
          "end": {
            "type": "xsd:positiveInteger",
            "minCount": "1",
            "maxCount": "1"
          }
        },
        "externalPropertyRestrictions": {}
      },
      "ElementCollection": {
        "summary": "A collection of Elements, not necessarily with unifying context.",
        "description": "An SpdxCollection is a collection of Elements, not necessarily with unifying context.",
        "metadata": {
          "name": "ElementCollection",
          "SubclassOf": "Element",
          "Instantiability": "Abstract",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Core/ElementCollection"
        },
        "properties": {
          "element": {
            "type": "Element",
            "minCount": "1",
            "maxCount": "*"
          },
          "rootElement": {
            "type": "Element",
            "minCount": "1",
            "maxCount": "*"
          },
          "imports": {
            "type": "ExternalMap",
            "minCount": "0",
            "maxCount": "*"
          }
        },
        "externalPropertyRestrictions": {}
      },
      "ExternalReference": {
        "summary": "A reference to a resource outside the scope of SPDX-3.0 content.",
        "description": "An External Reference points to a resource outside the scope of the SPDX-3.0 content\nthat provides additional characteristics of an Element.",
        "metadata": {
          "name": "ExternalReference",
          "SubclassOf": "none",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Core/ExternalReference"
        },
        "properties": {
          "externalReferenceType": {
            "type": "ExternalReferenceType",
            "maxCount": "1",
            "minCount": "0"
          },
          "locator": {
            "type": "xsd:anyURI",
            "minCount": "0",
            "maxCount": "*"
          },
          "contentType": {
            "type": "MediaType",
            "maxCount": "1",
            "minCount": "0"
          },
          "comment": {
            "type": "xsd:string",
            "maxCount": "1",
            "minCount": "0"
          }
        },
        "externalPropertyRestrictions": {}
      },
      "ExternalIdentifier": {
        "summary": "A reference to a resource outside the scope of SPDX-3.0 content that uniquely identifies an Element.",
        "description": "An ExternalIdentifier is a reference to a resource outside the scope of SPDX-3.0 content\nthat uniquely identifies an Element.",
        "metadata": {
          "name": "ExternalIdentifier",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Core/ExternalIdentifier"
        },
        "properties": {
          "externalIdentifierType": {
            "type": "ExternalIdentifierType",
            "minCount": "1",
            "maxCount": "1"
          },
          "identifier": {
            "type": "xsd:string",
            "minCount": "1",
            "maxCount": "1"
          },
          "comment": {
            "type": "xsd:string",
            "minCount": "0",
            "maxCount": "1"
          },
          "identifierLocator": {
            "type": "xsd:anyURI",
            "minCount": "0",
            "maxCount": "*"
          },
          "issuingAuthority": {
            "type": "xsd:anyURI",
            "minCount": "0",
            "maxCount": "1"
          }
        },
        "externalPropertyRestrictions": {}
      },
      "Bom": {
        "summary": "A container for a grouping of SPDX-3.0 content characterizing details\n(provenence, composition, licensing, etc.) about a product.",
        "description": "A Bill Of Materials (BOM) is a container for a grouping of SPDX-3.0 content\ncharacterizing details about a product.\nThis could include details of the content and composition of the product,\nprovenence details of the product and/or\nits composition, licensing information, known quality or security issues, etc.",
        "metadata": {
          "name": "Bom",
          "SubclassOf": "Bundle",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Core/Bom"
        },
        "properties": {},
        "externalPropertyRestrictions": {}
      },
      "SpdxDocument": {
        "summary": "Assembles a collection of Elements under a common string, the name of the document.",
        "description": "An SpdxDocument assembles a collection of Elements under a common string, the name of the document.\nCommonly used when representing a unit of transfer of SPDX Elements.\nExternal property restriction on /Core/Element/name: minCount: 1",
        "metadata": {
          "name": "SpdxDocument",
          "SubclassOf": "Bundle",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Core/SpdxDocument"
        },
        "properties": {
          "name": {
            "type": "xsd:string",
            "minCount": "1",
            "maxCount": "1"
          }
        },
        "externalPropertyRestrictions": {
          "/Core/Element/name": {
            "minCount": "1",
            "maxCount": "*"
          }
        }
      },
      "Tool": {
        "summary": "An element of hardware and/or software utilized to carry out a particular function.",
        "description": "A Tool is an element of hardware and/or software utilized to carry out a particular function.",
        "metadata": {
          "name": "Tool",
          "SubclassOf": "Element",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Core/Tool"
        },
        "properties": {},
        "externalPropertyRestrictions": {}
      },
      "CreationInfo": {
        "summary": "Provides information about the creation of the Element.",
        "description": "The CreationInfo provides information about who created the Element, and when and how it was created. \n\nThe dateTime created is often the date of last change (e.g., a git commit date), not the date when the SPDX data was created, as doing so supports reproducible builds.",
        "metadata": {
          "name": "CreationInfo",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Core/CreationInfo"
        },
        "properties": {
          "specVersion": {
            "type": "SemVer",
            "minCount": "1",
            "maxCount": "1"
          },
          "comment": {
            "type": "xsd:string",
            "minCount": "0",
            "maxCount": "1"
          },
          "created": {
            "type": "DateTime",
            "maxCount": "1",
            "minCount": "0"
          },
          "createdBy": {
            "type": "Agent",
            "minCount": "1",
            "maxCount": "*"
          },
          "createdUsing": {
            "type": "Tool",
            "minCount": "0",
            "maxCount": "*"
          },
          "profile": {
            "type": "ProfileIdentifierType",
            "minCount": "1",
            "maxCount": "*"
          },
          "dataLicense": {
            "type": "xsd:string",
            "maxCount": "1",
            "minCount": "0"
          }
        },
        "externalPropertyRestrictions": {}
      },
      "Organization": {
        "summary": "A group of people who work together in an organized way for a shared purpose.",
        "description": "An Organization is a group of people who work together in an organized way for a shared purpose.",
        "metadata": {
          "name": "Organization",
          "SubclassOf": "Agent",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Core/Organization"
        },
        "properties": {},
        "externalPropertyRestrictions": {}
      },
      "LifecycleScopedRelationship": {
        "summary": "",
        "description": "TODO",
        "metadata": {
          "name": "LifecycleScopedRelationship",
          "SubclassOf": "Relationship",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Core/LifecycleScopedRelationship"
        },
        "properties": {
          "scope": {
            "type": "LifecycleScopeType",
            "minCount": "0",
            "maxCount": "1"
          }
        },
        "externalPropertyRestrictions": {}
      },
      "SoftwareAgent": {
        "summary": "A software agent.",
        "description": "A SoftwareAgent is a software program that is given the authority (similar to a user's authority) to act on a system.",
        "metadata": {
          "name": "SoftwareAgent",
          "SubclassOf": "Agent",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Core/SoftwareAgent"
        },
        "properties": {},
        "externalPropertyRestrictions": {}
      },
      "IntegrityMethod": {
        "summary": "Provides an independently reproducible mechanism that permits verification of a specific Element.",
        "description": "An IntegrityMethod provides an independently reproducible mechanism that permits verification\nof a specific Element that correlates to the data in this SPDX document. This identifier enables\na recipient to determine if anything in the original Element has been changed and eliminates\nconfusion over which version or modification of a specific Element is referenced.",
        "metadata": {
          "name": "IntegrityMethod",
          "Instantiability": "Abstract",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Core/IntegrityMethod"
        },
        "properties": {
          "comment": {
            "type": "xsd:string",
            "maxCount": "1",
            "minCount": "0"
          }
        },
        "externalPropertyRestrictions": {}
      },
      "Relationship": {
        "summary": "Describes a relationship between one or more elements.",
        "description": "A Relationship is a grouping of characteristics unique to an assertion\nthat one Element is related to one or more other Elements in some way.",
        "metadata": {
          "name": "Relationship",
          "SubclassOf": "Element",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Core/Relationship"
        },
        "properties": {
          "from": {
            "type": "Element",
            "minCount": "1",
            "maxCount": "1"
          },
          "to": {
            "type": "Element",
            "minCount": "0",
            "maxCount": "*"
          },
          "relationshipType": {
            "type": "RelationshipType",
            "minCount": "1",
            "maxCount": "1"
          },
          "completeness": {
            "type": "RelationshipCompleteness",
            "minCount": "0",
            "maxCount": "1"
          },
          "startTime": {
            "type": "DateTime",
            "minCount": "0",
            "maxCount": "1"
          },
          "endTime": {
            "type": "DateTime",
            "minCount": "0",
            "maxCount": "1"
          }
        },
        "externalPropertyRestrictions": {}
      },
      "Element": {
        "summary": "Base domain class from which all other SPDX-3.0 domain classes derive.",
        "description": "An Element is a representation of a fundamental concept either directly inherent\nto the Bill of Materials (BOM) domain or indirectly related to the BOM domain\nand necessary for contextually characterizing BOM concepts and relationships.\nWithin SPDX-3.0 structure this is the base class acting as a consistent,\nunifying, and interoperable foundation for all explicit\nand inter-relatable content objects.",
        "metadata": {
          "name": "Element",
          "SubclassOf": "none",
          "Instantiability": "Abstract",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Core/Element"
        },
        "properties": {
          "spdxId": {
            "type": "xsd:anyURI",
            "minCount": "1",
            "maxCount": "1"
          },
          "name": {
            "type": "xsd:string",
            "maxCount": "1",
            "minCount": "0"
          },
          "summary": {
            "type": "xsd:string",
            "maxCount": "1",
            "minCount": "0"
          },
          "description": {
            "type": "xsd:string",
            "maxCount": "1",
            "minCount": "0"
          },
          "comment": {
            "type": "xsd:string",
            "maxCount": "1",
            "minCount": "0"
          },
          "creationInfo": {
            "type": "CreationInfo",
            "minCount": "1",
            "maxCount": "1"
          },
          "verifiedUsing": {
            "type": "IntegrityMethod",
            "minCount": "0",
            "maxCount": "*"
          },
          "externalReference": {
            "type": "ExternalReference",
            "minCount": "0",
            "maxCount": "*"
          },
          "externalIdentifier": {
            "type": "ExternalIdentifier",
            "minCount": "0",
            "maxCount": "*"
          },
          "extension": {
            "type": "Extension",
            "minCount": "0",
            "maxCount": "*"
          }
        },
        "externalPropertyRestrictions": {}
      },
      "Agent": {
        "summary": "Agent represents anything with the potential to act on a system.",
        "description": "The Agent class represents anything that has the potential to act on a system. This could be a person, organization, software agent, etc. This is not to be confused with tools that are used to perform tasks.",
        "metadata": {
          "name": "Agent",
          "SubclassOf": "Element",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Core/Agent"
        },
        "properties": {},
        "externalPropertyRestrictions": {}
      },
      "Hash": {
        "summary": "A mathematically calculated representation of a grouping of data.",
        "description": "A hash is a grouping of characteristics unique to the result\nof applying a mathematical algorithm\nthat maps data of arbitrary size to a bit string (the hash)\nand is a one-way function, that is,\na function which is practically infeasible to invert.\nThis is commonly used for integrity checking of data.",
        "metadata": {
          "name": "Hash",
          "SubclassOf": "IntegrityMethod",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Core/Hash"
        },
        "properties": {
          "algorithm": {
            "type": "HashAlgorithm",
            "minCount": "1",
            "maxCount": "1"
          },
          "hashValue": {
            "type": "xsd:string",
            "minCount": "1",
            "maxCount": "1"
          }
        },
        "externalPropertyRestrictions": {}
      },
      "DictionaryEntry": {
        "summary": "A key with an associated value.",
        "description": "The class used for implementing a generic string mapping (also known as associative array, dictionary, or hash map) in SPDX.  Each DictionaryEntry contains a key-value pair which maps the key to its associated value.  To implement a dictionary, this class is to be used in a collection with unique keys.",
        "metadata": {
          "name": "DictionaryEntry",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Core/DictionaryEntry"
        },
        "properties": {
          "key": {
            "type": "xsd:string",
            "minCount": "1",
            "maxCount": "1"
          },
          "value": {
            "type": "xsd:string",
            "maxCount": "1",
            "minCount": "0"
          }
        },
        "externalPropertyRestrictions": {}
      },
      "Person": {
        "summary": "An individual human being.",
        "description": "A Person is an individual human being.",
        "metadata": {
          "name": "Person",
          "SubclassOf": "Agent",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Core/Person"
        },
        "properties": {},
        "externalPropertyRestrictions": {}
      },
      "Bundle": {
        "summary": "A collection of Elements that have a shared context.",
        "description": "A bundle is a collection of Elements that have a shared context.",
        "metadata": {
          "name": "Bundle",
          "SubclassOf": "ElementCollection",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Core/Bundle"
        },
        "properties": {
          "context": {
            "type": "xsd:string",
            "maxCount": "1",
            "minCount": "0"
          }
        },
        "externalPropertyRestrictions": {}
      },
      "Artifact": {
        "summary": "A distinct article or unit within the digital domain.",
        "description": "An artifact is a distinct article or unit within the digital domain,\nsuch as an electronic file, a software package, a device or an element of data.",
        "metadata": {
          "name": "Artifact",
          "SubclassOf": "Element",
          "Instantiability": "Abstract",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Core/Artifact"
        },
        "properties": {
          "originatedBy": {
            "type": "Agent",
            "minCount": "0",
            "maxCount": "*"
          },
          "suppliedBy": {
            "type": "Agent",
            "minCount": "0",
            "maxCount": "*"
          },
          "builtTime": {
            "type": "DateTime",
            "minCount": "0",
            "maxCount": "1"
          },
          "releaseTime": {
            "type": "DateTime",
            "minCount": "0",
            "maxCount": "1"
          },
          "validUntilTime": {
            "type": "DateTime",
            "minCount": "0",
            "maxCount": "1"
          },
          "standard": {
            "type": "xsd:string",
            "minCount": "0",
            "maxCount": "*"
          }
        },
        "externalPropertyRestrictions": {}
      },
      "Annotation": {
        "summary": "An assertion made in relation to one or more elements.",
        "description": "An Annotation is an assertion made in relation to one or more elements.",
        "metadata": {
          "name": "Annotation",
          "SubclassOf": "Element",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Core/Annotation"
        },
        "properties": {
          "annotationType": {
            "type": "AnnotationType",
            "minCount": "1",
            "maxCount": "1"
          },
          "contentType": {
            "type": "MediaType",
            "minCount": "0",
            "maxCount": "*"
          },
          "statement": {
            "type": "xsd:string",
            "minCount": "0",
            "maxCount": "1"
          },
          "subject": {
            "type": "Element",
            "minCount": "1",
            "maxCount": "1"
          }
        },
        "externalPropertyRestrictions": {}
      },
      "ExternalMap": {
        "summary": "A map of Element identifiers that are used within a Document but defined external to that Document.",
        "description": "An External Map is a map of Element identifiers that are used within a Document\nbut defined external to that Document.\nThe external map provides details about the externally-defined Element\nsuch as its provenance, where to retrieve it, and how to verify its integrity.",
        "metadata": {
          "name": "ExternalMap",
          "SubclassOf": "none",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Core/ExternalMap"
        },
        "properties": {
          "externalId": {
            "type": "xsd:anyURI",
            "minCount": "1",
            "maxCount": "1"
          },
          "verifiedUsing": {
            "type": "IntegrityMethod",
            "minCount": "0",
            "maxCount": "*"
          },
          "locationHint": {
            "type": "xsd:anyURI",
            "maxCount": "1",
            "minCount": "0"
          },
          "definingDocument": {
            "type": "xsd:anyURI",
            "maxCount": "1",
            "minCount": "0"
          }
        },
        "externalPropertyRestrictions": {}
      }
    },
    "properties": {
      "begin": {
        "summary": "Defines the beginning of a range.",
        "description": "begin is a positive integer that defines the beginning of a range.",
        "metadata": {
          "name": "begin",
          "Nature": "DataProperty",
          "Range": "xsd:positiveInteger",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Core/begin",
          "Domain": [
            "PositiveIntegerRange"
          ]
        }
      },
      "createdUsing": {
        "summary": "Identifies the tooling that was used during the creation of the Element.",
        "description": "CreatedUsing identifies the tooling that was used during the creation of the Element.\nThe generation method will assist the recipient of the Element in assessing\nthe general reliability/accuracy of the analysis information.",
        "metadata": {
          "name": "createdUsing",
          "Nature": "ObjectProperty",
          "Range": "Tool",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Core/createdUsing",
          "Domain": [
            "CreationInfo"
          ]
        }
      },
      "statement": {
        "summary": "Commentary on an assertion that an annotator has made.",
        "description": "A statement is a commentary on an assertion that an annotator has made.",
        "metadata": {
          "name": "statement",
          "Nature": "DataProperty",
          "Range": "xsd:string",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Core/statement",
          "Domain": [
            "Annotation"
          ]
        }
      },
      "creationInfo": {
        "summary": "Provides information about the creation of the Element.",
        "description": "CreationInfo provides information about the creation of the Element.",
        "metadata": {
          "name": "creationInfo",
          "Nature": "ObjectProperty",
          "Range": "CreationInfo",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Core/creationInfo",
          "Domain": [
            "Element"
          ]
        }
      },
      "locationHint": {
        "summary": "Provides an indication of where to retrieve an external Element.",
        "description": "A locationHint provides an indication of where to retrieve an external Element.",
        "metadata": {
          "name": "locationHint",
          "Nature": "DataProperty",
          "Range": "xsd:anyURI",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Core/locationHint",
          "Domain": [
            "ExternalMap"
          ]
        }
      },
      "identifierLocator": {
        "summary": "TODO",
        "description": "A identifierLocator is TODO",
        "metadata": {
          "name": "identifierLocator",
          "Nature": "DataProperty",
          "Range": "xsd:anyURI",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Core/identifierLocator",
          "Domain": [
            "ExternalIdentifier"
          ]
        }
      },
      "subject": {
        "summary": "An Element an annotator has made an assertion about.",
        "description": "A subject is an Element an annotator has made an assertion about.",
        "metadata": {
          "name": "subject",
          "Nature": "ObjectProperty",
          "Range": "Element",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Core/subject",
          "Domain": [
            "Annotation"
          ]
        }
      },
      "validUntilTime": {
        "summary": "Specifies until when the artifact can be used before its usage needs to be reassessed.",
        "description": "A validUntilTime specifies until when the artifact can be used before its usage needs to be reassessed.",
        "metadata": {
          "name": "validUntilTime",
          "Nature": "DataProperty",
          "Range": "DateTime",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Core/validUntilTime",
          "Domain": [
            "Artifact"
          ]
        }
      },
      "definingDocument": {
        "summary": "URI for an SPDX document which defines an SPDX element.",
        "description": "A definingDocument property is used to link an Element identifier to an SpdxDocument which contains the definition for the Element.",
        "metadata": {
          "name": "definingDocument",
          "Nature": "DataProperty",
          "Range": "xsd:anyURI",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Core/definingDocument",
          "Domain": [
            "ExternalMap"
          ]
        }
      },
      "suppliedBy": {
        "summary": "Identifies who or what supplied the Artifact.",
        "description": "Identify the actual distribution source for the Artifact being referenced.\nThis might or might not be different from the originating distribution source for the artifact.",
        "metadata": {
          "name": "suppliedBy",
          "Nature": "ObjectProperty",
          "Range": "Agent",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Core/suppliedBy",
          "Domain": [
            "Artifact"
          ]
        }
      },
      "value": {
        "summary": "A value used in a generic key-value pair.",
        "description": "A value used in a generic key-value pair.\nA key-value pair can be used to implement a dictionary which associates a key with a value.",
        "metadata": {
          "name": "value",
          "Nature": "DataProperty",
          "Range": "xsd:string",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Core/value",
          "Domain": [
            "DictionaryEntry"
          ]
        }
      },
      "to": {
        "summary": "References an Element on the right-hand side of a relationship.",
        "description": "This field references an Element on the right-hand side of a relationship.",
        "metadata": {
          "name": "to",
          "Nature": "ObjectProperty",
          "Range": "Element",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Core/to",
          "Domain": [
            "Relationship"
          ]
        }
      },
      "extension": {
        "summary": "TODO",
        "description": "TODO",
        "metadata": {
          "name": "extension",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Core/extension",
          "Domain": [
            "Element"
          ]
        }
      },
      "externalId": {
        "summary": "Identifies an external Element used within a Document but defined external to that Document.",
        "description": "ExternalId identifies an external Element used within a Document but defined external to that Document.",
        "metadata": {
          "name": "externalId",
          "Nature": "DataProperty",
          "Range": "xsd:anyURI",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Core/externalId",
          "Domain": [
            "ExternalMap"
          ]
        }
      },
      "externalReference": {
        "summary": "Points to a resource outside the scope of the SPDX-3.0 content\nthat provides additional characteristics of an Element.",
        "description": "This field points to a resource outside the scope of the SPDX-3.0 content\nthat provides additional characteristics of an Element.",
        "metadata": {
          "name": "externalReference",
          "Nature": "ObjectProperty",
          "Range": "ExternalReference",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Core/externalReference",
          "Domain": [
            "Element"
          ]
        }
      },
      "from": {
        "summary": "References the Element on the left-hand side of a relationship.",
        "description": "This field references the Element on the left-hand side of a relationship.",
        "metadata": {
          "name": "from",
          "Nature": "ObjectProperty",
          "Range": "Element",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Core/from",
          "Domain": [
            "Relationship"
          ]
        }
      },
      "created": {
        "summary": "Identifies when the Element was originally created.",
        "description": "Created is a date that identifies when the Element was originally created.\nThe time stamp can serve as an indication as to whether the analysis needs to be updated. This is often the date of last change (e.g., a git commit date), not the date when the SPDX data was created, as doing so supports reproducible builds.",
        "metadata": {
          "name": "created",
          "Nature": "DataProperty",
          "Range": "DateTime",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Core/created",
          "Domain": [
            "CreationInfo"
          ]
        }
      },
      "releaseTime": {
        "summary": "Specifies the time an artifact was released.",
        "description": "A releaseTime specifies the time an artifact was released.",
        "metadata": {
          "name": "releaseTime",
          "Nature": "DataProperty",
          "Range": "DateTime",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Core/releaseTime",
          "Domain": [
            "Artifact"
          ]
        }
      },
      "startTime": {
        "summary": "Specifies the time from which an element is applicable / valid.",
        "description": "A startTime specifies the time from which element is applicable / valid.",
        "metadata": {
          "name": "startTime",
          "Nature": "DataProperty",
          "Range": "DateTime",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Core/startTime",
          "Domain": [
            "Relationship"
          ]
        }
      },
      "rootElement": {
        "summary": "Top level Element from which all other Elements are reached via relationships.",
        "description": "A rootElement of a collection is the top level Element from which all other Elements are reached via relationships.",
        "metadata": {
          "name": "rootElement",
          "Nature": "ObjectProperty",
          "Range": "Element",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Core/rootElement",
          "Domain": [
            "ElementCollection"
          ]
        }
      },
      "prefix": {
        "summary": "A substitute for a URI.",
        "description": "A prefix is a substitute for a URI.",
        "metadata": {
          "name": "prefix",
          "Nature": "DataProperty",
          "Range": "xsd:string",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Core/prefix"
        }
      },
      "externalIdentifierType": {
        "summary": "Specifies the type of the external identifier.",
        "description": "An externalIdentifierType specifies the type of the external identifier.",
        "metadata": {
          "name": "externalIdentifierType",
          "Nature": "ObjectProperty",
          "Range": "ExternalIdentifierType",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Core/externalIdentifierType",
          "Domain": [
            "ExternalIdentifier"
          ]
        }
      },
      "contentType": {
        "summary": "Specifies the media type of an Element.",
        "description": "ContentType specifies the media type of an Element.",
        "metadata": {
          "name": "contentType",
          "Nature": "DataProperty",
          "Range": "MediaType",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Core/contentType",
          "Domain": [
            "ExternalReference",
            "Annotation"
          ]
        }
      },
      "element": {
        "summary": "Refers to one or more Elements that are part of an ElementCollection.",
        "description": "This field refers to one or more Elements that are part of an ElementCollection.",
        "metadata": {
          "name": "element",
          "Nature": "ObjectProperty",
          "Range": "Element",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Core/element",
          "Domain": [
            "ElementCollection"
          ]
        }
      },
      "relationshipType": {
        "summary": "Information about the relationship between two Elements.",
        "description": "This field provides information about the relationship between two Elements.\nFor example, you can represent a relationship between two different Files,\nbetween a Package and a File, between two Packages, or between one SPDXDocument and another SPDXDocument.",
        "metadata": {
          "name": "relationshipType",
          "Nature": "ObjectProperty",
          "Range": "RelationshipType",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Core/relationshipType",
          "Domain": [
            "Relationship"
          ]
        }
      },
      "specVersion": {
        "summary": "Provides a reference number that can be used to understand how to parse and interpret an Element.",
        "description": "The specVersion provides a reference number that can be used to understand how to parse and interpret an Element.\nIt will enable both future changes to the specification and to support backward compatibility.\nThe major version number shall be incremented when incompatible changes between versions are made\n(one or more sections are created, modified or deleted).\nThe minor version number shall be incremented when backwards compatible changes are made.\n\nHere, parties exchanging information in accordance with the SPDX specification need to provide \n100% transparency as to which SPDX specification version such information is conforming to.",
        "metadata": {
          "name": "specVersion",
          "Nature": "DataProperty",
          "Range": "SemVer",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Core/specVersion",
          "Domain": [
            "CreationInfo"
          ]
        }
      },
      "originatedBy": {
        "summary": "Identifies from where or whom the Element originally came.",
        "description": "OriginatedBy identifies from where or whom the Element originally came.",
        "metadata": {
          "name": "originatedBy",
          "Nature": "ObjectProperty",
          "Range": "Agent",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Core/originatedBy",
          "Domain": [
            "Artifact"
          ]
        }
      },
      "verifiedUsing": {
        "summary": "Provides an IntegrityMethod with which the integrity of an Element can be asserted.",
        "description": "VerifiedUsing provides an IntegrityMethod with which the integrity of an Element can be asserted.",
        "metadata": {
          "name": "verifiedUsing",
          "Nature": "ObjectProperty",
          "Range": "IntegrityMethod",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Core/verifiedUsing",
          "Domain": [
            "Element",
            "ExternalMap"
          ]
        }
      },
      "dataLicense": {
        "summary": "Provides the license under which the SPDX documentation of the Element can be used.",
        "description": "The data license provides the license under which the SPDX documentation of the Element can be used.\nThis is to alleviate any concern that content (the data or database) in an SPDX file\nis subject to any form of intellectual property right that could restrict the re-use\nof the information or the creation of another SPDX file for the same project(s).\nThis approach avoids intellectual property and related restrictions over the SPDX file,\nhowever individuals can still contract with each other to restrict release\nof specific collections of SPDX files (which map to software bill of materials)\nand the identification of the supplier of SPDX files.\nCompliance with this document includes populating the SPDX fields therein\nwith data related to such fields (\"SPDX-Metadata\"). \nThis document contains numerous fields where an SPDX file creator may provide\nrelevant explanatory text in SPDX-Metadata. Without opining on the lawfulness\nof \"database rights\" (in jurisdictions where applicable),\nsuch explanatory text is copyrightable subject matter in most Berne Convention countries.\nBy using the SPDX specification, or any portion hereof,\nyou hereby agree that any copyright rights (as determined by your jurisdiction)\nin any SPDX-Metadata, including without limitation explanatory text,\nshall be subject to the terms of the Creative Commons CC0 1.0 Universal license. \nFor SPDX-Metadata not containing any copyright rights, \nyou hereby agree and acknowledge that the SPDX-Metadata is provided to you \u201cas-is\u201d\nand without any representations or warranties of any kind concerning the SPDX-Metadata,\nexpress, implied, statutory or otherwise, including without limitation warranties\nof title, merchantability, fitness for a particular purpose, non-infringement,\nor the absence of latent or other defects, accuracy, or the presence or absence of errors,\nwhether or not discoverable, all to the greatest extent permissible under applicable law.",
        "metadata": {
          "name": "dataLicense",
          "Nature": "DataProperty",
          "Range": "xsd:string",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Core/dataLicense",
          "Domain": [
            "CreationInfo"
          ]
        }
      },
      "algorithm": {
        "summary": "Specifies the algorithm used for calculating the hash value.",
        "description": "An algorithm specifies the algorithm that was used for calculating the hash value.",
        "metadata": {
          "name": "algorithm",
          "Nature": "ObjectProperty",
          "Range": "HashAlgorithm",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Core/algorithm",
          "Domain": [
            "Hash"
          ]
        }
      },
      "summary": {
        "summary": "A short description of an Element.",
        "description": "A summary is a short description of an Element. Here, the intent is to allow the Element creator to \nprovide concise information about the function or use of the Element.",
        "metadata": {
          "name": "summary",
          "Nature": "DataProperty",
          "Range": "xsd:string",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Core/summary",
          "Domain": [
            "Element"
          ]
        }
      },
      "end": {
        "summary": "Defines the end of a range.",
        "description": "end is a positive integer that defines the end of a range.",
        "metadata": {
          "name": "end",
          "Nature": "DataProperty",
          "Range": "xsd:positiveInteger",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Core/end",
          "Domain": [
            "PositiveIntegerRange"
          ]
        }
      },
      "hashValue": {
        "summary": "The result of applying a hash algorithm to an Element.",
        "description": "HashValue is the result of applying a hash algorithm to an Element.",
        "metadata": {
          "name": "hashValue",
          "Nature": "DataProperty",
          "Range": "xsd:string",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Core/hashValue",
          "Domain": [
            "Hash"
          ]
        }
      },
      "externalIdentifier": {
        "summary": "Provides a reference to a resource outside the scope of SPDX-3.0 content\nthat uniquely identifies an Element.",
        "description": "ExternalIdentifier points to a resource outside the scope of SPDX-3.0 content\nthat uniquely identifies an Element.",
        "metadata": {
          "name": "externalIdentifier",
          "Nature": "ObjectProperty",
          "Range": "ExternalIdentifier",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Core/externalIdentifier",
          "Domain": [
            "Element"
          ]
        }
      },
      "spdxId": {
        "summary": "Identifies an Element to be referenced by other Elements.",
        "description": "SpdxId uniquely identifies an Element which may thereby be referenced by other Elements.\nThese references may be internal or external.\nWhile there may be several versions of the same Element, each one needs to be able to be referred to uniquely\nso that relationships between Elements can be clearly articulated.",
        "metadata": {
          "name": "spdxId",
          "Nature": "DataProperty",
          "Range": "xsd:anyURI",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Core/spdxId",
          "Domain": [
            "Element"
          ]
        }
      },
      "description": {
        "summary": "Provides a detailed description of the Element.",
        "description": "This field is a detailed description of the Element. It may also be extracted from the Element itself.\nThe intent is to provide recipients of the SPDX file with a detailed technical explanation\nof the functionality, anticipated use, and anticipated implementation of the Element.\nThis field may also include a description of improvements over prior versions of the Element.",
        "metadata": {
          "name": "description",
          "Nature": "DataProperty",
          "Range": "xsd:string",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Core/description",
          "Domain": [
            "Element"
          ]
        }
      },
      "locator": {
        "summary": "Provides the location of an external reference.",
        "description": "A locator provides the location of an external reference.",
        "metadata": {
          "name": "locator",
          "Nature": "DataProperty",
          "Range": "xsd:anyURI",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Core/locator",
          "Domain": [
            "ExternalReference"
          ]
        }
      },
      "annotationType": {
        "summary": "Describes the type of annotation.",
        "description": "An annotationType describes the type of an annotation.",
        "metadata": {
          "name": "annotationType",
          "Nature": "ObjectProperty",
          "Range": "AnnotationType",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Core/annotationType",
          "Domain": [
            "Annotation"
          ]
        }
      },
      "issuingAuthority": {
        "summary": "TODO",
        "description": "A issuingAuthority is TODO",
        "metadata": {
          "name": "issuingAuthority",
          "Nature": "DataProperty",
          "Range": "xsd:anyURI",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Core/issuingAuthority",
          "Domain": [
            "ExternalIdentifier"
          ]
        }
      },
      "builtTime": {
        "summary": "Specifies the time an artifact was built.",
        "description": "A builtTime specifies the time an artifact was built.",
        "metadata": {
          "name": "builtTime",
          "Nature": "DataProperty",
          "Range": "DateTime",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Core/builtTime",
          "Domain": [
            "Artifact"
          ]
        }
      },
      "profile": {
        "summary": "Provides information about which profiles the Element belongs to.",
        "description": "This field provides information about which profiles the Element belongs to.",
        "metadata": {
          "name": "profile",
          "Nature": "ObjectProperty",
          "Range": "ProfileIdentifierType",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Core/profile",
          "Domain": [
            "CreationInfo"
          ]
        }
      },
      "context": {
        "summary": "Gives information about the circumstances or unifying properties\nthat Elements of the bundle have been assembled under.",
        "description": "A context gives information about the circumstances or unifying properties\nthat Elements of the bundle have been assembled under.",
        "metadata": {
          "name": "context",
          "Nature": "DataProperty",
          "Range": "xsd:string",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Core/context",
          "Domain": [
            "Bundle"
          ]
        }
      },
      "comment": {
        "summary": "Provide consumers with comments by the creator of the Element about the Element.",
        "description": "A comment is an optional field for creators of the Element to provide comments\nto the readers/reviewers of the document.",
        "metadata": {
          "name": "comment",
          "Nature": "DataProperty",
          "Range": "xsd:string",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Core/comment",
          "Domain": [
            "ExternalReference",
            "ExternalIdentifier",
            "CreationInfo",
            "IntegrityMethod",
            "Element"
          ]
        }
      },
      "imports": {
        "summary": "Provides an ExternalMap of Element identifiers.",
        "description": "Imports provides an ExternalMap of Element identifiers that are used within a document\nbut defined external to that document.",
        "metadata": {
          "name": "imports",
          "Nature": "ObjectProperty",
          "Range": "ExternalMap",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Core/imports",
          "Domain": [
            "ElementCollection"
          ]
        }
      },
      "name": {
        "summary": "Identifies the name of an Element as designated by the creator.",
        "description": "This field identifies the name of an Element as designated by the creator. \nThe name of an Element is an important convention and easier to refer to than the URI.",
        "metadata": {
          "name": "name",
          "Nature": "DataProperty",
          "Range": "xsd:string",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Core/name",
          "Domain": [
            "SpdxDocument",
            "Element"
          ]
        }
      },
      "standard": {
        "summary": "The relevant standards that may apply to an artifact.",
        "description": "Various standards may be relevant to useful to capture for specific artifacts.",
        "metadata": {
          "name": "standard",
          "Nature": "DataProperty",
          "Range": "xsd:string",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Core/standard",
          "Domain": [
            "Artifact"
          ]
        }
      },
      "endTime": {
        "summary": "Specifies the time from which an element is no longer applicable / valid.",
        "description": "A endTime specifies the time from which element is no applicable / valid.",
        "metadata": {
          "name": "endTime",
          "Nature": "DataProperty",
          "Range": "DateTime",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Core/endTime",
          "Domain": [
            "Relationship"
          ]
        }
      },
      "scope": {
        "summary": "TODO",
        "description": "A scope is TODO",
        "metadata": {
          "name": "scope",
          "Nature": "ObjectProperty",
          "Range": "LifecycleScopeType",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Core/scope",
          "Domain": [
            "LifecycleScopedRelationship"
          ]
        }
      },
      "key": {
        "summary": "A key used in a generic key-value pair.",
        "description": "A key used in generic a key-value pair.\nA key-value pair can be used to implement a dictionary which associates a key with a value.",
        "metadata": {
          "name": "key",
          "Nature": "DataProperty",
          "Range": "xsd:string",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Core/key",
          "Domain": [
            "DictionaryEntry"
          ]
        }
      },
      "identifier": {
        "summary": "Uniquely identifies an external element.",
        "description": "An identifier uniquely identifies an external element.",
        "metadata": {
          "name": "identifier",
          "Nature": "DataProperty",
          "Range": "xsd:string",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Core/identifier",
          "Domain": [
            "ExternalIdentifier"
          ]
        }
      },
      "completeness": {
        "summary": "Provides information about the completeness of relationships.",
        "description": "Completeness gives information about whether the provided relationships are\ncomplete, known to be incomplete or if no assertion is made either way.",
        "metadata": {
          "name": "completeness",
          "Nature": "ObjectProperty",
          "Range": "RelationshipCompleteness",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Core/completeness",
          "Domain": [
            "Relationship"
          ]
        }
      },
      "externalReferenceType": {
        "summary": "Specifies the type of the external reference.",
        "description": "An externalReferenceType specifies the type of the external reference.",
        "metadata": {
          "name": "externalReferenceType",
          "Nature": "ObjectProperty",
          "Range": "ExternalReferenceType",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Core/externalReferenceType",
          "Domain": [
            "ExternalReference"
          ]
        }
      },
      "createdBy": {
        "summary": "Identifies who or what created the Element.",
        "description": "CreatedBy identifies who or what created the Element.\nThe generation method will assist the recipient of the Element in assessing\nthe general reliability/accuracy of the analysis information.",
        "metadata": {
          "name": "createdBy",
          "Nature": "ObjectProperty",
          "Range": "Agent",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Core/createdBy",
          "Domain": [
            "CreationInfo"
          ]
        }
      }
    },
    "vocabs": {
      "RelationshipCompleteness": {
        "summary": "Indicates whether a relationship is complete or known to be incomplete or if there\nis made no assertion either way.",
        "description": "RelationshipCompleteness indicates whether a relationship is complete or \nknown to be incomplete or if there is made no assertion either way.",
        "metadata": {
          "name": "RelationshipCompleteness",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Core/RelationshipCompleteness"
        },
        "entries": {
          "incomplete": "The relationship is known not to be exhaustive.",
          "complete": "The relationship is known to be exhaustive.",
          "noAssertion": "There can be made no assertion about the completeness of the relationship."
        }
      },
      "ProfileIdentifierType": {
        "summary": "Enumeration of the valid profiles that an element can be specified to be part of.",
        "description": "There are a set of profiles that have been defined to be valid for a specific release   This file enumerates the values that have been agreed on, and may be applied to the creation information for an an element.",
        "metadata": {
          "name": "ProfileIdentifierType",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Core/ProfileIdentifierType"
        },
        "entries": {
          "core": "the element follows the Core profile specification",
          "software": "the element follows the Software profile specification",
          "licensing": "the element follows the Licensing profile specification",
          "security": "the element follows the Security profile specification",
          "build": "the element follows the Build profile specification",
          "ai": "the element follows the AI profile specification",
          "dataset": "the element follows the Dataset profile specification",
          "usage": "the element follows the Usage profile specification",
          "extension": "the element follows the Extension profile specification"
        }
      },
      "ExternalIdentifierType": {
        "summary": "Specifies the type of an external identifier.",
        "description": "ExteralIdentifierType specifies the type of an external identifier.",
        "metadata": {
          "name": "ExternalIdentifierType",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Core/ExternalIdentifierType"
        },
        "entries": {
          "cpe22": "https://cpe.mitre.org/files/cpe-specification_2.2.pdf",
          "cpe23": "https://nvlpubs.nist.gov/nistpubs/Legacy/IR/nistir7695.pdf",
          "cve": "An identifier for a specific software flaw defined within the official CVE Dictionary and that conforms to the CVE specification as defined by https://csrc.nist.gov/glossary/term/cve_id.",
          "email": "https://datatracker.ietf.org/doc/html/rfc3696#section-3",
          "gitoid": "https://www.iana.org/assignments/uri-schemes/prov/gitoid Gitoid stands for [Git Object ID](https://git-scm.com/book/en/v2/Git-Internals-Git-Objects) and a gitoid of type blob is a unique hash of a binary artifact. A gitoid may represent the software [Artifact ID](https://github.com/omnibor/spec/blob/main/spec/SPEC.md#artifact-id) or the [OmniBOR Identifier](https://github.com/omnibor/spec/blob/main/spec/SPEC.md#omnibor-identifier) for the software artifact's associated [OmniBOR Document](https://github.com/omnibor/spec/blob/main/spec/SPEC.md#omnibor-document); this ambiguity exists because the OmniBOR Document is itself an artifact, and the gitoid of that artifact is its valid identifier. Omnibor is a minimalistic schema to describe software [Artifact Dependency Graphs](https://github.com/omnibor/spec/blob/main/spec/SPEC.md#artifact-dependency-graph-adg). Gitoids calculated on software artifacts (Snippet, File, or Package Elements) should be recorded in the SPDX 3.0 SoftwareArtifact's ContentIdentifier property. Gitoids calculated on the OmniBOR Document (OmniBOR Identifiers) should be recorded in the SPDX 3.0 Element's ExternalIdentifier property.",
          "other": "Used when the type doesn't match any of the other options.",
          "pkgUrl": "https://github.com/package-url/purl-spec",
          "securityOther": "Used when there is a security related identifier of unspecified type.",
          "swhid": "https://docs.softwareheritage.org/devel/swh-model/persistent-identifiers.html",
          "swid": "https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-21.html#section-2.3",
          "urlScheme": "the scheme used in order to locate a resource https://www.iana.org/assignments/uri-schemes/uri-schemes.xhtml"
        }
      },
      "ExternalReferenceType": {
        "summary": "Specifies the type of an external reference.",
        "description": "ExteralReferenceType specifies the type of an external reference.",
        "metadata": {
          "name": "ExternalReferenceType",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Core/ExternalReferenceType"
        },
        "entries": {
          "altDownloadLocation": "A reference to an alternative download location.",
          "altWebPage": "A reference to an alternative web page.",
          "binaryArtifact": "A reference to binary artifacts related to a package.",
          "buildMeta": "A reference build metadata related to a published package.",
          "buildSystem": "A reference build system used to create or publish the package.",
          "chat": "A reference to the instant messaging system used by the maintainer for a package.",
          "certificationReport": "A reference to a certification report for a package from an accredited/independent body.",
          "componentAnalysisReport": "A reference to a Software Composition Analysis (SCA) report.",
          "documentation": "A reference to the documentation for a package.",
          "dynamicAnalysisReport": "A reference to a dynamic analysis report for a package.",
          "eolNotice": "A reference to the End Of Sale (EOS) and/or End Of Life (EOL) information related to a package.",
          "exportControlAssessment": "A reference to a export control assessment for a package.",
          "funding": "A reference to funding information related to a package.",
          "issueTracker": "A reference to the issue tracker for a package.",
          "mailingList": "A reference to the mailing list used by the maintainer for a package.",
          "metrics": "A reference to metrics related to package such as OpenSSF scorecards.",
          "license": "A reference to additional license information related to an artifact.",
          "other": "Used when the type doesn't match any of the other options.",
          "privacyAssessment": "A reference to a privacy assessment for a package.",
          "productMetadata": "A reference to additional product metadata such as reference within organization's product catalog.",
          "purchaseOrder": "A reference to a purchase order for a package.",
          "releaseNotes": "A reference to the release notes for a package.",
          "releaseHistory": "A reference to a published list of releases for a package.",
          "riskAssessment": "A reference to a risk assessment for a package.",
          "runtimeAnalysisReport": "A reference to a runtime analysis report for a package.",
          "secureSoftwareAttestation": "A reference to information assuring that the software is developed using security practices as defined by [NIST SP 800-218 Secure Software Development Framework (SSDF)](https://csrc.nist.gov/publications/detail/sp/800-218/final) or [CISA Secure Software Development Attestation Form](https://www.cisa.gov/sites/default/files/2023-04/secure-software-self-attestation_common-form_508.pdf).",
          "securityAdvisory": "A reference to a published security advisory (where advisory as defined per ISO 29147:2018) that may affect one or more elements, e.g., vendor advisories or specific NVD entries.",
          "securityAdversaryModel": "A reference to the security adversary model for a package.",
          "securityFix": "A reference to the patch or source code that fixes a vulnerability.",
          "securityOther": "A reference to related security information of unspecified type.",
          "securityPenTestReport": "A reference to a [penetration test](https://en.wikipedia.org/wiki/Penetration_test) report for a package.",
          "securityPolicy": "A reference to instructions for reporting newly discovered security vulnerabilities for a package.",
          "securityThreatModel": "A reference the [security threat model](https://en.wikipedia.org/wiki/Threat_model) for a package.",
          "socialMedia": "A reference to a social media channel for a package.",
          "sourceArtifact": "A reference to an artifact containing the sources for a package.",
          "staticAnalysisReport": "A reference to a static analysis report for a package.",
          "support": "A reference to the software support channel or other support information for a package.",
          "vcs": "A reference to a version control system related to a software artifact.",
          "vulnerabilityDisclosureReport": "A reference to a Vulnerability Disclosure Report (VDR) which provides the software supplier's analysis and findings describing the impact (or lack of impact) that reported vulnerabilities have on packages or products in the supplier's SBOM as defined in [NIST SP 800-161](https://csrc.nist.gov/publications/detail/sp/800-161/rev-1/final).",
          "vulnerabilityExploitabilityAssessment": "A reference to a Vulnerability Exploitability eXchange (VEX) statement which provides information on whether a product is impacted by a specific vulnerability in an included package and, if affected, whether there are actions recommended to remediate. See also [NTIA VEX one-page](https://ntia.gov/files/ntia/publications/vex_one-page_summary.pdf)..",
          "qualityAssessmentReport": "A reference to a quality assessment for a package."
        }
      },
      "LifecycleScopeType": {
        "summary": "TODO",
        "description": "TODO",
        "metadata": {
          "name": "LifecycleScopeType",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Core/LifecycleScopeType"
        },
        "entries": {
          "design": "TODOdescription",
          "build": "TODOdescription",
          "development": "TODOdescription",
          "test": "TODOdescription",
          "runtime": "TODOdescription",
          "other": "TODOdescription"
        }
      },
      "AnnotationType": {
        "summary": "Specifies the type of an annotation.",
        "description": "AnnotationType specifies the type of an annotation.",
        "metadata": {
          "name": "AnnotationType",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Core/AnnotationType"
        },
        "entries": {
          "other": "Used to store extra information about an Element which is not part of a Review (e.g. extra information provided during the creation of the Element).",
          "review": "Used when someone reviews the Element."
        }
      },
      "HashAlgorithm": {
        "summary": "A mathematical algorithm that maps data of arbitrary size to a bit string.",
        "description": "A HashAlgorithm is a mathematical algorithm that maps data of arbitrary size to a bit string (the hash)\nand is a one-way function, that is, a function which is practically infeasible to invert.",
        "metadata": {
          "name": "HashAlgorithm",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Core/HashAlgorithm"
        },
        "entries": {
          "blake2b256": "blake2b algorithm with a digest size of 256 https://datatracker.ietf.org/doc/html/rfc7693#section-4",
          "blake2b384": "blake2b algorithm with a digest size of 384 https://datatracker.ietf.org/doc/html/rfc7693#section-4",
          "blake2b512": "blake2b algorithm with a digest size of 512 https://datatracker.ietf.org/doc/html/rfc7693#section-4",
          "blake3": "https://github.com/BLAKE3-team/BLAKE3-specs/blob/master/blake3.pdf",
          "crystalsKyber": "https://pq-crystals.org/kyber/index.shtml",
          "crystalsDilithium": "https://pq-crystals.org/dilithium/index.shtml",
          "falcon": "https://falcon-sign.info/falcon.pdf",
          "md2": "https://datatracker.ietf.org/doc/rfc1319/",
          "md4": "https://datatracker.ietf.org/doc/html/rfc1186",
          "md5": "https://datatracker.ietf.org/doc/html/rfc1321",
          "md6": "https://people.csail.mit.edu/rivest/pubs/RABCx08.pdf",
          "other": "any hashing algorithm that does not exist in this list of entries",
          "sha1": "https://datatracker.ietf.org/doc/html/rfc3174",
          "sha224": "secure hashing algorithm with a digest length of 224 https://datatracker.ietf.org/doc/html/draft-ietf-pkix-sha224-01",
          "sha256": "secure hashing algorithm with a digest length of 256 https://www.rfc-editor.org/rfc/rfc4634",
          "sha3_224": "sha3 with a digest length of 224 https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.202.pdf",
          "sha3_256": "sha3 with a digest length of 256 https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.202.pdf",
          "sha3_384": "sha3 with a digest length of 384 https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.202.pdf",
          "sha3_512": "sha3 with a digest length of 512 https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.202.pdf",
          "sha384": "secure hashing algorithm with a digest length of 384 https://www.rfc-editor.org/rfc/rfc4634",
          "sha512": "secure hashing algorithm with a digest length of 512 https://www.rfc-editor.org/rfc/rfc4634",
          "spdxPvcSha1": "TODOdescription",
          "spdxPvcSha256": "TODOdescription",
          "sphincsPlus": "TODOdescription"
        }
      },
      "RelationshipType": {
        "summary": "Information about the relationship between two Elements.",
        "description": "Provides information about the relationship between two Elements.\nFor example, you can represent a relationship between two different Files,\nbetween a Package and a File, between two Packages, or between one SPDXDocument and another SPDXDocument.",
        "metadata": {
          "name": "RelationshipType",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Core/RelationshipType"
        },
        "entries": {
          "affects": "(Security/VEX) Designates one or more elements as affected by a vulnerability",
          "amends": "Every `to` Element amends the `from` Element",
          "ancestor": "Every `to` Element is an ancestor of the `from` Element",
          "availableFrom": "This relationship is used to identify additional suppliers where an artifact is available from.",
          "buildDependency": "Every `to` Element is a build dependency of the `from` Element",
          "buildTool": "Build tool used to build an Element. This may be used to describe the build tool of a Build instance",
          "coordinatedBy": "(Security) Used to identify the vendor, researcher, or consumer agent performing coordination for a vulnerability",
          "contains": "Every `to` Element is contained by the `from` Element",
          "configOf": "(Build) Configuration information applied to an Element instance during a LifeycleScopeType period.  Example: Build configuration of the build instance",
          "copy": "Every `to` Element is a copy of the `from` Element",
          "dataFile": "Every `to` Element is a data file related to the the `from` Element",
          "dependencyManifest": "Every `to` Element is manifest file containing dependency information related to the `from` Element",
          "dependsOn": "Every `to` Element is a dependecy of the `from` Element",
          "descendant": "This relationship may be used to describe child builds of a Build instance.",
          "describes": "Every `to` Element is  described by the `from` Element.  This can be used to denote the root(s) of a tree of elements contained in an SBOM.",
          "devDependency": "Every `to` Element is a development dependency for the `from` Element",
          "devTool": "Every `to` Element is a development tool for the `from` Element",
          "distributionArtifact": "Every `to` Element is an artifact intended for distribution of the `from` Element (e.g. an RPM or archive file)",
          "documentation": "Every `to` Element is documentation for the `from` Element",
          "doesNotAffect": "(Security/VEX) Specifies a vulnerability has no impact on one or more elements",
          "dynamicLink": "Every `to` Element is dynamically linked to the `from` Element",
          "example": "Every `to` Element is an example for the `from` Element",
          "evidenceFor": "(Dataset) Every `to` Element is can be considered as evidence for the `from` Element",
          "expandedFromArchive": "Every `to` Element is an artifact expanded from the `from` archive file",
          "exploitCreatedBy": "(Security) Designates an agent has created an exploit against a vulnerability",
          "fileAdded": "Every `to` Element is is a file added to the `from` Element",
          "fileDeleted": "Every `to` Element is a file deleted from the `from` Element",
          "fileModified": "Every `to` Element is a modification of the `from` Element",
          "fixedBy": "(Security) Designates a vulnerability has been fixed by an agent",
          "fixedIn": "(Security/VEX) A vulnerability has been fixed in one or more elements",
          "foundBy": "(Security) Designates an agent was the original discoverer of a security vulnerability",
          "generates": "Every `to` Element is generated from the `from` Element",
          "hasAssessmentFor": "(Security) Relates a Vulnerability and an Element with a security assessment.",
          "hasAssociatedVulnerability": "(Security) Used to associate a security vulnerability with a software artifact",
          "hostOf": "(Build) The`from` Element in which every instance of the `to` Element during a LifecycleScopeType period runs on.   Example: host that the build runs on for an element.",
          "inputOf": "(Build) Input to the Element instance during a LifecycleScopeType period.   Example: input to the build instance for an element.",
          "invokedBy": "(Build) Every`to` Agent that invoked a `from` Element instance during a LifecycleScopeType period.  Example: Agent that invoked the build for an element",
          "metafile": "Every `to` Element is is a file containing metadata about the `from` Element",
          "onBehalfOf": "(Build) Every `to` Agent acting on behalf of another `from` Agent during a LifecycleScopeType period",
          "optionalComponent": "Every `to` Element is an optional component of the `from` Element",
          "optionalDependency": "Every `to` Element is an optional dependency of the `from` Element",
          "other": "Every `to` Element is related to the `from` Element where the relationship type is not described by any of the SPDX relationhip types",
          "outputOf": "(Build) `from` Element that is output `to` the Element instance during a LifecycleScopeType period.  Example: output of the build instance",
          "packages": "Every `to` Element is a packaged form of the `from` Element",
          "patch": "Every `to` Element is a patch for the `from` Element",
          "prerequisite": "Every `to` Element is a prerequisite of the `from` Element",
          "providedDependency": "Every `to` Element is a dependency not included in the distributed artifact but is assumed to be provided the `from` Element",
          "publishedBy": "(Security) Designates the agent that made a vulnerability record available for public use or reference",
          "reportedBy": "(Security) Designates the agent that first reported a vulnerability to the project, vendor, or tracking database for formal identification",
          "republishedBy": "(Security) Designates the agent that tracked, aggregated, and/or enriched vulnerability details to improve context (i.e. NVD)",
          "requirementFor": "Every `to` Element is required for the `from` Element",
          "runtimeDependency": "Every `to` Element is a runtime dependency for the `from` Element",
          "specificationFor": "Every `to` Element is a specification for the `from` Element",
          "staticLink": "Every `to` Element is statically linked to the `from` Element",
          "test": "Every `to` Element is a test artifact for the `from` Element",
          "testCase": "Every `to` Element is a test case for the `from` Element",
          "testDependency": "Every `to` Element is a test dependency for the `from` Element",
          "testTool": "Every `to` Element is a test tool for the `from` Element",
          "testedOn": "(AI, Dataset) The `from` Element has been tested on the `to` Element",
          "trainedOn": "(AI, Dataset) The `from` Element has been trained by the `to` Element(s)",
          "underInvestigationFor": "(Security/VEX) The impact of a vulnerability is being investigated",
          "variant": "Every `to` Element is a variant the `from` Element"
        }
      }
    }
  },
  "Dataset": {
    "name": "Dataset",
    "classes": {
      "Dataset": {
        "summary": "Provides information about the fields in the Dataset profile.",
        "description": "Metadata information that can be added to a dataset that may be used in a software or to train/test an AI package.\nExternal property restriction on /Core/Artifact/originatedBy: minCount: 1\nExternal property restriction on /Software/Package/downloadLocation: minCount: 1\nExternal property restriction on /Software/SoftwareArtifact/primaryPurpose: minCount: 1\nExternal property restriction on /Core/Artifact/releaseTime: minCount: 1\nExternal property restriction on /Core/Artifact/builtTime: minCount: 1",
        "metadata": {
          "name": "Dataset",
          "SubclassOf": "/Software/Package",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Dataset/Dataset"
        },
        "properties": {
          "datasetType": {
            "type": "DatasetType",
            "minCount": "1",
            "maxCount": "*"
          },
          "dataCollectionProcess": {
            "type": "xsd:string",
            "minCount": "0",
            "maxCount": "1"
          },
          "intendedUse": {
            "type": "xsd:string",
            "minCount": "0",
            "maxCount": "1"
          },
          "datasetSize": {
            "type": "xsd:nonNegativeInteger",
            "minCount": "0",
            "maxCount": "1"
          },
          "datasetNoise": {
            "type": "xsd:string",
            "minCount": "0",
            "maxCount": "1"
          },
          "dataPreprocessing": {
            "type": "xsd:string",
            "minCount": "0",
            "maxCount": "*"
          },
          "sensor": {
            "type": "/Core/DictionaryEntry",
            "minCount": "0",
            "maxCount": "*"
          },
          "knownBias": {
            "type": "xsd:string",
            "minCount": "0",
            "maxCount": "*"
          },
          "sensitivePersonalInformation": {
            "type": "/AI/PresenceType",
            "minCount": "0",
            "maxCount": "1"
          },
          "anonymizationMethodUsed": {
            "type": "xsd:string",
            "minCount": "0",
            "maxCount": "*"
          },
          "confidentialityLevel": {
            "type": "ConfidentialityLevelType",
            "minCount": "0",
            "maxCount": "1"
          },
          "datasetUpdateMechanism": {
            "type": "xsd:string",
            "minCount": "0",
            "maxCount": "1"
          },
          "datasetAvailability": {
            "type": "DatasetAvailabilityType",
            "minCount": "0",
            "maxCount": "1"
          }
        },
        "externalPropertyRestrictions": {
          "/Core/Artifact/originatedBy": {
            "minCount": "1",
            "maxCount": "*"
          },
          "/Software/Package/downloadLocation": {
            "minCount": "1",
            "maxCount": "*"
          },
          "/Software/SoftwareArtifact/primaryPurpose": {
            "minCount": "1",
            "maxCount": "*"
          },
          "/Core/Artifact/releaseTime": {
            "minCount": "1",
            "maxCount": "*"
          },
          "/Core/Artifact/builtTime": {
            "minCount": "1",
            "maxCount": "*"
          }
        }
      }
    },
    "properties": {
      "knownBias": {
        "summary": "Records the biases that the dataset is known to encompass.",
        "description": "KnownBias is a free form text field that describes the different biases that the dataset encompasses.",
        "metadata": {
          "name": "knownBias",
          "Nature": "DataProperty",
          "Range": "xsd:string",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Dataset/knownBias",
          "Domain": [
            "Dataset"
          ]
        }
      },
      "dataPreprocessing": {
        "summary": "Describes the preprocessing steps that were applied to the raw data to create the given dataset.",
        "description": "DataPreprocessing describes the various preprocessing steps\nthat were applied to the raw data to create the dataset.",
        "metadata": {
          "name": "dataPreprocessing",
          "Nature": "DataProperty",
          "Range": "xsd:string",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Dataset/dataPreprocessing",
          "Domain": [
            "Dataset"
          ]
        }
      },
      "datasetNoise": {
        "summary": "Describes potentially noisy elements of the dataset.",
        "description": "DatasetNoise describes what kinds of noises a dataset might encompass.\nThe field uses free form text to specify the fields or the samples that might be noisy.\nAlternatively, it can also be used to describe various noises that could impact the whole dataset.",
        "metadata": {
          "name": "datasetNoise",
          "Nature": "DataProperty",
          "Range": "xsd:string",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Dataset/datasetNoise",
          "Domain": [
            "Dataset"
          ]
        }
      },
      "datasetUpdateMechanism": {
        "summary": "Describes a mechanism to update the dataset.",
        "description": "DatasetUpdateMechanism describes a mechanism to update the dataset.",
        "metadata": {
          "name": "datasetUpdateMechanism",
          "Nature": "DataProperty",
          "Range": "xsd:string",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Dataset/datasetUpdateMechanism",
          "Domain": [
            "Dataset"
          ]
        }
      },
      "datasetSize": {
        "summary": "Captures the size of the dataset.",
        "description": "DatasetSize Captures how large a dataset is.\nThe size is to be measured in bytes.",
        "metadata": {
          "name": "datasetSize",
          "Nature": "DataProperty",
          "Range": "xsd:nonNegativeInteger",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Dataset/datasetSize",
          "Domain": [
            "Dataset"
          ]
        }
      },
      "sensitivePersonalInformation": {
        "summary": "Describes if any sensitive personal information is present in the dataset.",
        "description": "SensitivePersonalInformation indicates the presence of sensitive personal data\nor information that allows drawing conclusions about a person's identity.",
        "metadata": {
          "name": "sensitivePersonalInformation",
          "Nature": "ObjectProperty",
          "Range": "PresenceType",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Dataset/sensitivePersonalInformation",
          "Domain": [
            "Dataset"
          ]
        }
      },
      "confidentialityLevel": {
        "summary": "Describes the confidentiality level of the data points contained in the dataset.",
        "description": "ConfidentialityLevel describes the levels of confidentiality of the data points contained in the dataset.",
        "metadata": {
          "name": "confidentialityLevel",
          "Nature": "ObjectProperty",
          "Range": "ConfidentialityLevelType",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Dataset/confidentialityLevel",
          "Domain": [
            "Dataset"
          ]
        }
      },
      "dataCollectionProcess": {
        "summary": "Describes how the dataset was collected.",
        "description": "DataCollectionProcess describes how a dataset was collected.\nExamples include the sources from which a dataset was scrapped or\nthe interview protocol that was used for data collection.",
        "metadata": {
          "name": "dataCollectionProcess",
          "Nature": "DataProperty",
          "Range": "xsd:string",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Dataset/dataCollectionProcess",
          "Domain": [
            "Dataset"
          ]
        }
      },
      "anonymizationMethodUsed": {
        "summary": "Describes the anonymization methods used.",
        "description": "AnonymizationMethodUsed describes the methods used to anonymize the dataset (of fields in the dataset).",
        "metadata": {
          "name": "anonymizationMethodUsed",
          "Nature": "DataProperty",
          "Range": "xsd:string",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Dataset/anonymizationMethodUsed",
          "Domain": [
            "Dataset"
          ]
        }
      },
      "datasetAvailability": {
        "summary": "The field describes the availability of a dataset.",
        "description": "Some datasets are publicly available and can be downloaded directly. Others are only accessible behind a clickthrough, or after filling a registration form. This field will describe the dataset availability from that perspective.",
        "metadata": {
          "name": "datasetAvailability",
          "Nature": "DataProperty",
          "Range": "DatasetAvailabilityType",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Dataset/datasetAvailability",
          "Domain": [
            "Dataset"
          ]
        }
      },
      "intendedUse": {
        "summary": "Describes what the given dataset should be used for.",
        "description": "IntendedUse describes what the given dataset should be used for.\nSome datasets are collected to be used only for particular purposes. \nFor example, medical data collected from a specific demography might only be applicable\nfor training machine learning models to make predictions for that demography.\nIn such a case, the intendedUse field would capture this information.\nSimilarly, if a dataset is collected for building a facial recognition model,\nthe intendedUse field would specify that.",
        "metadata": {
          "name": "intendedUse",
          "Nature": "DataProperty",
          "Range": "xsd:string",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Dataset/intendedUse",
          "Domain": [
            "Dataset"
          ]
        }
      },
      "sensor": {
        "summary": "Describes a sensor used for collecting the data.",
        "description": "Sensor describes a sensor that was used for collecting the data\nand its calibration value as a key-value pair.",
        "metadata": {
          "name": "sensors",
          "Nature": "ObjectProperty",
          "Range": "/Core/DictionaryEntry",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Dataset/sensor",
          "Domain": [
            "Dataset"
          ]
        }
      },
      "datasetType": {
        "summary": "Describes the type of the given dataset.",
        "description": "Type describes the datatype contained in the dataset. For example a dataset can be an image dataset for computer vision applications, a text dataset such as the contents of a book or Wikipedia article, or sometimes a multimodal dataset that contains multiple types of data.",
        "metadata": {
          "name": "datasetType",
          "Nature": "DataProperty",
          "Range": "DatasetType",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Dataset/datasetType",
          "Domain": [
            "Dataset"
          ]
        }
      }
    },
    "vocabs": {
      "DatasetType": {
        "summary": "Enumeration of dataset types.",
        "description": "Describes the different structures of data within a given dataset. A dataset can have multiple types of data, or even a single type of data but still match multiple types, for example sensor data could also be timeseries or labeled image data could also be considered categorical.",
        "metadata": {
          "name": "DatasetType",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Dataset/DatasetType"
        },
        "entries": {
          "structured": "data is stored in tabular format or retrieved from a relational database.",
          "numeric": "data consists only of numeric entries.",
          "text": "data consists of unstructured text, such as a book, wikipedia article (without images), or transcript.",
          "categorical": "data that is classified into a discrete number of categories, such as the eye color of a population of people.",
          "graph": "data is in the form of a graph where entries are somehow related to each other through edges, such a social network of friends.",
          "timeseries": "data is recorded in an ordered sequence of timestamped entries, such as the price of a stock over the course of a day.",
          "timestamp": "data is recorded with a timestamp for each entry, but not necessarily ordered or at specific intervals, such as when a taxi ride starts and ends.",
          "sensor": "data is recorded from a physical sensor, such as a thermometer reading or biometric device.",
          "image": "data is a collection of images such as pictures of animals.",
          "syntactic": "data describes the syntax or semantics of a language or text, such as a parse tree used for natural language processing.",
          "audio": "data is audio based, such as a collection of music from the 80s.",
          "video": "data is video based, such as a collection of movie clips featuring Tom Hanks.",
          "other": "data is of a type not included in this list.",
          "noAssertion": "data type is not known."
        }
      },
      "DatasetAvailabilityType": {
        "summary": "Availability of dataset",
        "description": "Describes the possible types of availability of a dataset, indicating whether the dataset can be directly downloaded, can be assembled using a script for scraping the data, is only available after a clickthrough or a registration form.",
        "metadata": {
          "name": "DatasetAvailabilityType",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Dataset/DatasetAvailabilityType"
        },
        "entries": {
          "Direct-Download": "the dataset is publicly available and can be downloaded directly.",
          "Scraping-Script": "the dataset provider is not making available the underlying data and the dataset must be reassembled, typically using the provided script for scraping the data.",
          "Query": "the dataset is publicly available, but not all at once, and can only be accessed through queries which return parts of the dataset.",
          "Clickthrough": "the dataset is not publicly available and can only be accessed after affirmatively accepting terms on a clickthrough webpage.",
          "Registration": "the dataset is not publicly available and an email registration is required before accessing the dataset, although without an affirmative acceptance of terms."
        }
      },
      "ConfidentialityLevelType": {
        "summary": "Categories of confidentiality level.",
        "description": "Describes the different confidentiality levels as given by the [Traffic Light Protocol](https://en.wikipedia.org/wiki/Traffic_Light_Protocol).",
        "metadata": {
          "name": "ConfidentialityLevelType",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Dataset/ConfidentialityLevelType"
        },
        "entries": {
          "Red": "Data points in the dataset are highly confidential and can only be shared with named recipients.",
          "Amber": "Data points in the dataset can be shared only with specific organizations and their clients on a need to know basis.",
          "Green": "Dataset can be shared within a community of peers and partners.",
          "Clear": "Dataset may be distributed freely, without restriction."
        }
      }
    }
  },
  "Licensing": {
    "name": "Licensing",
    "classes": {
      "ListedLicense": {
        "summary": "A license that is listed on the SPDX License List.",
        "description": "A ListedLicense represents a License that is listed on the SPDX License List\nat https://spdx.org/licenses.",
        "metadata": {
          "name": "ListedLicense",
          "SubclassOf": "License",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Licensing/ListedLicense"
        },
        "properties": {
          "listVersionAdded": {
            "type": "xsd:string",
            "minCount": "0",
            "maxCount": "1"
          },
          "deprecatedVersion": {
            "type": "xsd:string",
            "minCount": "0",
            "maxCount": "1"
          }
        },
        "externalPropertyRestrictions": {}
      },
      "WithAdditionOperator": {
        "summary": "Portion of an AnyLicenseInfo representing a License which has additional\ntext applied to it",
        "description": "A WithAdditionOperator indicates that the designated License is subject to the\ndesignated LicenseAddition, which might be a license exception on the SPDX\nExceptions List (ListedLicenseException) or may be other additional text\n(CustomLicenseAddition). It is represented in the SPDX License Expression\nSyntax by the `WITH` operator.",
        "metadata": {
          "name": "WithAdditionOperator",
          "SubclassOf": "AnyLicenseInfo",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Licensing/WithAdditionOperator"
        },
        "properties": {
          "subjectLicense": {
            "type": "ExtendableLicense",
            "minCount": "1",
            "maxCount": "1"
          },
          "subjectAddition": {
            "type": "LicenseAddition",
            "minCount": "1",
            "maxCount": "1"
          }
        },
        "externalPropertyRestrictions": {}
      },
      "License": {
        "summary": "Abstract class for the portion of an AnyLicenseInfo representing a license.",
        "description": "A License represents a license text, whether listed on the SPDX License List\n(ListedLicense) or defined by an SPDX data creator (CustomLicense).",
        "metadata": {
          "name": "License",
          "SubclassOf": "ExtendableLicense",
          "Instantiability": "Abstract",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Licensing/License"
        },
        "properties": {
          "licenseText": {
            "type": "xsd:string",
            "minCount": "1",
            "maxCount": "1"
          },
          "isOsiApproved": {
            "type": "xsd:boolean",
            "minCount": "0",
            "maxCount": "1"
          },
          "isFsfLibre": {
            "type": "xsd:boolean",
            "minCount": "0",
            "maxCount": "1"
          },
          "standardLicenseHeader": {
            "type": "xsd:string",
            "minCount": "0",
            "maxCount": "1"
          },
          "standardLicenseTemplate": {
            "type": "xsd:string",
            "minCount": "0",
            "maxCount": "1"
          },
          "isDeprecatedLicenseId": {
            "type": "xsd:boolean",
            "minCount": "0",
            "maxCount": "1"
          },
          "obsoletedBy": {
            "type": "xsd:string",
            "minCount": "0",
            "maxCount": "1"
          }
        },
        "externalPropertyRestrictions": {}
      },
      "CustomLicenseAddition": {
        "summary": "A license addition that is not listed on the SPDX Exceptions List.",
        "description": "A CustomLicenseAddition represents an addition to a License that is not listed\non the SPDX Exceptions List at https://spdx.org/licenses/exceptions-index.html,\nand is therefore defined by an SPDX data creator.\n\nIt is intended to represent additional language which is meant to be added to\na License, but which is not itself a standalone License.",
        "metadata": {
          "name": "CustomLicenseAddition",
          "SubclassOf": "LicenseAddition",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Licensing/CustomLicenseAddition"
        },
        "properties": {},
        "externalPropertyRestrictions": {}
      },
      "LicenseAddition": {
        "summary": "Abstract class for additional text intended to be added to a License, but\nwhich is not itself a standalone License.",
        "description": "A LicenseAddition represents text which is intended to be added to a License\nas additional text, but which is not itself intended to be a standalone\nLicense.\n\nIt may be an exception which is listed on the SPDX Exceptions List\n(ListedLicenseException), or may be any other additional text (as an exception\nor otherwise) which is defined by an SPDX data creator (CustomLicenseAddition).",
        "metadata": {
          "name": "LicenseAddition",
          "SubclassOf": "/Core/Element",
          "Instantiability": "Abstract",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Licensing/LicenseAddition"
        },
        "properties": {
          "additionText": {
            "type": "xsd:string",
            "minCount": "1",
            "maxCount": "1"
          },
          "standardAdditionTemplate": {
            "type": "xsd:string",
            "minCount": "0",
            "maxCount": "1"
          },
          "isDeprecatedAdditionId": {
            "type": "xsd:boolean",
            "minCount": "0",
            "maxCount": "1"
          },
          "obsoletedBy": {
            "type": "xsd:string",
            "minCount": "0",
            "maxCount": "1"
          }
        },
        "externalPropertyRestrictions": {}
      },
      "OrLaterOperator": {
        "summary": "Portion of an AnyLicenseInfo representing this version, or any later version,\nof the indicated License.",
        "description": "An OrLaterOperator indicates that this portion of the AnyLicenseInfo\nrepresents either (1) the specified version of the corresponding License, or\n(2) any later version of that License. It is represented in the SPDX License\nExpression Syntax by the `+` operator.\n\nIt is context-dependent, and unspecified by SPDX, as to what constitutes a\n\"later version\" of any particular License. Some Licenses may not be versioned,\nor may not have clearly-defined ordering for versions. The consumer of SPDX\ndata will need to determine for themselves what meaning to attribute to a\n\"later version\" operator for a particular License.",
        "metadata": {
          "name": "OrLaterOperator",
          "SubclassOf": "ExtendableLicense",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Licensing/OrLaterOperator"
        },
        "properties": {
          "subjectLicense": {
            "type": "License",
            "minCount": "1",
            "maxCount": "1"
          }
        },
        "externalPropertyRestrictions": {}
      },
      "CustomLicense": {
        "summary": "A license that is not listed on the SPDX License List.",
        "description": "A CustomLicense represents a License that is not listed on the SPDX License\nList at https://spdx.org/licenses, and is therefore defined by an SPDX data\ncreator.",
        "metadata": {
          "name": "CustomLicense",
          "SubclassOf": "License",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Licensing/CustomLicense"
        },
        "properties": {},
        "externalPropertyRestrictions": {}
      },
      "LicenseExpression": {
        "summary": "An SPDX Element containing an SPDX license expression string.",
        "description": "Often a single license can be used to represent the licensing terms of a source code or binary file, but there are situations where a single license identifier is not sufficient. A common example is when software is offered under a choice of one or more licenses (e.g., GPL-2.0-only OR BSD-3-Clause). Another example is when a set of licenses is needed to represent a binary program constructed by compiling and linking two (or more) different source files each governed by different licenses (e.g., LGPL-2.1-only AND BSD-3-Clause).\n\nSPDX License Expressions provide a way for one to construct expressions that more accurately represent the licensing terms typically found in open source software source code. A license expression could be a single license identifier found on the SPDX License List; a user defined license reference denoted by the LicenseRef-idString; a license identifier combined with an SPDX exception; or some combination of license identifiers, license references and exceptions constructed using a small set of defined operators (e.g., AND, OR, WITH and +). We provide the definition of what constitutes a valid an SPDX License Expression in this section.",
        "metadata": {
          "name": "LicenseExpression",
          "SubclassOf": "AnyLicenseInfo",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Licensing/LicenseExpression"
        },
        "properties": {
          "licenseExpression": {
            "type": "xsd:string",
            "minCount": "1",
            "maxCount": "1"
          }
        },
        "externalPropertyRestrictions": {}
      },
      "ListedLicenseException": {
        "summary": "A license exception that is listed on the SPDX Exceptions list.",
        "description": "A ListedLicenseException represents an exception to a License (in other words,\nan exception to a license condition or an additional permission beyond those\ngranted in a License) which is listed on the SPDX Exceptions List at\nhttps://spdx.org/licenses/exceptions-index.html.",
        "metadata": {
          "name": "ListedLicenseException",
          "SubclassOf": "LicenseAddition",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Licensing/ListedLicenseException"
        },
        "properties": {
          "listVersionAdded": {
            "type": "xsd:string",
            "minCount": "0",
            "maxCount": "1"
          },
          "deprecatedVersion": {
            "type": "xsd:string",
            "minCount": "0",
            "maxCount": "1"
          }
        },
        "externalPropertyRestrictions": {}
      },
      "AnyLicenseInfo": {
        "summary": "Abstract class representing a license combination consisting of one or more\nlicenses (optionally including additional text), which may be combined\naccording to the SPDX license expression syntax.",
        "description": "An AnyLicenseInfo is used by licensing properties of software artifacts.\nIt can be a NoneLicense, a NoAssertionLicense,\nsingle license (either on the SPDX License List or a custom-defined license);\na single license with an \"or later\" operator applied; the foregoing with\nadditional text applied; or a set of licenses combined by applying \"AND\" and\n\"OR\" operators recursively.",
        "metadata": {
          "name": "AnyLicenseInfo",
          "SubclassOf": "/Core/Element",
          "Instantiability": "Abstract",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Licensing/AnyLicenseInfo"
        },
        "properties": {},
        "externalPropertyRestrictions": {}
      }
    },
    "properties": {
      "seeAlso": {
        "summary": "Contains a URL where the License or LicenseAddition can be found in use.",
        "description": "A seeAlso defines a cross-reference with a URL where the License or\nLicenseAddition can be found in use by one or a few projects.\n\nIf applicable, it should include a URL where the license text is posted by\nthe license steward, particularly if the license steward has made available a\n\"canonical\" primary URL for the license text.\n\nIf the license is OSI approved, a seeAlso should be included with the URL for\nthe license's listing on the OSI website.\n\nThe seeAlso URL may refer to a previously-available URL for the License or\nLicenseAddition which is no longer active.\n\nWhere applicable, the seeAlso URL should include the license text in its\nnative language. seeAlso URLs to English or other translations may be included\nwhere multiple, equivalent official translations exist.",
        "metadata": {
          "name": "seeAlso",
          "Nature": "DataProperty",
          "Range": "xsd:anyURI",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Licensing/seeAlso"
        }
      },
      "standardLicenseHeader": {
        "summary": "Provides a License author's preferred text to indicate that a file is covered\nby the License.",
        "description": "A standardLicenseHeader contains the plain text of the License author's\npreferred wording to be used, typically in a source code file's header\ncomments or similar location, to indicate that the file is subject to\nthe specified License.",
        "metadata": {
          "name": "standardLicenseHeader",
          "Nature": "DataProperty",
          "Range": "xsd:string",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Licensing/standardLicenseHeader",
          "Domain": [
            "License"
          ]
        }
      },
      "licenseName": {
        "summary": "Identifies the full name of a License.",
        "description": "A licenseName contains the full name of a License, preferably using the title found\nin the applicable license text or file, or as otherwise specified by the\nLicense's author or steward.\n\nWhen no such title is specified, using a name from another well-known source or list\nof licenses (such as OSI or Fedora) is suggested.\n\nIf no official or common name is known, any name may be used to aid in\ndistinguishing the License from other Licenses.",
        "metadata": {
          "name": "licenseName",
          "Nature": "DataProperty",
          "Range": "xsd:string",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Licensing/licenseName"
        }
      },
      "licenseText": {
        "summary": "Identifies the full text of a License.",
        "description": "A licenseText contains the plain text of the License, without templating\nor other similar markup.\n\nUsers of the licenseText for a License can apply the SPDX Matching Guidelines\nwhen comparing it to another text for matching purposes.",
        "metadata": {
          "name": "licenseText",
          "Nature": "DataProperty",
          "Range": "xsd:string",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Licensing/licenseText",
          "Domain": [
            "License"
          ]
        }
      },
      "isDeprecatedLicenseId": {
        "summary": "Specifies whether a license or additional text identifier has been marked as\ndeprecated.",
        "description": "The isDeprecatedLicenseId property specifies whether an identifier for a\nLicense or LicenseAddition has been marked as deprecated. If the property\nis not defined, then it is presumed to be false (i.e., not deprecated).\n\nIf the License or LicenseAddition is included on the SPDX License List, then\nthe `deprecatedVersion` property indicates on which version release of the\nLicense List it was first marked as deprecated.\n\n\"Deprecated\" in this context refers to deprecating the use of the\n_identifier_, not the underlying license. In other words, even if a License's\nauthor or steward has stated that a particular License generally should not be\nused, that would _not_ mean that the License's identifier is \"deprecated.\"\nRather, a License or LicenseAddition operator is typically marked as\n\"deprecated\" when it is determined that use of another identifier is\npreferable.",
        "metadata": {
          "name": "isDeprecatedLicenseId",
          "Nature": "DataProperty",
          "Range": "xsd:boolean",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Licensing/isDeprecatedLicenseId",
          "Domain": [
            "License"
          ]
        }
      },
      "isDeprecatedAdditionId": {
        "summary": "Specifies whether an additional text identifier has been marked as deprecated.",
        "description": "The isDeprecatedAdditionId property specifies whether an identifier for a\nLicenseAddition has been marked as deprecated. If the property is not defined,\nthen it is presumed to be false (i.e., not deprecated).\n\nIf the LicenseAddition is included on the SPDX Exceptions List, then\nthe `deprecatedVersion` property indicates on which version release of the\nExceptions List it was first marked as deprecated.\n\n\"Deprecated\" in this context refers to deprecating the use of the\n_identifier_, not the underlying license addition. In other words, even if a\nLicenseAddition's author or steward has stated that a particular\nLicenseAddition generally should not be used, that would _not_ mean that the\nLicenseAddition's identifier is \"deprecated.\" Rather, a LicenseAddition\noperator is typically marked as \"deprecated\" when it is determined that use of\nanother identifier is preferable.",
        "metadata": {
          "name": "isDeprecatedAdditionId",
          "Nature": "DataProperty",
          "Range": "xsd:boolean",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Licensing/isDeprecatedAdditionId",
          "Domain": [
            "LicenseAddition"
          ]
        }
      },
      "additionText": {
        "summary": "Identifies the full text of a LicenseAddition.",
        "description": "An additionText contains the plain text of the LicenseAddition, without\ntemplating or other similar markup.\n\nUsers of the additionText for a License can apply the SPDX Matching Guidelines\nwhen comparing it to another text for matching purposes.",
        "metadata": {
          "name": "additionText",
          "Nature": "DataProperty",
          "Range": "xsd:string",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Licensing/additionText",
          "Domain": [
            "LicenseAddition"
          ]
        }
      },
      "isFsfLibre": {
        "summary": "Specifies whether the License is listed as free by the\n[Free Software Foundation (FSF)](https://fsf.org).",
        "description": "isFsfLibre specifies whether the [Free Software Foundation FSF](https://fsf.org)\nhas listed this License as \"free\" in their commentary on licenses, located at\nthe time of this writing at https://www.gnu.org/licenses/license-list.en.html.\n\nA value of \"true\" indicates that the FSF has listed this License as _free_.\n\nA value of \"false\" indicates that the FSF has listed this License as _not free_.\n\nIf the isFsfLibre field is not specified, the SPDX data creator makes no\nassertions about whether the License is listed in the FSF's commentary.",
        "metadata": {
          "name": "isFsfLibre",
          "Nature": "DataProperty",
          "Range": "xsd:boolean",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Licensing/isFsfLibre",
          "Domain": [
            "License"
          ]
        }
      },
      "listVersionAdded": {
        "summary": "Specifies the SPDX License List version in which this ListedLicense or\nListedLicenseException identifier was first added.",
        "description": "A listVersionAdded for a ListedLicense or ListedLicenseException on the SPDX\nLicense List specifies which version release of the License List was the first\none in which it was included.",
        "metadata": {
          "name": "listVersionAdded",
          "Nature": "DataProperty",
          "Range": "xsd:string",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Licensing/listVersionAdded",
          "Domain": [
            "ListedLicense",
            "ListedLicenseException"
          ]
        }
      },
      "licenseExpression": {
        "summary": "A string in the license expression format.",
        "description": "Often a single license can be used to represent the licensing terms of a source code or binary file, but there are situations where a single license identifier is not sufficient. A common example is when software is offered under a choice of one or more licenses (e.g., GPL-2.0-only OR BSD-3-Clause). Another example is when a set of licenses is needed to represent a binary program constructed by compiling and linking two (or more) different source files each governed by different licenses (e.g., LGPL-2.1-only AND BSD-3-Clause).\n\nSPDX License Expressions provide a way for one to construct expressions that more accurately represent the licensing terms typically found in open source software source code. A license expression could be a single license identifier found on the SPDX License List; a user defined license reference denoted by the LicenseRef-idString; a license identifier combined with an SPDX exception; or some combination of license identifiers, license references and exceptions constructed using a small set of defined operators (e.g., AND, OR, WITH and +). We provide the definition of what constitutes a valid an SPDX License Expression in this section.",
        "metadata": {
          "name": "licenseExpression",
          "Nature": "DataProperty",
          "Range": "xsd:string",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Licensing/licenseExpression",
          "Domain": [
            "LicenseExpression"
          ]
        }
      },
      "obsoletedBy": {
        "summary": "Specifies the licenseId that is preferred to be used in place of a deprecated\nLicense or LicenseAddition.",
        "description": "An obsoletedBy value for a deprecated License or LicenseAddition specifies\nthe licenseId of the replacement License or LicenseAddition that is preferred\nto be used in its place. It should use the same format as specified for a\nlicenseId.\n\nThe License's or LicenseAddition's comment value may include more information\nabout the reason why the licenseId specified in the obsoletedBy value is\npreferred.",
        "metadata": {
          "name": "obsoletedBy",
          "Nature": "DataProperty",
          "Range": "xsd:string",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Licensing/obsoletedBy",
          "Domain": [
            "License",
            "LicenseAddition"
          ]
        }
      },
      "standardLicenseTemplate": {
        "summary": "Identifies the full text of a License, in SPDX templating format.",
        "description": "A standardLicenseTemplate contains a license template which describes\nsections of the License text which can be varied. See the Legacy Text Template\nformat section of the SPDX specification for format information.",
        "metadata": {
          "name": "standardLicenseTemplate",
          "Nature": "DataProperty",
          "Range": "xsd:string",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Licensing/standardLicenseTemplate",
          "Domain": [
            "License"
          ]
        }
      },
      "additionName": {
        "summary": "Identifies the full name of a LicenseAddition.",
        "description": "An additionName contains the full name of a LicenseAddition, preferably using\nthe title found in the applicable license addition text or file, or as\notherwise specified by the LicenseAddition's author or steward.\n\nWhen no such title is specified, using a name from another well-known source or list\nof licenses additions (such as OSI or Fedora) is suggested.\n\nIf no official or common name is known, any name may be used to aid in\ndistinguishing the LicenseAddition from other LicenseAdditions.",
        "metadata": {
          "name": "additionName",
          "Nature": "DataProperty",
          "Range": "xsd:string",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Licensing/additionName"
        }
      },
      "standardAdditionTemplate": {
        "summary": "Identifies the full text of a LicenseAddition, in SPDX templating format.",
        "description": "A standardAdditionTemplate contains a license addition template which describes\nsections of the LicenseAddition text which can be varied. See the Legacy Text\nTemplate format section of the SPDX specification for format information.",
        "metadata": {
          "name": "standardAdditionTemplate",
          "Nature": "DataProperty",
          "Range": "xsd:string",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Licensing/standardAdditionTemplate",
          "Domain": [
            "LicenseAddition"
          ]
        }
      },
      "licenseComment": {
        "summary": "Identifies general comments about the License.",
        "description": "A licenseComment describes general factual information about the License. It\nshould not contain information (or links to information) that includes any kind\nof interpretation about the meaning or effect of the License, even if written\nby the license's author.\n\nExamples of information for a licenseComment may include the following:\n\n* If the License's identifier is deprecated, it may briefly explain the reason\n  for deprecation.\n* It may include the date of release, if identified, for Licenses with multiple\n  versions.\n* It may include links to other official language translations for the License.\n* For LicenseAdditions, it may include a reference to the License(s) with\n  which this additional text is typically used.",
        "metadata": {
          "name": "licenseComment",
          "Nature": "DataProperty",
          "Range": "xsd:string",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Licensing/licenseComment"
        }
      },
      "deprecatedVersion": {
        "summary": "Specifies the SPDX License List version in which this license or exception\nidentifier was deprecated.",
        "description": "A deprecatedVersion for a ListedLicense or ListedLicenseException on the SPDX\nLicense List specifies which version release of the License List was the first\none in which it was marked as deprecated.",
        "metadata": {
          "name": "deprecatedVersion",
          "Nature": "DataProperty",
          "Range": "xsd:string",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Licensing/deprecatedVersion",
          "Domain": [
            "ListedLicense",
            "ListedLicenseException"
          ]
        }
      },
      "licenseId": {
        "summary": "Provides a short, unique identifier to refer to a License.",
        "description": "A licenseId contains a human-readable, short-form license identifier for a\nLicense. It may only include letters, numbers, period (\".\") and hyphen (\"-\")\ncharacters.\n\nFor a ListedLicense, the licenseId will be as specified on the\n[SPDX License List](https://spdx.org/licenses) for the particular license.\n\nFor a CustomLicense, the short-form license identifer must begin with the\nprefix `LicenseRef-` and must be unique within the applicable SPDX namespace.\nThe short-form license ID may be preceded by an SPDX namespace or a\nfully-qualified URI prefix.",
        "metadata": {
          "name": "licenseId",
          "Nature": "DataProperty",
          "Range": "xsd:string",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Licensing/licenseId"
        }
      },
      "additionId": {
        "summary": "Provides a short, unique identifier to refer to a LicenseAddition.",
        "description": "An additionId contains a human-readable, short-form identifier for a\nLicenseAddition. It may only include letters, numbers, period (\".\") and\nhyphen (\"-\") characters.\n\nFor a ListedLicenseException, the licenseId will be as specified on the\n[SPDX Exceptions List](https://spdx.org/licenses/exceptions-index.html) for the\nparticular exception.\n\nFor a CustomLicenseAddition, the short-form identifier must begin with the\nprefix `AdditionRef-` and must be unique within the applicable SPDX namespace.\nThe short-form identifier may be preceded by an SPDX namespace or a\nfully-qualified URI prefix.",
        "metadata": {
          "name": "additionId",
          "Nature": "DataProperty",
          "Range": "xsd:string",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Licensing/additionId"
        }
      },
      "isOsiApproved": {
        "summary": "Specifies whether the License is listed as approved by the\n[Open Source Initiative (OSI)](https://opensource.org).",
        "description": "isOsiApproved specifies whether the [Open Source Initiative (OSI)](https://opensource.org)\nhas listed this License as \"approved\" in their list of OSI Approved Licenses,\nlocated at the time of this writing at https://opensource.org/licenses/.\n\nA value of \"true\" indicates that the OSI has listed this License as approved.\n\nA value of \"false\" indicates that the OSI has not listed this License as\napproved.\n\nIf the isOsiApproved field is not specified, the SPDX data creator makes no\nassertions about whether the License is approved by the OSI.",
        "metadata": {
          "name": "isOsiApproved",
          "Nature": "DataProperty",
          "Range": "xsd:boolean",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Licensing/isOsiApproved",
          "Domain": [
            "License"
          ]
        }
      },
      "additionComment": {
        "summary": "Identifies general comments about the LicenseAddition.",
        "description": "An additionComment for a LicenseAddition describes general factual information\nabout the LicenseAddition. It should not contain information (or links to\ninformation) that includes any kind of interpretation about the meaning or\neffect of the License, even if written by the license addition's author.\n\nExamples of information for an additionComment may include the following:\n\n* If the LicenseAddition's identifier is deprecated, it may briefly explain the\n  reason for deprecation.\n* It may include the date of release, if identified, for LicenseAdditions with\n  multiple versions.\n* It may include links to other official language translations for the\n  LicenseAddition.\n* It may include a reference to the License(s) with which this LicenseAddition\n  is typically used.",
        "metadata": {
          "name": "additionComment",
          "Nature": "DataProperty",
          "Range": "xsd:string",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Licensing/additionComment"
        }
      }
    },
    "vocabs": {}
  },
  "AI": {
    "name": "AI",
    "classes": {
      "AIPackage": {
        "summary": "Provides information about the fields in the AI package profile.",
        "description": "Metadata information that can be added to a package to describe an AI application or trained AI model.\nExternal property restriction on /Core/Artifact/suppliedBy: minCount: 1\nExternal property restriction on /Software/Package/downloadLocation: minCount: 1\nExternal property restriction on /Software/Package/packageVersion: minCount: 1\nExternal property restriction on /Software/SoftwareArtifact/primaryPurpose: minCount: 1\nExternal property restriction on /Core/Artifact/releaseTime: minCount: 1",
        "metadata": {
          "name": "AIPackage",
          "SubclassOf": "/Software/Package",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/AI/AIPackage"
        },
        "properties": {
          "energyConsumption": {
            "type": "xsd:string",
            "minCount": "0",
            "maxCount": "1"
          },
          "standardCompliance": {
            "type": "xsd:string",
            "minCount": "0",
            "maxCount": "*"
          },
          "limitation": {
            "type": "xsd:string",
            "minCount": "0",
            "maxCount": "1"
          },
          "typeOfModel": {
            "type": "xsd:string",
            "minCount": "0",
            "maxCount": "*"
          },
          "informationAboutTraining": {
            "type": "xsd:string",
            "minCount": "0",
            "maxCount": "1"
          },
          "informationAboutApplication": {
            "type": "xsd:string",
            "minCount": "0",
            "maxCount": "1"
          },
          "hyperparameter": {
            "type": "/Core/DictionaryEntry",
            "minCount": "0",
            "maxCount": "*"
          },
          "modelDataPreprocessing": {
            "type": "xsd:string",
            "minCount": "0",
            "maxCount": "*"
          },
          "modelExplainability": {
            "type": "xsd:string",
            "minCount": "0",
            "maxCount": "*"
          },
          "sensitivePersonalInformation": {
            "type": "PresenceType",
            "minCount": "0",
            "maxCount": "1"
          },
          "metricDecisionThreshold": {
            "type": "/Core/DictionaryEntry",
            "minCount": "0",
            "maxCount": "*"
          },
          "metric": {
            "type": "/Core/DictionaryEntry",
            "minCount": "0",
            "maxCount": "*"
          },
          "domain": {
            "type": "xsd:string",
            "minCount": "0",
            "maxCount": "*"
          },
          "autonomyType": {
            "type": "PresenceType",
            "minCount": "0",
            "maxCount": "1"
          },
          "safetyRiskAssessment": {
            "type": "SafetyRiskAssessmentType",
            "minCount": "0",
            "maxCount": "1"
          }
        },
        "externalPropertyRestrictions": {
          "/Core/Artifact/suppliedBy": {
            "minCount": "1",
            "maxCount": "*"
          },
          "/Software/Package/downloadLocation": {
            "minCount": "1",
            "maxCount": "*"
          },
          "/Software/Package/packageVersion": {
            "minCount": "1",
            "maxCount": "*"
          },
          "/Software/SoftwareArtifact/primaryPurpose": {
            "minCount": "1",
            "maxCount": "*"
          },
          "/Core/Artifact/releaseTime": {
            "minCount": "1",
            "maxCount": "*"
          }
        }
      }
    },
    "properties": {
      "safetyRiskAssessment": {
        "summary": "Categorizes safety risk impact of AI software.",
        "description": "SafetyRiskAssessment categorizes the safety risk impact of the AI software\nin accordance with Article 20 of [EC Regulation No 765/2008](https://ec.europa.eu/docsroom/documents/17107/attachments/1/translations/en/renditions/pdf).",
        "metadata": {
          "name": "safetyRiskAssessment",
          "Nature": "ObjectProperty",
          "Range": "SafetyRiskAssessmentType",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/AI/safetyRiskAssessment",
          "Domain": [
            "AIPackage"
          ]
        }
      },
      "typeOfModel": {
        "summary": "Records the type of the model used in the AI software.",
        "description": "TypeOfModel records the type of the AI model(s) used in the software. \nFor instance, if it is a supervised model, unsupervised model, reinforcement learning model or a combination of those.",
        "metadata": {
          "name": "typeOfModel",
          "Nature": "DataProperty",
          "Range": "xsd:string",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/AI/typeOfModel",
          "Domain": [
            "AIPackage"
          ]
        }
      },
      "hyperparameter": {
        "summary": "Records a hyperparameter used to build the AI model contained in the AI package.",
        "description": "This field records a hyperparameter value.\nHyperparameters are parameters of the machine learning model that are used to control the learning process,\nfor example the optimization and learning rate used during the training of the model.",
        "metadata": {
          "name": "hyperparameter",
          "Nature": "ObjectProperty",
          "Range": "/Core/DictionaryEntry",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/AI/hyperparameter",
          "Domain": [
            "AIPackage"
          ]
        }
      },
      "informationAboutTraining": {
        "summary": "Describes relevant information about different steps of the training process.",
        "description": "InformationAboutTraining describes the specific steps involved in the training of the AI model.\nFor example, it can be specified whether supervised fine-tuning \nor active learning is used as part of training the model.",
        "metadata": {
          "name": "informationAboutTraining",
          "Nature": "DataProperty",
          "Range": "xsd:string",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/AI/informationAboutTraining",
          "Domain": [
            "AIPackage"
          ]
        }
      },
      "sensitivePersonalInformation": {
        "summary": "Records if sensitive personal information is used during model training.",
        "description": "SensitivePersonalInformation notes if sensitive personal information\nis used in the training or inference of the AI models.\nThis might include biometric data, addresses or other data that can be used to infer a person's identity.",
        "metadata": {
          "name": "sensitivePersonalInformation",
          "Nature": "ObjectProperty",
          "Range": "PresenceType",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/AI/sensitivePersonalInformation",
          "Domain": [
            "AIPackage"
          ]
        }
      },
      "modelDataPreprocessing": {
        "summary": "Describes all the preprocessing steps applied to the training data before the model training.",
        "description": "ModelDataPreprocessing is a free form text that describes the preprocessing steps\napplied to the training data before training of the model(s) contained in the AI software.",
        "metadata": {
          "name": "modelDataPreprocessing",
          "Nature": "DataProperty",
          "Range": "xsd:string",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/AI/modelDataPreprocessing",
          "Domain": [
            "AIPackage"
          ]
        }
      },
      "energyConsumption": {
        "summary": "Indicates the amount of energy consumed to build the AI package.",
        "description": "EnergyConsumption captures the amount of energy needed to train and operate the AI model. \nThis value is also known as training energy consumption or inference energy consumption.",
        "metadata": {
          "name": "energyConsumption",
          "Nature": "DataProperty",
          "Range": "xsd:string",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/AI/energyConsumption",
          "Domain": [
            "AIPackage"
          ]
        }
      },
      "domain": {
        "summary": "Captures the domain in which the AI package can be used.",
        "description": "Domain describes the domain in which the AI model contained in the AI software\ncan be expected to operate successfully. Examples include computer vision, natural language etc.",
        "metadata": {
          "name": "domain",
          "Nature": "DataProperty",
          "Range": "xsd:string",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/AI/domain",
          "Domain": [
            "AIPackage"
          ]
        }
      },
      "standardCompliance": {
        "summary": "Captures a standard that is being complied with.",
        "description": "StandardCompliance captures a standard that the AI software complies with. \nThis includes both published and unpublished standards, for example ISO, IEEE, ETSI etc. \nThe standard could (but not necessarily have to) be used to satisfy a legal or regulatory requirement.",
        "metadata": {
          "name": "standardCompliance",
          "Nature": "DataProperty",
          "Range": "xsd:string",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/AI/standardCompliance",
          "Domain": [
            "AIPackage"
          ]
        }
      },
      "metric": {
        "summary": "Records the measurement of prediction quality of the AI model.",
        "description": "Metric records the measurement with which the AI model was evaluated. \nThis makes statements about the prediction quality including uncertainty,\naccuracy, characteristics of the tested population, quality, fairness, explainability, robustness etc.",
        "metadata": {
          "name": "metric",
          "Nature": "ObjectProperty",
          "Range": "/Core/DictionaryEntry",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/AI/metric",
          "Domain": [
            "AIPackage"
          ]
        }
      },
      "metricDecisionThreshold": {
        "summary": "Captures the threshold that was used for computation of a metric described in the metric field.",
        "description": "Each metric might be computed based on a decision threshold. \nFor instance, precision or recall is typically computed by checking\nif the probability of the outcome is larger than 0.5.\nEach decision threshold should match with a metric field defined in the AI Package.",
        "metadata": {
          "name": "metricDecisionThreshold",
          "Nature": "ObjectProperty",
          "Range": "/Core/DictionaryEntry",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/AI/metricDecisionThreshold",
          "Domain": [
            "AIPackage"
          ]
        }
      },
      "modelExplainability": {
        "summary": "Describes methods that can be used to explain the model.",
        "description": "ModelExplainability is a free form text that lists the different explainability mechanisms\n(such as SHAP, or other model specific explainability mechanisms) that can be used to explain the model.",
        "metadata": {
          "name": "modelExplainability",
          "Nature": "DataProperty",
          "Range": "xsd:string",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/AI/modelExplainability",
          "Domain": [
            "AIPackage"
          ]
        }
      },
      "autonomyType": {
        "summary": "States if a human is involved in the decisions of the AI software.",
        "description": "AutonomyType indicates if a human is involved in any of the decisions of the AI software\nor if that software is fully automatic.",
        "metadata": {
          "name": "autonomyType",
          "Nature": "ObjectProperty",
          "Range": "PresenceType",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/AI/autonomyType",
          "Domain": [
            "AIPackage"
          ]
        }
      },
      "informationAboutApplication": {
        "summary": "Provides relevant information about the AI software, not including the model description.",
        "description": "InformationAboutApplication describes any relevant information in free form text about \nhow the AI model is used inside the software, as well as any relevant pre-processing steps, third party APIs etc.",
        "metadata": {
          "name": "informationAboutApplication",
          "Nature": "DataProperty",
          "Range": "xsd:string",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/AI/informationAboutApplication",
          "Domain": [
            "AIPackage"
          ]
        }
      },
      "limitation": {
        "summary": "Captures a limitation of the AI software.",
        "description": "Limitation captures a limitation of the AI Package (or of the AI models present in the AI package),\nexpressed as free form text. Note that this is not guaranteed to be exhaustive.\nFor instance, a limitation might be that the AI package cannot be used on datasets from a certain demography.",
        "metadata": {
          "name": "limitation",
          "Nature": "DataProperty",
          "Range": "xsd:string",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/AI/limitation",
          "Domain": [
            "AIPackage"
          ]
        }
      }
    },
    "vocabs": {
      "SafetyRiskAssessmentType": {
        "summary": "Categories of safety risk impact of the application.",
        "description": "Lists the different safety risk type values that can be used to describe the safety risk of AI software\naccording to [Article 20 of Regulation 765/2008/EC](https://ec.europa.eu/docsroom/documents/17107/attachments/1/translations/en/renditions/pdf).",
        "metadata": {
          "name": "SafetyRiskAssessmentType",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/AI/SafetyRiskAssessmentType"
        },
        "entries": {
          "serious": "The highest level of risk posed by an AI software.",
          "high": "The second-highest level of risk posed by an AI software.",
          "medium": "The third-highest level of risk posed by an AI software.",
          "low": "Low/no risk is posed by the AI software."
        }
      },
      "PresenceType": {
        "summary": "Categories of presence or absence.",
        "description": "This type is used to indicate if a given field is present or absent or unknown.",
        "metadata": {
          "name": "PresenceType",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/AI/PresenceType"
        },
        "entries": {
          "yes": "Indicates presence of the field.",
          "no": "Indicates absence of the field.",
          "noAssertion": "Makes no assertion about the field."
        }
      }
    }
  },
  "Security": {
    "name": "Security",
    "classes": {
      "VexNotAffectedVulnAssessmentRelationship": {
        "summary": "Links a vulnerability and one or more elements designating the latter as products\nnot affected by the vulnerability.",
        "description": "VexNotAffectedVulnAssessmentRelationship connects a vulnerability and a number\nof elements designating them as products not affected by the vulnerability.\nThis relationship corresponds to the VEX not_affected status.\n\n**Constraints**\n\nWhen linking elements using a VexNotVulnAffectedAssessmentRelationship, the\nfollowing requirements must be observed:\n\n* Relating elements with a VexNotAffectedVulnAssessmentRelationship is restricted\nto the doesNotAffect relationship type.\n* The from: end of the relationship must be a /Security/Vulnerability classed\nelement.\n* Both impactStatement and justificationType properties have a cardinality of\n0..1 making them optional. Nevertheless, to produce a valid VEX not_affected\nstatement, one of them MUST be defined. This is specified in the Minimum Elements\nfor VEX.\n\n**Syntax**\n\n```json\n{\n  \"@type\": \"VexNotAffectedVulnAssessmentRelationship\",\n  \"@id\": \"urn:spdx.dev:vex-not-affected-1\",\n  \"relationshipType\": \"doesNotAffect\",\n  \"from\": \"urn:spdx.dev:vuln-cve-2020-28498\",\n  \"to\": [\"urn:product-acme-application-1.3\"],\n  \"assessedElement\": \"urn:npm-elliptic-6.5.2\",\n  \"justificationType\": \"componentNotPresent\",\n  \"impactStatement\": \"Not using this vulnerable part of this library.\",\n  \"suppliedBy\": [\"urn:spdx.dev:agent-jane-doe\"],\n  \"publishedTime\": \"2021-03-09T11:04:53Z\"\n}\n```",
        "metadata": {
          "name": "VexNotAffectedVulnAssessmentRelationship",
          "SubclassOf": "VexVulnAssessmentRelationship",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Security/VexNotAffectedVulnAssessmentRelationship"
        },
        "properties": {
          "justificationType": {
            "type": "VexJustificationType",
            "minCount": "0",
            "maxCount": "1"
          },
          "impactStatement": {
            "type": "xsd:string",
            "minCount": "0",
            "maxCount": "1"
          },
          "impactStatementTime": {
            "type": "/Core/DateTime",
            "minCount": "0",
            "maxCount": "1"
          }
        },
        "externalPropertyRestrictions": {}
      },
      "SsvcVulnAssessmentRelationship": {
        "summary": "Provides an SSVC assessment for a vulnerability.",
        "description": "An SsvcVulnAssessmentRelationship describes the decision made using the\nStakeholder-Specific Vulnerability Categorization (SSVC) decision tree as\ndefined on [https://www.cisa.gov/stakeholder-specific-vulnerability-categorization-ssvc](https://www.cisa.gov/stakeholder-specific-vulnerability-categorization-ssvc).\nIt is intended to communicate the results of using the CISA SSVC Calculator.\n\n**Constraints**\n\n- The relationship type must be set to hasAssessmentFor.\n\n**Syntax**\n\n```json\n{\n  \"@type\": \"SsvcVulnAssessmentRelationship\",\n  \"@id\": \"urn:spdx.dev:ssvc-1\",\n  \"relationshipType\": \"hasAssessmentFor\",\n  \"decisionType\": \"act\",\n  \"from\": \"urn:spdx.dev:vuln-cve-2020-28498\",\n  \"to\": [\"urn:product-acme-application-1.3\"],\n  \"assessedElement\": \"urn:npm-elliptic-6.5.2\",\n  \"suppliedBy\": [\"urn:spdx.dev:agent-jane-doe\"],\n  \"publishedTime\": \"2021-03-09T11:04:53Z\"\n}\n```",
        "metadata": {
          "name": "SsvcVulnAssessmentRelationship",
          "SubclassOf": "VulnAssessmentRelationship",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Security/SsvcVulnAssessmentRelationship"
        },
        "properties": {
          "decisionType": {
            "type": "SsvcDecisionType",
            "minCount": "1",
            "maxCount": "1"
          }
        },
        "externalPropertyRestrictions": {}
      },
      "VexFixedVulnAssessmentRelationship": {
        "summary": "Links a vulnerability and elements representing products (in the VEX sense) where\na fix has been applied and are no longer affected.",
        "description": "VexFixedVulnAssessmentRelationship links a vulnerability to a number of elements\nrepresenting VEX products where a vulnerability has been fixed and are no longer\naffected. It represents the VEX fixed status.\n\n**Constraints**\n\nWhen linking elements using a VexFixedVulnAssessmentRelationship, the following\nrequirements must be observed:\n\n- Elements linked with a VulnVexFixedAssessmentRelationship are constrained to\nusing the fixedIn relationship type.\n- The from: end of the relationship must ve a /Security/Vulnerability classed\nelement.\n\n**Syntax**\n\n```json\n{\n  \"@type\": \"VexFixedVulnAssessmentRelationship\",\n  \"@id\": \"urn:spdx.dev:vex-fixed-in-1\",\n  \"relationshipType\": \"fixedIn\",\n  \"from\": \"urn:spdx.dev:vuln-cve-2020-28498\",\n  \"to\": [\"urn:product-acme-application-1.3\"],\n  \"assessedElement\": \"urn:npm-elliptic-6.5.4\",\n  \"suppliedBy\": [\"urn:spdx.dev:agent-jane-doe\"],\n  \"publishedTime\": \"2021-03-09T11:04:53Z\"\n}\n```",
        "metadata": {
          "name": "VexFixedVulnAssessmentRelationship",
          "SubclassOf": "VexVulnAssessmentRelationship",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Security/VexFixedVulnAssessmentRelationship"
        },
        "properties": {},
        "externalPropertyRestrictions": {}
      },
      "VexVulnAssessmentRelationship": {
        "summary": "Asbtract ancestor class for all VEX relationships",
        "description": "VexVulnAssessmentRelationship is an abstract subclass that defined the common\nproperties shared by all the SPDX-VEX status relationships. \n\n**Constraints**\n\nWhen linking elements using a VexVulnAssessmentRelationship, the following\nrequirements must be observed:\n\n- The from: end must be a /Security/Vulnerability classed element\n- The to: end must point to elements representing the VEX _products_. To\nspecify a different element where the vulnerability was detected, the VEX\nrelationship can optionally specify _subcomponents_ using the assessedElement\nproperty.\n\nVEX inherits information from the document level down to its statements. When a\nstatement is missing information it can be completed by reading the equivalent \nfield from the containing document. For example, if a VEX relationship is\nmissing data in its createdBy property, tools must consider the entity\nlisted in the CreationInfo section of the document as the VEX author.\nIn the same way, when a VEX relationship does not have a created property,\nthe document's date must be considered as authoritative.",
        "metadata": {
          "name": "VexVulnAssessmentRelationship",
          "SubclassOf": "VulnAssessmentRelationship",
          "Instantiability": "Abstract",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Security/VexVulnAssessmentRelationship"
        },
        "properties": {
          "vexVersion": {
            "type": "xsd:string",
            "minCount": "0",
            "maxCount": "1"
          },
          "statusNotes": {
            "type": "xsd:string",
            "minCount": "0",
            "maxCount": "1"
          }
        },
        "externalPropertyRestrictions": {}
      },
      "CvssV3VulnAssessmentRelationship": {
        "summary": "Provides a CVSS version 3.x assessment for a vulnerability.",
        "description": "A CvssV3VulnAssessmentRelationship relationship describes the determined score,\nseverity, and vector of a vulnerability using version 3.1 of the Common\nVulnerability Scoring System (CVSS) as defined on \n[https://www.first.org/cvss/v3.1/specification-document](https://www.first.org/cvss/v3.1/specification-document). It is intented to communicate the results of using a CVSS calculator.\n\n**Constraints**\n\n- The value of severity must be one of 'none', 'low', 'medium', 'high' or 'critical'.\n- Absence of the property shall be interpreted as 'none'.\n- The relationship type must be set to hasAssessmentFor.\n\n**Syntax**\n\n```json\n{\n  \"@type\": \"CvssV3VulnAssessmentRelationship\",\n  \"@id\": \"urn:spdx.dev:cvssv3-cve-2020-28498\",\n  \"relationshipType\": \"hasAssessmentFor\",\n  \"severity\": \"medium\",\n  \"score\": 6.8,\n  \"vector\": \"CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:C/C:H/I:N/A:N\",\n  \"from\": \"urn:spdx.dev:vuln-cve-2020-28498\",\n  \"to\": [\"urn:product-acme-application-1.3\"],\n  \"assessedElement\": \"urn:npm-elliptic-6.5.2\",\n  \"externalReferences\": [\n    {\n      \"@type\": \"ExternalReference\",\n      \"externalReferenceType\": \"securityAdvisory\",\n      \"locator\": \"https://nvd.nist.gov/vuln/detail/CVE-2020-28498\"\n    },\n    {\n      \"@type\": \"ExternalReference\",\n      \"externalReferenceType\": \"securityAdvisory\",\n      \"locator\": \"https://snyk.io/vuln/SNYK-JS-ELLIPTIC-1064899\"\n    },\n    {\n      \"@type\": \"ExternalReference\",\n      \"externalReferenceType\": \"securityFix\",\n      \"locator\": \"https://github.com/indutny/elliptic/commit/441b742\"\n    }\n  ],\n  \"suppliedBy\": [\"urn:spdx.dev:agent-my-security-vendor\"],\n  \"publishedTime\": \"2023-05-06T10:06:13Z\"\n},\n{\n  \"@type\": \"Relationship\",\n  \"@id\": \"urn:spdx.dev:vulnAgentRel-1\",\n  \"relationshipType\": \"publishedBy\",\n  \"from\": \"urn:spdx.dev:cvssv3-cve-2020-28498\",\n  \"to\": \"urn:spdx.dev:agent-snyk\",\n  \"startTime\": \"2021-03-08T16:06:50Z\"\n}\n```",
        "metadata": {
          "name": "CvssV3VulnAssessmentRelationship",
          "SubclassOf": "VulnAssessmentRelationship",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Security/CvssV3VulnAssessmentRelationship"
        },
        "properties": {
          "score": {
            "type": "xsd:decimal",
            "minCount": "1",
            "maxCount": "1"
          },
          "severity": {
            "type": "xsd:string",
            "minCount": "0",
            "maxCount": "1"
          },
          "vector": {
            "type": "xsd:string",
            "minCount": "0",
            "maxCount": "1"
          }
        },
        "externalPropertyRestrictions": {}
      },
      "VulnAssessmentRelationship": {
        "summary": "Abstract ancestor class for all vulnerability assessments",
        "description": "VulnAssessmentRelationship is the ancestor class common to all vulnerability\nassessment relationships. It factors out the common properties shared by them.\nExternal property restriction on /Core/Relationship/to: minCount: 1",
        "metadata": {
          "name": "VulnAssessmentRelationship",
          "SubclassOf": "/Core/Relationship",
          "Instantiability": "Abstract",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Security/VulnAssessmentRelationship"
        },
        "properties": {
          "assessedElement": {
            "type": "/Core/Element",
            "minCount": "0",
            "maxCount": "1"
          },
          "publishedTime": {
            "type": "/Core/DateTime",
            "minCount": "0",
            "maxCount": "1"
          },
          "suppliedBy": {
            "type": "/Core/Agent",
            "minCount": "0",
            "maxCount": "1"
          },
          "modifiedTime": {
            "type": "/Core/DateTime",
            "minCount": "0",
            "maxCount": "1"
          },
          "withdrawnTime": {
            "type": "/Core/DateTime",
            "minCount": "0",
            "maxCount": "1"
          }
        },
        "externalPropertyRestrictions": {
          "/Core/Relationship/to": {
            "minCount": "1",
            "maxCount": "*"
          }
        }
      },
      "Vulnerability": {
        "summary": "Specifies a vulnerability and its associated information.",
        "description": "Specifies a vulnerability and its associated information.\n\n**Syntax**\n\n```json\n{\n  \"@type\": \"Vulnerability\",\n  \"@id\": \"urn:spdx.dev:vuln-1\",\n  \"summary\": \"Use of a Broken or Risky Cryptographic Algorithm\",\n  \"description\": \"The npm package `elliptic` before version 6.5.4 are vulnerable to Cryptographic Issues via the secp256k1 implementation in elliptic/ec/key.js. There is no check to confirm that the public key point passed into the derive function actually exists on the secp256k1 curve. This results in the potential for the private key used in this implementation to be revealed after a number of ECDH operations are performed.\",      \n  \"modified\": \"2021-03-08T16:02:43Z\",\n  \"published\": \"2021-03-08T16:06:50Z\",\n  \"externalIdentifiers\": [\n    {\n      \"@type\": \"ExternalIdentifier\",\n      \"externalIdentifierType\": \"cve\",\n      \"identifier\": \"CVE-2020-2849\",\n      \"identifierLocator\": [\n        \"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-28498\",\n        \"https://www.cve.org/CVERecord?id=CVE-2020-28498\"\n      ],\n      \"issuingAuthority\": \"urn:spdx.dev:agent-cve.org\"\n    },\n    {\n      \"type\": \"ExternalIdentifier\",\n      \"externalIdentifierType\": \"securityOther\",\n      \"identifier\": \"GHSA-r9p9-mrjm-926w\",\n      \"identifierLocator\": \"https://github.com/advisories/GHSA-r9p9-mrjm-926w\"\n    },\n    {\n      \"type\": \"ExternalIdentifier\",\n      \"externalIdentifierType\": \"securityOther\",\n      \"identifier\": \"SNYK-JS-ELLIPTIC-1064899\",\n      \"identifierLocator\": \"https://security.snyk.io/vuln/SNYK-JS-ELLIPTIC-1064899\"\n    }\n  ],\n  \"externalReferences\": [\n    {\n        \"@type\": \"ExternalReference\",\n        \"externalReferenceType\": \"securityAdvisory\",\n        \"locator\": \"https://nvd.nist.gov/vuln/detail/CVE-2020-28498\"\n    },\n    {\n      \"@type\": \"ExternalReference\",\n      \"externalReferenceType\": \"securityAdvisory\",\n      \"locator\": \"https://ubuntu.com/security/CVE-2020-28498\"\n    },\n    {\n      \"@type\": \"ExternalReference\",\n      \"externalReferenceType\": \"securityOther\",\n      \"locator\": \"https://github.com/indutny/elliptic/pull/244/commits\"\n    },\n    {\n      \"@type\": \"ExternalReference\",\n      \"externalReferenceType\": \"securityOther\",\n      \"locator\": \"https://github.com/christianlundkvist/blog/blob/master/2020_05_26_secp256k1_twist_attacks/secp256k1_twist_attacks.md\"\n    }\n  ]\n},\n{\n  \"@type\": \"Relationship\",\n  \"@id\": \"urn:spdx.dev:vulnRelationship-1\",\n  \"relationshipType\": \"hasAssociatedVulnerability\",\n  \"from\": \"urn:npm-elliptic-6.5.2\",\n  \"to\": [\"urn:spdx.dev:vuln-1\"],\n  \"startTime\": \"2021-03-08T16:06:50Z\"\n},\n{\n  \"@type\": \"Relationship\",\n  \"@id\": \"urn:spdx.dev:vulnAgentRel-1\",  \n  \"relationshipType\": \"publishedBy\",  \n  \"from\": \"urn:spdx.dev:vuln-1\",\n  \"to\": [\"urn:spdx.dev:agent-snyk\"],\n  \"startTime\": \"2021-03-08T16:06:50Z\"\n}\n```",
        "metadata": {
          "name": "Vulnerability",
          "SubclassOf": "/Core/Element",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Security/Vulnerability"
        },
        "properties": {
          "publishedTime": {
            "type": "/Core/DateTime",
            "minCount": "0",
            "maxCount": "1"
          },
          "modifiedTime": {
            "type": "/Core/DateTime",
            "minCount": "0",
            "maxCount": "1"
          },
          "withdrawnTime": {
            "type": "/Core/DateTime",
            "minCount": "0",
            "maxCount": "1"
          }
        },
        "externalPropertyRestrictions": {}
      },
      "CvssV2VulnAssessmentRelationship": {
        "summary": "Provides a CVSS version 2.0 assessment for a vulnerability.",
        "description": "A CvssV2VulnAssessmentRelationship relationship describes the determined score and vector of a vulnerability using version 2.0 of the Common Vulnerability Scoring System\n(CVSS) as defined on [https://www.first.org/cvss/v2/guide](https://www.first.org/cvss/v2/guide). It is intented to communicate the results of using a CVSS calculator.\n\n**Constraints**\n\n- The value of severity must be one of 'low', 'medium' or 'high'\n- The relationship type must be set to hasAssessmentFor.\n\n**Syntax**\n\n```json\n{\n  \"@type\": \"CvssV2VulnAssessmentRelationship\",\n  \"@id\": \"urn:spdx.dev:cvssv2-cve-2020-28498\",\n  \"relationshipType\": \"hasAssessmentFor\",\n  \"score\": 4.3,\n  \"vector\": \"(AV:N/AC:M/Au:N/C:P/I:N/A:N)\",\n  \"severity\": \"low\",\n  \"from\": \"urn:spdx.dev:vuln-cve-2020-28498\",\n  \"to\": [\"urn:product-acme-application-1.3\"],\n  \"assessedElement\": \"urn:npm-elliptic-6.5.2\",\n  \"externalReferences\": [\n    {\n      \"@type\": \"ExternalReference\",\n      \"externalReferenceType\": \"securityAdvisory\",\n      \"locator\": \"https://nvd.nist.gov/vuln/detail/CVE-2020-28498\"\n    },\n    {\n      \"@type\": \"ExternalReference\",\n      \"externalReferenceType\": \"securityAdvisory\",\n      \"locator\": \"https://snyk.io/vuln/SNYK-JS-ELLIPTIC-1064899\"\n    },\n    {\n      \"@type\": \"ExternalReference\",\n      \"externalReferenceType\": \"securityFix\",\n      \"locator\": \"https://github.com/indutny/elliptic/commit/441b742\"\n    }\n  ],\n  \"suppliedBy\": [\"urn:spdx.dev:agent-my-security-vendor\"],\n  \"publishedTime\": \"2023-05-06T10:06:13Z\"\n},\n{\n  \"@type\": \"Relationship\",\n  \"@id\": \"urn:spdx.dev:vulnAgentRel-1\",  \n  \"relationshipType\": \"publishedBy\",  \n  \"from\": \"urn:spdx.dev:cvssv2-cve-2020-28498\",\n  \"to\": [\"urn:spdx.dev:agent-snyk\"],\n  \"startTime\": \"2021-03-08T16:06:50Z\"\n}\n```",
        "metadata": {
          "name": "CvssV2VulnAssessmentRelationship",
          "SubclassOf": "VulnAssessmentRelationship",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Security/CvssV2VulnAssessmentRelationship"
        },
        "properties": {
          "score": {
            "type": "xsd:decimal",
            "minCount": "1",
            "maxCount": "1"
          },
          "severity": {
            "type": "xsd:string",
            "minCount": "0",
            "maxCount": "1"
          },
          "vector": {
            "type": "xsd:string",
            "minCount": "0",
            "maxCount": "1"
          }
        },
        "externalPropertyRestrictions": {}
      },
      "VexAffectedVulnAssessmentRelationship": {
        "summary": "Connects a vulnerability and an element designating the element as a product\naffected by the vulnerability.",
        "description": "VexAffectedVulnAssessmentRelationship connects a vulnerability and a number\nof elements. The relationship marks these elements as products affected by the\nvulnerability. This relationship corresponds to the VEX affected status.\n\n**Constraints**\n\nWhen linking elements using a VexAffectedVulnAssessmentRelationship, the\nfollowing requirements must be observed:\n\n- Elements linked with a VulnVexAffectedAssessmentRelationship are constrained\nto the affects relationship type.\n\n**Syntax**\n\n```json\n{\n  \"@type\": \"VexAffectedVulnAssessmentRelationship\",\n  \"@id\": \"urn:spdx.dev:vex-affected-1\",\n  \"relationshipType\": \"affects\",\n  \"from\": \"urn:spdx.dev:vuln-cve-2020-28498\",\n  \"to\": [\"urn:product-acme-application-1.3\"],\n  \"assessedElement\": \"urn:npm-elliptic-6.5.2\",\n  \"actionStatement\": \"Upgrade to version 1.4 of ACME application.\",\n  \"suppliedBy\": [\"urn:spdx.dev:agent-jane-doe\"],\n  \"publishedTime\": \"2021-03-09T11:04:53Z\"\n}\n```",
        "metadata": {
          "name": "VexAffectedVulnAssessmentRelationship",
          "SubclassOf": "VexVulnAssessmentRelationship",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Security/VexAffectedVulnAssessmentRelationship"
        },
        "properties": {
          "actionStatement": {
            "type": "xsd:string",
            "minCount": "0",
            "maxCount": "1"
          },
          "actionStatementTime": {
            "type": "/Core/DateTime",
            "minCount": "0",
            "maxCount": "*"
          }
        },
        "externalPropertyRestrictions": {}
      },
      "ExploitCatalogVulnAssessmentRelationship": {
        "summary": "Provides an exploit assessment of a vulnerability.",
        "description": "An ExploitCatalogVulnAssessmentRelationship describes if a vulnerability is\nlisted in any exploit catalog such as the CISA Known Exploited Vulnerabilities\nCatalog (KEV) \n[https://www.cisa.gov/known-exploited-vulnerabilities-catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n**Constraints**\n\n- The relationship type must be set to hasAssessmentFor.\n\n**Syntax**\n\n```json\n{\n  \"@type\": \"ExploitCatalogVulnAssessmentRelationship\",\n  \"@id\": \"urn:spdx.dev:exploit-catalog-1\",\n  \"relationshipType\": \"hasAssessmentFor\",\n  \"catalogType\": \"kev\",\n  \"locator\": \"https://www.cisa.gov/known-exploited-vulnerabilities-catalog\",\n  \"exploited\": \"true\",\n  \"from\": \"urn:spdx.dev:vuln-cve-2023-2136\",\n  \"to\": [\"urn:product-google-chrome-112.0.5615.136\"],\n  \"suppliedBy\": [\"urn:spdx.dev:agent-jane-doe\"],\n  \"publishedTime\": \"2021-03-09T11:04:53Z\"\n}\n```",
        "metadata": {
          "name": "ExploitCatalogVulnAssessmentRelationship",
          "SubclassOf": "VulnAssessmentRelationship",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Security/ExploitCatalogVulnAssessmentRelationship"
        },
        "properties": {
          "catalogType": {
            "type": "ExploitCatalogType",
            "minCount": "1",
            "maxCount": "1"
          },
          "exploited": {
            "type": "xsd:boolean",
            "minCount": "1",
            "maxCount": "1"
          },
          "locator": {
            "type": "xsd:anyURI",
            "minCount": "1",
            "maxCount": "1"
          }
        },
        "externalPropertyRestrictions": {}
      },
      "EpssVulnAssessmentRelationship": {
        "summary": "Provides an EPSS assessment for a vulnerability.",
        "description": "An EpssVulnAssessmentRelationship relationship describes the likelihood or\nprobability that a vulnerability will be exploited in the wild using the Exploit\nPrediction Scoring System (EPSS) as defined on \n[https://www.first.org/epss/model](https://www.first.org/epss/model).\n\n**Constraints**\n\n- The relationship type must be set to hasAssessmentFor.\n\n**Syntax**\n\n```json\n{\n  \"@type\": \"EpssVulnAssessmentRelationship\",\n  \"@id\": \"urn:spdx.dev:epss-1\",\n  \"relationshipType\": \"hasAssessmentFor\",\n  \"probability\": 80,\n  \"from\": \"urn:spdx.dev:vuln-cve-2020-28498\",\n  \"to\": [\"urn:product-acme-application-1.3\"],\n  \"suppliedBy\": [\"urn:spdx.dev:agent-jane-doe\"],\n  \"publishedTime\": \"2021-03-09T11:04:53Z\"\n}\n```",
        "metadata": {
          "name": "EpssVulnAssessmentRelationship",
          "SubclassOf": "VulnAssessmentRelationship",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Security/EpssVulnAssessmentRelationship"
        },
        "properties": {
          "probability": {
            "type": "xsd:nonNegativeInteger",
            "minCount": "1",
            "maxCount": "1"
          },
          "severity": {
            "type": "xsd:string",
            "minCount": "0",
            "maxCount": "1"
          }
        },
        "externalPropertyRestrictions": {}
      },
      "VexUnderInvestigationVulnAssessmentRelationship": {
        "summary": "Designates elements as products where the impact of a vulnerability is being\ninvestigated.",
        "description": "VexUnderInvestigationVulnAssessmentRelationship links a vulnerability to a\nnumber of products stating the vulnerability's impact on them is being\ninvestigated. It represents the VEX under_investigation status.\n\n**Constraints**\n\nWhen linking elements using a VexUnderInvestigationVulnAssessmentRelationship\nthe following requirements must be observed:\n\n- Elements linked with a VexUnderInvestigationVulnAssessmentRelationship are\nconstrained to using the underInvestigationFor relationship type.\n- The from: end of the relationship must ve a /Security/Vulnerability classed\nelement.\n\n**Syntax**\n\n```json\n{\n  \"@type\": \"VexUnderInvestigationVulnAssessmentRelationship\",\n  \"@id\": \"urn:spdx.dev:vex-underInvestigation-1\",\n  \"relationshipType\": \"underInvestigationFor\",\n  \"from\": \"urn:spdx.dev:vuln-cve-2020-28498\",\n  \"to\": [\"urn:product-acme-application-1.3\"],\n  \"assessedElement\": \"urn:npm-elliptic-6.5.2\",\n  \"suppliedBy\": [\"urn:spdx.dev:agent-jane-doe\"],\n  \"publishedTime\": \"2021-03-09T11:04:53Z\"\n}\n```",
        "metadata": {
          "name": "VexUnderInvestigationVulnAssessmentRelationship",
          "SubclassOf": "VexVulnAssessmentRelationship",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Security/VexUnderInvestigationVulnAssessmentRelationship"
        },
        "properties": {},
        "externalPropertyRestrictions": {}
      }
    },
    "properties": {
      "justificationType": {
        "summary": "Impact justification label to be used when linking a vulnerability to an element\nrepresenting a VEX product with a VexNotAffectedVulnAssessmentRelationship\nrelationship.",
        "description": "When stating that an element is not affected by a vulnerability, the\nVexNotAffectedVulnAssessmentRelationship must include a justification from the\nmachine-readable labels catalog informing the reason the element is not impacted.\n\nimpactStatement which is a string with English prose can be used instead or as\ncomplementary to the justification label, but one of both MUST be defined.",
        "metadata": {
          "name": "justificationType",
          "Nature": "ObjectProperty",
          "Range": "VexJustificationType",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Security/justificationType",
          "Domain": [
            "VexNotAffectedVulnAssessmentRelationship"
          ]
        }
      },
      "actionStatementTime": {
        "summary": "Records the time when a recommended action was communicated in a VEX statement \nto mitigate a vulnerability.",
        "description": "When a VEX statement communicates an affected status, the author MUST\ninclude an action statement with a recommended action to help mitigate the\nvulnerability's impact. The actionStatementTime property records the time\nwhen the action statement was first communicated.",
        "metadata": {
          "name": "actionStatementTime",
          "Nature": "DataProperty",
          "Range": "/Core/DateTime",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Security/actionStatementTime",
          "Domain": [
            "VexAffectedVulnAssessmentRelationship"
          ]
        }
      },
      "assessedElement": {
        "summary": "Specifies an element contained in a piece of software where a vulnerability was\nfound.",
        "description": "Specifies subpackages, files or snippets referenced by a security assessment\nto specify the precise location where a vulnerability was found.",
        "metadata": {
          "name": "assessedElement",
          "Nature": "ObjectProperty",
          "Range": "/Core/Element",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Security/assessedElement",
          "Domain": [
            "VulnAssessmentRelationship"
          ]
        }
      },
      "suppliedBy": {
        "summary": "Identifies who or what supplied the vulnerability assessment relationship.",
        "description": "Identify the actual distribution source for the vulnerability assessment relationship being referenced.",
        "metadata": {
          "name": "suppliedBy",
          "Nature": "ObjectProperty",
          "Range": "/Core/Agent",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Security/suppliedBy",
          "Domain": [
            "VulnAssessmentRelationship"
          ]
        }
      },
      "decisionType": {
        "summary": "Provide the enumeration of possible decisions in the Stakeholder-Specific Vulnerability Categorization (SSVC) decision tree [https://www.cisa.gov/sites/default/files/publications/cisa-ssvc-guide%20508c.pdf](https://www.cisa.gov/sites/default/files/publications/cisa-ssvc-guide%20508c.pdf)",
        "description": "A decisionType is a mandatory value and must select one of the four entries in the `SsvcDecisionType.md` vocabulary.",
        "metadata": {
          "name": "decisionType",
          "Nature": "ObjectProperty",
          "Range": "SsvcDecisionType",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Security/decisionType",
          "Domain": [
            "SsvcVulnAssessmentRelationship"
          ]
        }
      },
      "exploited": {
        "summary": "Describe that a CVE is known to have an exploit because it's been listed in an exploit catalog.",
        "description": "This field is set when a CVE is listed in an exploit catalog.",
        "metadata": {
          "name": "exploited",
          "Nature": "DataProperty",
          "Range": "xsd:boolean",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Security/exploited",
          "Domain": [
            "ExploitCatalogVulnAssessmentRelationship"
          ]
        }
      },
      "catalogType": {
        "summary": "TODO",
        "description": "A catalogType is a mandatory value and must select one of the two entries in the `ExploitCatalogType.md` vocabulary.",
        "metadata": {
          "name": "catalogType",
          "Nature": "ObjectProperty",
          "Range": "ExploitCatalogType",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Security/catalogType",
          "Domain": [
            "ExploitCatalogVulnAssessmentRelationship"
          ]
        }
      },
      "probability": {
        "summary": "A probability score between 0 and 1 of a vulnerability being exploited.",
        "description": "The probability score between 0 and 1 (0 and 100%) estimating the likelihood\nthat a vulnerability will be exploited in the next 12 months.",
        "metadata": {
          "name": "probability",
          "Nature": "DataProperty",
          "Range": "xsd:decimal",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Security/probability",
          "Domain": [
            "EpssVulnAssessmentRelationship"
          ]
        }
      },
      "statusNotes": {
        "summary": "TODO",
        "description": "TODO",
        "metadata": {
          "name": "statusNotes",
          "Nature": "DataProperty",
          "Range": "xsd:string",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Security/statusNotes",
          "Domain": [
            "VexVulnAssessmentRelationship"
          ]
        }
      },
      "publishedTime": {
        "summary": "Specifies the time when a vulnerability was published.",
        "description": "Specifies the time when a vulnerability was first published.",
        "metadata": {
          "name": "publishedTime",
          "Nature": "DataProperty",
          "Range": "/Core/DateTime",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Security/publishedTime",
          "Domain": [
            "VulnAssessmentRelationship",
            "Vulnerability"
          ]
        }
      },
      "vexVersion": {
        "summary": "TODO",
        "description": "TODO",
        "metadata": {
          "name": "vexVersion",
          "Nature": "DataProperty",
          "Range": "xsd:string",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Security/vexVersion",
          "Domain": [
            "VexVulnAssessmentRelationship"
          ]
        }
      },
      "actionStatement": {
        "summary": "Provides advise on how to mitigate or remediate a vulnerability when a VEX product\nis affected by it.",
        "description": "When an element is referenced with a VexAffectedVulnAssessmentRelationship,\nthe relationship MUST include one actionStatement that SHOULD describe actions\nto remediate or mitigate the vulnerability.",
        "metadata": {
          "name": "actionStatement",
          "Nature": "DataProperty",
          "Range": "xsd:string",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Security/actionStatement",
          "Domain": [
            "VexAffectedVulnAssessmentRelationship"
          ]
        }
      },
      "locator": {
        "summary": "Provides the location of an exploit catalog.",
        "description": "A locator provides the location of an exploit catalog.",
        "metadata": {
          "name": "locator",
          "Nature": "DataProperty",
          "Range": "xsd:anyURI",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Security/locator",
          "Domain": [
            "ExploitCatalogVulnAssessmentRelationship"
          ]
        }
      },
      "vector": {
        "summary": "Specifies the vector string of a vulnerability.",
        "description": "Sepcifies the vector string of a vulnerability, a string combining metrics\nfrom an assessment of its severity.",
        "metadata": {
          "name": "vector",
          "Nature": "DataProperty",
          "Range": "xsd:string",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Security/vector",
          "Domain": [
            "CvssV3VulnAssessmentRelationship",
            "CvssV2VulnAssessmentRelationship"
          ]
        }
      },
      "impactStatementTime": {
        "summary": "TODO",
        "description": "TODO",
        "metadata": {
          "name": "impactStatementTime",
          "Nature": "DataProperty",
          "Range": "/Core/DateTime",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Security/impactStatementTime",
          "Domain": [
            "VexNotAffectedVulnAssessmentRelationship"
          ]
        }
      },
      "withdrawnTime": {
        "summary": "Specified the time and date when a vulnerability was withdrawn.",
        "description": "Specified the time and date when a vulnerability was withdrawn.",
        "metadata": {
          "name": "withdrawnTime",
          "Nature": "DataProperty",
          "Range": "/Core/DateTime",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Security/withdrawnTime",
          "Domain": [
            "VulnAssessmentRelationship",
            "Vulnerability"
          ]
        }
      },
      "impactStatement": {
        "summary": "Explains why a VEX product is not affected by a vulnerability. It is an\nalternative in VexNotAffectedVulnAssessmentRelationship to the machine-readable\njustification label.",
        "description": "When a VEX product element is related with a VexNotAffectedVulnAssessmentRelationship\nand a machine readable justification label is not provided, then an impactStatement\nthat further explains how or why the prouct(s) are not affected by the vulnerability\nmust be provided.",
        "metadata": {
          "name": "impactStatement",
          "Nature": "DataProperty",
          "Range": "xsd:string",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Security/impactStatement",
          "Domain": [
            "VexNotAffectedVulnAssessmentRelationship"
          ]
        }
      },
      "score": {
        "summary": "Provides a numerical (0-10) representation of the severity of a vulnerability.",
        "description": "The score provides information on the severity of a vulnerability per the\nCommon Vulnerability Scoring System as defined on [https://www.first.org/cvss](https://www.first.org/cvss/).",
        "metadata": {
          "name": "score",
          "Nature": "DataProperty",
          "Range": "xsd:string",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Security/score",
          "Domain": [
            "CvssV3VulnAssessmentRelationship",
            "CvssV2VulnAssessmentRelationship"
          ]
        }
      },
      "severity": {
        "summary": "The severity of a vulnerability in relation to a piece of software.",
        "description": "The severity field provides a human readable string, a label that can be used\nas an English adjective that qualifies its numerical score.",
        "metadata": {
          "name": "severity",
          "Nature": "DataProperty",
          "Range": "xsd:string",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Security/severity",
          "Domain": [
            "CvssV3VulnAssessmentRelationship",
            "CvssV2VulnAssessmentRelationship",
            "EpssVulnAssessmentRelationship"
          ]
        }
      },
      "modifiedTime": {
        "summary": "Specifies a time when a vulnerability assessment was modified",
        "description": "Specifies a time when a vulnerability assessment was last modified.",
        "metadata": {
          "name": "modifiedTime",
          "Nature": "DataProperty",
          "Range": "/Core/DateTime",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Security/modifiedTime",
          "Domain": [
            "VulnAssessmentRelationship",
            "Vulnerability"
          ]
        }
      }
    },
    "vocabs": {
      "VexJustificationType": {
        "summary": "Specifies the VEX justification type.",
        "description": "VexJustificationType specifies the type of Vulnerability Exploitability eXchange (VEX) justification.",
        "metadata": {
          "name": "VexJustificationType",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Security/VexJustificationType"
        },
        "entries": {
          "componentNotPresent": "The software is not affected because the vulnerable component is not in the product.",
          "vulnerableCodeNotPresent": "The product is not affected because the code underlying the vulnerability is not present in the product.",
          "vulnerableCodeCannotBeControlledByAdversary": "The vulnerable component is present, and the component contains the vulnerable code. However, vulnerable code is used in such a way that an attacker cannot mount any anticipated attack.",
          "vulnerableCodeNotInExecutePath": "The affected code is not reachable through the execution of the code, including non-anticipated states of the product.",
          "inlineMitigationsAlreadyExist": "Built-in inline controls or mitigations prevent an adversary from leveraging the vulnerability."
        }
      },
      "ExploitCatalogType": {
        "summary": "Specifies the exploit catalog type.",
        "description": "ExploitCatalogType specifies the type of exploit catalog that a vulnerability is listed in.",
        "metadata": {
          "name": "ExploitCatalogType",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Security/ExploitCatalogType"
        },
        "entries": {
          "kev": "CISA's Known Exploited Vulnerability (KEV) Catalog",
          "other": "Other exploit catalogs"
        }
      },
      "SsvcDecisionType": {
        "summary": "Specifies the SSVC decision type.",
        "description": "SsvcDecisionType specifies the type of decision that's been made according to the Stakeholder-Specific Vulnerability Categorization (SSVC)  system [https://www.cisa.gov/stakeholder-specific-vulnerability-categorization-ssvc](https://www.cisa.gov/stakeholder-specific-vulnerability-categorization-ssvc)",
        "metadata": {
          "name": "SsvcDecisionType",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Security/SsvcDecisionType"
        },
        "entries": {
          "act": "The vulnerability requires attention from the organization's internal, supervisory-level and leadership-level individuals. Necessary actions include requesting assistance or information about the vulnerability, as well as publishing a notification either internally and/or externally. Typically, internal groups would meet to determine the overall response and then execute agreed upon actions. CISA recommends remediating Act vulnerabilities as soon as possible.",
          "attend": "The vulnerability requires attention from the organization's internal, supervisory-level individuals. Necessary actions include requesting assistance or information about the vulnerability, and may involve publishing a notification either internally and/or externally. CISA recommends remediating Attend vulnerabilities sooner than standard update timelines.",
          "track": "The vulnerability does not require action at this time. The organization would continue to track the vulnerability and reassess it if new information becomes available. CISA recommends remediating Track vulnerabilities within standard update timelines.",
          "trackStar": "(Track* in the SSVC spec) The vulnerability contains specific characteristics that may require closer monitoring for changes. CISA recommends remediating Track* vulnerabilities within standard update timelines."
        }
      }
    }
  },
  "Build": {
    "name": "Build",
    "classes": {
      "Build": {
        "summary": "Class that describes a build instance of software/artifacts.",
        "description": "A build is a representation of the process in which a piece of software or artifact is built. It encapsulates information related to a build process and\nprovides an element from which relationships can be created to describe the build's inputs, outputs, and related entities (e.g. builders, identities, etc.).\n\nDefinitions of \"BuildType\", \"ConfigSource\", \"Parameters\" and \"Environment\" follow\nthose defined in [SLSA provenance](https://slsa.dev/provenance/v0.2).\n\nExternalIdentifier of type \"urlScheme\" may be used to identify build logs. In this case, the comment of the ExternalIdentifier should be \"LogReference\".\n\nNote that buildStart and buildEnd are optional, and may be omitted to simplify creating reproducible builds.",
        "metadata": {
          "name": "Build",
          "SubclassOf": "/Core/Element",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Build/Build"
        },
        "properties": {
          "buildType": {
            "type": "xsd:anyURI",
            "minCount": "1",
            "maxCount": "1"
          },
          "buildId": {
            "type": "xsd:string",
            "minCount": "0",
            "maxCount": "1"
          },
          "configSourceEntrypoint": {
            "type": "xsd:string",
            "minCount": "0",
            "maxCount": "*"
          },
          "configSourceUri": {
            "type": "xsd:anyURI",
            "minCount": "0",
            "maxCount": "*"
          },
          "configSourceDigest": {
            "type": "/Core/Hash",
            "minCount": "0",
            "maxCount": "*"
          },
          "parameters": {
            "type": "/Core/DictionaryEntry",
            "minCount": "0",
            "maxCount": "*"
          },
          "buildStartTime": {
            "type": "/Core/DateTime",
            "minCount": "0",
            "maxCount": "1"
          },
          "buildEndTime": {
            "type": "/Core/DateTime",
            "minCount": "0",
            "maxCount": "1"
          },
          "environment": {
            "type": "/Core/DictionaryEntry",
            "minCount": "0",
            "maxCount": "*"
          }
        },
        "externalPropertyRestrictions": {}
      }
    },
    "properties": {
      "buildStartTime": {
        "summary": "Property describing the start time of a build.",
        "description": "buildStartTime is the time at which a build is triggered. The builder typically records this value.",
        "metadata": {
          "name": "buildStartTime",
          "Nature": "DataProperty",
          "Range": "/Core/DateTime",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Build/buildStartTime",
          "Domain": [
            "Build"
          ]
        }
      },
      "configSourceUri": {
        "summary": "Property that describes the URI of the build configuration source file.",
        "description": "If a build configuration exists for the toolchain or platform performing the build, the configSourceUri of a build is the URI of that build configuration. For example, a build triggered by a GitHub action is defined by a build configuration YAML file. In this case, the configSourceUri is the URL of that YAML file. \nm",
        "metadata": {
          "name": "configSourceUri",
          "Nature": "DataProperty",
          "Range": "xsd:anyURI",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Build/configSourceUri",
          "Domain": [
            "Build"
          ]
        }
      },
      "buildEndTime": {
        "summary": "Property that describes the time at which a build stops.",
        "description": "buildEndTime describes the time at which a build stops or finishes. This value is typically recorded by the builder.",
        "metadata": {
          "name": "buildEndTime",
          "Nature": "DataProperty",
          "Range": "/Core/DateTime",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Build/buildEndTime",
          "Domain": [
            "Build"
          ]
        }
      },
      "parameters": {
        "summary": "Property describing the parameters used in an instance of a build.",
        "description": "parameters is a key-value map of all build parameters and their values that were provided to the builder for a build instance. This is different from the [environment](environment.md) property in that the keys and values are provided as command line arguments or a configuration file to the builder.",
        "metadata": {
          "name": "parameters",
          "Nature": "ObjectProperty",
          "Range": "/Core/DictionaryEntry",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Build/parameters",
          "Domain": [
            "Build"
          ]
        }
      },
      "environment": {
        "summary": "Property describing the session in which a build is invoked.",
        "description": "environment is a map of environment variables and values that are set during a build session. This is different from the [parameters](parameters.md) property in that it describes the environment variables set before a build is invoked rather than the variables provided to the builder.",
        "metadata": {
          "name": "environment",
          "Nature": "ObjectProperty",
          "Range": "/Core/DictionaryEntry",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Build/environment",
          "Domain": [
            "Build"
          ]
        }
      },
      "configSourceDigest": {
        "summary": "Property that describes the digest of the build configuration file used to invoke a build.",
        "description": "configSourceDigest is the checksum of the build configuration file used by a builder to execute a build. This Property uses the Core model's [Hash](../../Core/Classes/Hash.md) class.",
        "metadata": {
          "name": "configSourceDigest",
          "Nature": "ObjectProperty",
          "Range": "/Core/Hash",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Build/configSourceDigest",
          "Domain": [
            "Build"
          ]
        }
      },
      "configSourceEntrypoint": {
        "summary": "Property describes the invocation entrypoint of a build.",
        "description": "A build entrypoint is the invoked executable of a build which always runs when the build is triggered. For example, when a build is triggered by running a shell script, the entrypoint is `script.sh`. In terms of a declared build, the entrypoint is the position in a configuration file or a build declaration which is always run when the build is triggered. For example, in the following configuration file, the entrypoint of the build is `publish`.\n\n```\nname: Publish packages to PyPI\n\non:\ncreate:\ntags: \"*\"\n\njobs:\npublish:\nruns-on: ubuntu-latest\nif: startsWith(github.ref, 'refs/tags/')\nsteps:\n\n...\n```",
        "metadata": {
          "name": "configSourceEntrypoint",
          "Nature": "DataProperty",
          "Range": "xsd:string",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Build/configSourceEntrypoint",
          "Domain": [
            "Build"
          ]
        }
      },
      "buildId": {
        "summary": "A buildId is a locally unique identifier used by a builder to identify a unique instance of a build produced by it.",
        "description": "A buildId is a locally unique identifier to identify a unique instance of a build. This identifier differs based on build toolchain, platform, or naming convention used by an organization or standard.",
        "metadata": {
          "name": "buildId",
          "Nature": "DataProperty",
          "Range": "xsd:string",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Build/buildId",
          "Domain": [
            "Build"
          ]
        }
      },
      "buildType": {
        "summary": "A buildType is a hint that is used to indicate the toolchain, platform, or infrastructure that the build was invoked on.",
        "description": "A buildType is a URI expressing the toolchain, platform, or infrastructure that the build was invoked on. For example, if the build was invoked on GitHub's CI platform using github actions, the buildType can be expressed as `https://github.com/actions`. In contrast, if the build was invoked on a local machine, the buildType can be expressed as `file://username@host/path/to/build`.",
        "metadata": {
          "name": "buildType",
          "Nature": "DataProperty",
          "Range": "xsd:anyURI",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Build/buildType",
          "Domain": [
            "Build"
          ]
        }
      }
    },
    "vocabs": {}
  },
  "Software": {
    "name": "Software",
    "classes": {
      "Package": {
        "summary": "Refers to any unit of content that can be associated with a distribution of software.",
        "description": "A package refers to any unit of content that can be associated with a distribution of software.\nTypically, a package is composed of one or more files.  \nAny of the following non-limiting examples may be (but are not required to be) represented in SPDX as a package:\n\n - a tarball, zip file or other archive\n - a directory or sub-directory\n - a separately distributed piece of software which another Package or File uses or depends upon (e.g., a Python package, a Go module, ...)\n - a container image, and/or each image layer within a container image\n - a collection of one or more sub-packages\n - a Git repository snapshot from a particular point in time\n\nNote that some of these could be represented in SPDX as a file as well.\nExternal property restriction on /Core/Element/name: minCount: 1",
        "metadata": {
          "name": "Package",
          "SubclassOf": "/Software/SoftwareArtifact",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Software/Package"
        },
        "properties": {
          "packageVersion": {
            "type": "xsd:string",
            "minCount": "0",
            "maxCount": "1"
          },
          "downloadLocation": {
            "type": "xsd:anyURI",
            "minCount": "0",
            "maxCount": "1"
          },
          "packageUrl": {
            "type": "xsd:anyURI",
            "minCount": "0",
            "maxCount": "1"
          },
          "homePage": {
            "type": "xsd:anyURI",
            "minCount": "0",
            "maxCount": "1"
          },
          "sourceInfo": {
            "type": "xsd:string",
            "minCount": "0",
            "maxCount": "1"
          }
        },
        "externalPropertyRestrictions": {
          "/Core/Element/name": {
            "minCount": "1",
            "maxCount": "*"
          }
        }
      },
      "File": {
        "summary": "Refers to any object that stores content on a computer.",
        "description": "Refers to any object that stores content on a computer.\nThe type of content can optionally be provided in the contentType property.\nExternal property restriction on /Core/Element/name: minCount: 1",
        "metadata": {
          "name": "File",
          "SubclassOf": "/Software/SoftwareArtifact",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Software/File"
        },
        "properties": {
          "contentType": {
            "type": "/Core/MediaType",
            "minCount": "0",
            "maxCount": "1"
          }
        },
        "externalPropertyRestrictions": {
          "/Core/Element/name": {
            "minCount": "1",
            "maxCount": "*"
          }
        }
      },
      "Snippet": {
        "summary": "Describes a certain part of a file.",
        "description": "A Snippet describes a certain part of a file and can be used when the file is known to have some content\nthat has been included from another original source. Snippets are useful for denoting when part of a file\nmay have been originally created under another license or copied from a place with a known vulnerability.",
        "metadata": {
          "name": "Snippet",
          "SubclassOf": "/Software/SoftwareArtifact",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Software/Snippet"
        },
        "properties": {
          "byteRange": {
            "type": "/Core/PositiveIntegerRange",
            "minCount": "0",
            "maxCount": "1"
          },
          "lineRange": {
            "type": "/Core/PositiveIntegerRange",
            "minCount": "0",
            "maxCount": "1"
          }
        },
        "externalPropertyRestrictions": {}
      },
      "Sbom": {
        "summary": "A collection of SPDX Elements describing a single package.",
        "description": "A Software Bill of Materials (SBOM) is a collection of SPDX Elements describing a single package.\nThis could include details of the content and composition of the product,\nprovenance details of the product and/or\nits composition, licensing information, known quality or security issues, etc.",
        "metadata": {
          "name": "Sbom",
          "SubclassOf": "/Core/Bom",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Software/Sbom"
        },
        "properties": {
          "sbomType": {
            "type": "SbomType",
            "minCount": "0",
            "maxCount": "*"
          }
        },
        "externalPropertyRestrictions": {}
      },
      "SoftwareArtifact": {
        "summary": "A distinct article or unit related to Software.",
        "description": "A software artifact is a distinct article or unit related to software\nsuch as a package, a file, or a snippet.",
        "metadata": {
          "name": "SoftwareArtifact",
          "SubclassOf": "/Core/Artifact",
          "Instantiability": "Abstract",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Software/SoftwareArtifact"
        },
        "properties": {
          "contentIdentifier": {
            "type": "xsd:anyURI",
            "minCount": "0",
            "maxCount": "1"
          },
          "primaryPurpose": {
            "type": "SoftwarePurpose",
            "minCount": "0",
            "maxCount": "1"
          },
          "additionalPurpose": {
            "type": "SoftwarePurpose",
            "minCount": "0",
            "maxCount": "*"
          },
          "concludedLicense": {
            "type": "/Licensing/AnyLicenseInfo",
            "minCount": "0",
            "maxCount": "1"
          },
          "declaredLicense": {
            "type": "/Licensing/AnyLicenseInfo",
            "minCount": "0",
            "maxCount": "1"
          },
          "copyrightText": {
            "type": "xsd:string",
            "minCount": "0",
            "maxCount": "1"
          },
          "attributionText": {
            "type": "xsd:string",
            "minCount": "0",
            "maxCount": "1"
          }
        },
        "externalPropertyRestrictions": {}
      },
      "SoftwareDependencyRelationship": {
        "summary": "",
        "description": "TODO",
        "metadata": {
          "name": "SoftwareDependencyRelationship",
          "SubclassOf": "/Core/LifecycleScopedRelationship",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Software/SoftwareDependencyRelationship"
        },
        "properties": {
          "softwareLinkage": {
            "type": "SoftwareDependencyLinkType",
            "minCount": "0",
            "maxCount": "1"
          },
          "conditionality": {
            "type": "DependencyConditionalityType",
            "minCount": "0",
            "maxCount": "1"
          }
        },
        "externalPropertyRestrictions": {}
      }
    },
    "properties": {
      "lineRange": {
        "summary": "Defines the line range in the original host file that the snippet information applies to.",
        "description": "This field defines the line range in the original host file that the snippet information applies to.\nIf there is a disagreement between the byte range and line range, the byte range values will take precedence.\nA range of lines is a convenient reference for those files where there is a known line delimiter. \nThe choice was made to start the numbering of the lines at 1 to be consistent with the W3C pointer method vocabulary.",
        "metadata": {
          "name": "lineRange",
          "Nature": "DataProperty",
          "Range": "/Core/PositiveIntegerRange",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Software/lineRange",
          "Domain": [
            "Snippet"
          ]
        }
      },
      "primaryPurpose": {
        "summary": "Provides information about the primary purpose of the software artifact.",
        "description": "primaryPurpose provides information about the primary purpose of the software artifact.",
        "metadata": {
          "name": "primaryPurpose",
          "Nature": "ObjectProperty",
          "Range": "SoftwarePurpose",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Software/primaryPurpose",
          "Domain": [
            "SoftwareArtifact"
          ]
        }
      },
      "packageVersion": {
        "summary": "Identify the version of a package.",
        "description": "A packageVersion is useful for identification purposes and for indicating later changes of the package version.",
        "metadata": {
          "name": "packageVersion",
          "Nature": "DataProperty",
          "Range": "xsd:string",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Software/packageVersion",
          "Domain": [
            "Package"
          ]
        }
      },
      "conditionality": {
        "summary": "TODO",
        "description": "A conditionality is TODO",
        "metadata": {
          "name": "conditionality",
          "Nature": "ObjectProperty",
          "Range": "DependencyConditionalityType",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Software/conditionality",
          "Domain": [
            "SoftwareDependencyRelationship"
          ]
        }
      },
      "sbomType": {
        "summary": "Provides information about the type of an SBOM.",
        "description": "This field is a reasonable estimation of the type of SBOM created from a creator perspective.\nIt is intended to be used to give guidance on the elements that may be contained within it.\nAligning with the guidance produced in [Types of Software Bill of Material (SBOM) Documents](https://www.cisa.gov/sites/default/files/2023-04/sbom-types-document-508c.pdf).",
        "metadata": {
          "name": "sbomType",
          "Nature": "ObjectProperty",
          "Range": "SbomType",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Software/sbomType",
          "Domain": [
            "Sbom"
          ]
        }
      },
      "concludedLicense": {
        "summary": "Identifies the license that that SPDX data creator has concluded as governing\nthe software Package, File or Snippet.",
        "description": "A concludedLicense is the license identified by the SPDX data creator,\nbased on analyzing the license information in the software Package, File\nor Snippet and other information to arrive at a reasonably objective\nconclusion as to what license governs it.\n\nIf a concludedLicense has a NONE value (NoneLicense), this indicates that the\nSPDX data creator has looked and did not find any license information for this\nsoftware Package, File or Snippet.\n\nIf a concludedLicense has a NOASSERTION value (NoAssertionLicense), this\nindicates that one of the following applies:\n* the SPDX data creator has attempted to but cannot reach a reasonable\n  objective determination;\n* the SPDX data creator has made no attempt to determine this field; or\n* the SPDX data creator has intentionally provided no information (no\n  meaning should be implied by doing so).\n\nA written explanation of a NOASSERTION value (NoAssertionLicense) MAY be\nprovided in the licenseComment field.\n\nIf the concludedLicense for a software Package, File or Snippet is not the\nsame as its declaredLicense, a written explanation SHOULD be provided in\nthe licenseComment field.\n\nIf the declaredLicense for a software Package, File or Snippet is a choice\nof more than one license (e.g. a license expression combining two licenses\nthrough use of the `OR` operator), then the concludedLicense may either\nretain the license choice or identify which license was chosen.",
        "metadata": {
          "name": "concludedLicense",
          "Nature": "ObjectProperty",
          "Range": "/Licensing/AnyLicenseInfo",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Software/concludedLicense",
          "Domain": [
            "SoftwareArtifact"
          ]
        }
      },
      "sourceInfo": {
        "summary": "Records any relevant background information or additional comments\nabout the origin of the package.",
        "description": "SourceInfo records any relevant background information or additional comments\nabout the origin of the package. For example, this field might include comments \nindicating whether the package was pulled from a source code management system \nor has been repackaged. The creator can provide additional information to describe\nany anomalies or discoveries in the determination of the origin of the package.",
        "metadata": {
          "name": "sourceInfo",
          "Nature": "DataProperty",
          "Range": "xsd:string",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Software/sourceInfo",
          "Domain": [
            "Package"
          ]
        }
      },
      "contentType": {
        "summary": "Provides information about the content type of an Element.",
        "description": "This field is a reasonable estimation of the content type of the Element, from a creator perspective.\nContent type is intrinsic to the Element, independent of how the Element is being used.",
        "metadata": {
          "name": "contentType",
          "Nature": "DataProperty",
          "Range": "/Core/MediaType",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Software/contentType",
          "Domain": [
            "File"
          ]
        }
      },
      "declaredLicense": {
        "summary": "Identifies the license information actually found in the software Package,\nFile or Snippet, for example as detected by use of automated tooling.",
        "description": "A declaredLicense is the license identified in text in the software package,\nfile or snippet as the license declared by its authors.\n\nThis field is not intended to capture license information obtained from an\nexternal source, such as a package's website. Such information can be\nincluded, as needed, in a concludedLicense field.\n\nA declaredLicense may be expressed differently in practice for different\ntypes of artifacts. For example:\n\n* for Packages:\n  * would include license info describing the license of the Package as a\n    whole, when it is found in the Package itself (e.g., LICENSE file,\n    README file, metadata in the repository, etc.)\n  * would not include any license information that is not in the Package\n    itself (e.g., license information from the project\u2019s website or from a\n    third party repository or website)\n* for Files:\n  * would include license info found in the File itself (e.g., license\n    header or notice, comments, SPDX-License-Identifier expression)\n  * would not include license info found in a different file (e.g., LICENSE\n    file in the top directory of a repository)\n* for Snippets:\n  * would include license info found in the Snippet itself (e.g., license\n    notice, comments, SPDX-License-Identifier expression)\n  * would not include license info found elsewhere in the File or in a\n    different File (e.g., comment at top of File if it is not within the\n    Snippet, LICENSE file in the top directory of a repository)\n\nIf a declaredLicense has a NONE value (NoneLicense), this indicates that the\ncorresponding Package, File or Snippet contains no license information\nwhatsoever.\n\nIf a declaredLicense has a NOASSERTION value (NoAssertionLicense), this\nindicates that one of the following applies:\n* the SPDX data creator has attempted to but cannot reach a reasonable\n  objective determination;\n* the SPDX data creator has made no attempt to determine this field; or\n* the SPDX data creator has intentionally provided no information (no meaning\n  should be implied by doing so).",
        "metadata": {
          "name": "declaredLicense",
          "Nature": "ObjectProperty",
          "Range": "/Licensing/AnyLicenseInfo",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Software/declaredLicense",
          "Domain": [
            "SoftwareArtifact"
          ]
        }
      },
      "additionalPurpose": {
        "summary": "Provides additional purpose information of the software artifact.",
        "description": "Additional purpose provides information about the additional purposes of the software artifact in addition to the primaryPurpose.",
        "metadata": {
          "name": "additionalPurpose",
          "Nature": "ObjectProperty",
          "Range": "SoftwarePurpose",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Software/additionalPurpose",
          "Domain": [
            "SoftwareArtifact"
          ]
        }
      },
      "attributionText": {
        "summary": "Provides a place for the SPDX data creator to record acknowledgement text for\na software Package, File or Snippet.",
        "description": "An attributionText for a software Package, File or Snippet provides a consumer\nof SPDX data with acknowledgement content, to assist redistributors of the\nPackage, File or Snippet with reproducing those acknowledgements.\n\nFor example, this field may include a statement that is required by a\nparticular license to be reproduced in end-user documentation, advertising\nmaterials, or another form.\n\nThis field may describe where, or in which contexts, the acknowledgements\nneed to be reproduced, but it is not required to do so. The SPDX data creator\nmay also explain elsewhere (such as in a licenseComment field) how they intend\nfor data in this field to be used.\n\nAn attributionText is is not meant to include the software Package, File or\nSnippet\u2019s actual complete license text (see concludedLicense to identify the\ncorresponding license).",
        "metadata": {
          "name": "attributionText",
          "Nature": "DataProperty",
          "Range": "xsd:string",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Software/attributionText",
          "Domain": [
            "SoftwareArtifact"
          ]
        }
      },
      "homePage": {
        "summary": "A place for the SPDX document creator to record a website that serves as the package's home page.",
        "description": "HomePage is a place for the SPDX document creator to record a website that serves as the package's home page.\nThis saves the recipient of the SPDX document who is looking for more info from\nhaving to search for and verify a match between the package and the associated project home page.\nThis link can also be used to reference further information about the package\nreferenced by the SPDX document creator.",
        "metadata": {
          "name": "homePage",
          "Nature": "DataProperty",
          "Range": "xsd:anyURI",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Software/homePage",
          "Domain": [
            "Package"
          ]
        }
      },
      "contentIdentifier": {
        "summary": "Provides a place to record the canonical, unique, immutable identifier for each software artifact using the artifact's gitoid.",
        "description": "The contentIdentifier provides a canonical, unique, immutable artifact identifier for each software artifact. SPDX 3.0 describes software artifacts as Snippet, File, or Package Elements. The ContentIdentifier can be calculated for any software artifact and can be recorded for any of these SPDX 3.0 Elements using Omnibor, an attempt to standardize how software artifacts are identified independent of which programming language, version control system, build tool, package manager, or software distribution mechanism is in use.  \n\nThe contentIdentifier is defined as the [Git Object Identifier](https://git-scm.com/book/en/v2/Git-Internals-Git-Objects) (gitoid) of type `blob` of the software artifact. The use of a git-based version control system is not necessary to calculate a contentIdentifier for any software artifact.\n\nThe gitoid is expressed in the ContentIdentifier property by using the IANA [gitoid URI scheme](https://www.iana.org/assignments/uri-schemes/prov/gitoid).\n\n```\nScheme syntax: gitoid\":\"<git object type>\":\"<hash algorithm>\":\"<hash value>\n```\n\nThe OmniBOR ID for the OmniBOR Document associated with a software artifact should not be recorded in this field. Rather, OmniBOR IDs should be recorded in the SPDX Element's ExternalIdentifier property. See [https://omnibor.io](https://omnibor.io) for more details.",
        "metadata": {
          "name": "contentIdentifier",
          "Nature": "DataProperty",
          "Range": "xsd:anyURI",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Software/contentIdentifier",
          "Domain": [
            "SoftwareArtifact"
          ]
        }
      },
      "copyrightText": {
        "summary": "Identifies the text of one or more copyright notices for a software Package,\nFile or Snippet, if any.",
        "description": "A copyrightText consists of the text(s) of the copyright notice(s) found\nfor a software Package, File or Snippet, if any.\n\nIf a copyrightText contains text, then it may contain any text related to\none or more copyright notices (even if not complete) for that software\nPackage, File or Snippet.\n\nIf a copyrightText has a \"NONE\" value, this indicates that the software\nPackage, File or Snippet contains no copyright notice whatsoever.\n\nIf a copyrightText has a \"NOASSERTION\" value, this indicates that one of the\nfollowing applies:\n* the SPDX data creator has attempted to but cannot reach a reasonable\n  objective determination;\n* the SPDX data creator has made no attempt to determine this field; or\n* the SPDX data creator has intentionally provided no information (no\n  meaning should be implied by doing so).",
        "metadata": {
          "name": "copyrightText",
          "Nature": "DataProperty",
          "Range": "xsd:string",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Software/copyrightText",
          "Domain": [
            "SoftwareArtifact"
          ]
        }
      },
      "packageUrl": {
        "summary": "Provides a place for the SPDX data creator to record the package URL string (in accordance with the [package URL spec](https://github.com/package-url/purl-spec/blob/master/PURL-SPECIFICATION.rst)) for a software Package.",
        "description": "A packageUrl (commonly pronounced and referred to as \"purl\") is an attempt to standardize package representations in order to reliably identify and locate software packages. A purl is a URL string which represents a package in a mostly universal and uniform way across programming languages, package managers, packaging conventions, tools, APIs and databases.\n\nthe purl URL string is defined by seven components:\n```\nscheme:type/namespace/name@version?qualifiers#subpath\n```\n\nThe definition for each component can be found in the [purl specification](https://github.com/package-url/purl-spec/blob/master/PURL-SPECIFICATION.rst). Components are designed such that they form a hierarchy from the most significant on the left to the least significant components on the right. \n\nParsing a purl string into its components works from left to right. Some extra type-specific normalizations are required. For more information, see [How to parse a purl string in its components](https://github.com/package-url/purl-spec/blob/master/PURL-SPECIFICATION.rst#how-to-parse-a-purl-string-in-its-components).",
        "metadata": {
          "name": "packageUrl",
          "Nature": "DataProperty",
          "Range": "xsd:anyURI",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Software/packageUrl",
          "Domain": [
            "Package"
          ]
        }
      },
      "byteRange": {
        "summary": "Defines the byte range in the original host file that the snippet information applies to.",
        "description": "This field defines the byte range in the original host file that the snippet information applies to.\nA range of bytes is independent of various formatting concerns, and the most accurate way \nof referring to the differences. The choice was made to start the numbering of \nthe byte range at 1 to be consistent with the W3C pointer method vocabulary.",
        "metadata": {
          "name": "byteRange",
          "Nature": "DataProperty",
          "Range": "/Core/PositiveIntegerRange",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Software/byteRange",
          "Domain": [
            "Snippet"
          ]
        }
      },
      "softwareLinkage": {
        "summary": "TODO",
        "description": "A softwareLinkage is TODO",
        "metadata": {
          "name": "softwareLinkage",
          "Nature": "ObjectProperty",
          "Range": "SoftwareDependencyLinkType",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Software/softwareLinkage",
          "Domain": [
            "SoftwareDependencyRelationship"
          ]
        }
      },
      "downloadLocation": {
        "summary": "Identifies the download Uniform Resource Identifier for the package at the time that the document was created.",
        "description": "DownloadLocation identifies the download Uniform Resource Identifier \nfor the package at the time that the document was created.\nWhere and how to download the exact package being referenced \nis critical for verification and tracking data.",
        "metadata": {
          "name": "downloadLocation",
          "Nature": "DataProperty",
          "Range": "xsd:anyURI",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Software/downloadLocation",
          "Domain": [
            "Package"
          ]
        }
      }
    },
    "vocabs": {
      "DependencyConditionalityType": {
        "summary": "TODO",
        "description": "TODO",
        "metadata": {
          "name": "DependencyConditionalityType",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Software/DependencyConditionalityType"
        },
        "entries": {
          "optional": "TODOdescription",
          "required": "TODOdescription",
          "provided": "TODOdescription",
          "prerequisite": "TODOdescription",
          "other": "TODOdescription"
        }
      },
      "SoftwarePurpose": {
        "summary": "Provides information about the primary purpose of an Element.",
        "description": "This field provides information about the primary purpose of an Element.\nSoftware Purpose is intrinsic to how the Element is being used rather than the content of the Element.\nThis field is a reasonable estimate of the most likely usage of the Element\nfrom the producer and consumer perspective from which both parties can draw conclusions\nabout the context in which the Element exists.",
        "metadata": {
          "name": "SoftwarePurpose",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Software/SoftwarePurpose"
        },
        "entries": {
          "application": "the Element is a software application",
          "archive": "the Element is an archived collection of one or more files (.tar, .zip, etc)",
          "bom": "Element is a bill of materials",
          "configuration": "Element is configuration data",
          "container": "the Element is a container image which can be used by a container runtime application",
          "data": "Element is data",
          "device": "the Element refers to a chipset, processor, or electronic board",
          "documentation": "Element is documentation",
          "evidence": "the Element is the evidence that a specification or requirement has been fulfilled",
          "executable": "Element is an Artifact that can be run on a computer",
          "file": "the Element is a single file which can be independently distributed (configuration file, statically linked binary, Kubernetes deployment, etc)",
          "firmware": "the Element provides low level control over a device's hardware",
          "framework": "the Element is a software framework",
          "install": "the Element is used to install software on disk",
          "library": "the Element is a software library",
          "manifest": "the Element is a software manifest",
          "model": "the Element is a machine learning or artificial intelligence model",
          "module": "the Element is a module of a piece of software",
          "operatingSystem": "the Element is an operating system",
          "other": "the Element doesn't fit into any of the other categories",
          "patch": "Element contains a set of changes to update, fix, or improve another Element",
          "requirement": "the Element provides a requirement needed as input for another Element",
          "source": "the Element is a single or a collection of source files",
          "specification": "the Element is a plan, guideline or strategy how to create, perform or analyse an application",
          "test": "The Element is a test used to verify functionality on an software element"
        }
      },
      "SoftwareDependencyLinkType": {
        "summary": "TODO",
        "description": "TODO",
        "metadata": {
          "name": "SoftwareDependencyLinkType",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Software/SoftwareDependencyLinkType"
        },
        "entries": {
          "static": "TODOdescription",
          "dynamic": "TODOdescription",
          "tool": "TODOdescription",
          "other": "TODOdescription"
        }
      },
      "SbomType": {
        "summary": "Provides a set of values to be used to describe the common types of SBOMs that tools may create.",
        "description": "The set of SBOM types with definitions as defined in [Types of Software Bill of Material (SBOM) Documents](https://www.cisa.gov/sites/default/files/2023-04/sbom-types-document-508c.pdf), published on April 21, 2023. \nAn SBOM type describes the most likely type of an SBOM from the producer perspective, so that consumers can draw conclusions about the data inside an SBOM.  A single SBOM can have multiple SBOM document types associated with it.",
        "metadata": {
          "name": "SbomType",
          "Instantiability": "Concrete",
          "Status": "Stable",
          "id": "https://spdx.org/rdf/v3/Software/SbomType"
        },
        "entries": {
          "design": "SBOM of intended, planned software project or product with included components (some of which may not yet exist) for a new software artifact.",
          "source": "SBOM created directly from the development environment, source files, and included dependencies used to build an product artifact.",
          "build": "SBOM generated as part of the process of building the software to create a releasable artifact (e.g., executable or package) from data such as source files, dependencies, built components, build process ephemeral data, and other SBOMs.",
          "deployed": "SBOM provides an inventory of software that is present on a system. This may be an assembly of other SBOMs that combines analysis of configuration options, and examination of execution behavior in a (potentially simulated) deployment environment.",
          "runtime": "SBOM generated through instrumenting the system running the software, to capture only components present in the system, as well as external call-outs or dynamically loaded components. In some contexts, this may also be referred to as an \u201cInstrumented\u201d or \u201cDynamic\u201d SBOM.",
          "analyzed": "SBOM generated through analysis of artifacts (e.g., executables, packages, containers, and virtual machine images) after its build. Such analysis generally requires a variety of heuristics. In some contexts, this may also be referred to as a \u201c3rd party\u201d SBOM."
        }
      }
    }
  }
}
