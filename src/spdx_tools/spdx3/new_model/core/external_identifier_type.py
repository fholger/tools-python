# SPDX-License-Identifier: Apache-2.0
#
# This file was auto-generated by dev/gen_python_model_from_spec.py
# Do not manually edit!
# flake8: noqa

from enum import Enum, auto

from beartype.typing import Optional


class ExternalIdentifierType(Enum):
    """
    ExteralIdentifierType specifies the type of an external identifier.
    """

    CPE22 = auto()
    """
    https://cpe.mitre.org/files/cpe-specification_2.2.pdf
    """
    CPE23 = auto()
    """
    https://nvlpubs.nist.gov/nistpubs/Legacy/IR/nistir7695.pdf
    """
    CVE = auto()
    """
    An identifier for a specific software flaw defined within the official CVE Dictionary and that conforms to the CVE
    specification as defined by https://csrc.nist.gov/glossary/term/cve_id.
    """
    EMAIL = auto()
    """
    https://datatracker.ietf.org/doc/html/rfc3696#section-3
    """
    GITOID = auto()
    """
    https://www.iana.org/assignments/uri-schemes/prov/gitoid Gitoid stands for [Git Object
    ID](https://git-scm.com/book/en/v2/Git-Internals-Git-Objects) and a gitoid of type blob is a unique hash of a
    binary artifact. A gitoid may represent the software [Artifact
    ID](https://github.com/omnibor/spec/blob/main/spec/SPEC.md#artifact-id) or the [OmniBOR
    Identifier](https://github.com/omnibor/spec/blob/main/spec/SPEC.md#omnibor-identifier) for the software artifact's
    associated [OmniBOR Document](https://github.com/omnibor/spec/blob/main/spec/SPEC.md#omnibor-document); this
    ambiguity exists because the OmniBOR Document is itself an artifact, and the gitoid of that artifact is its valid
    identifier. Omnibor is a minimalistic schema to describe software [Artifact Dependency
    Graphs](https://github.com/omnibor/spec/blob/main/spec/SPEC.md#artifact-dependency-graph-adg). Gitoids calculated
    on software artifacts (Snippet, File, or Package Elements) should be recorded in the SPDX 3.0 SoftwareArtifact's
    ContentIdentifier property. Gitoids calculated on the OmniBOR Document (OmniBOR Identifiers) should be recorded in
    the SPDX 3.0 Element's ExternalIdentifier property.
    """
    OTHER = auto()
    """
    Used when the type doesn't match any of the other options.
    """
    PKG_URL = auto()
    """
    https://github.com/package-url/purl-spec
    """
    SECURITY_OTHER = auto()
    """
    Used when there is a security related identifier of unspecified type.
    """
    SWHID = auto()
    """
    https://docs.softwareheritage.org/devel/swh-model/persistent-identifiers.html
    """
    SWID = auto()
    """
    https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-21.html#section-2.3
    """
    URL_SCHEME = auto()
    """
    the scheme used in order to locate a resource https://www.iana.org/assignments/uri-schemes/uri-schemes.xhtml
    """

    def __str__(self) -> str:
        if self == ExternalIdentifierType.CPE22:
            return "cpe22"
        if self == ExternalIdentifierType.CPE23:
            return "cpe23"
        if self == ExternalIdentifierType.CVE:
            return "cve"
        if self == ExternalIdentifierType.EMAIL:
            return "email"
        if self == ExternalIdentifierType.GITOID:
            return "gitoid"
        if self == ExternalIdentifierType.OTHER:
            return "other"
        if self == ExternalIdentifierType.PKG_URL:
            return "pkgUrl"
        if self == ExternalIdentifierType.SECURITY_OTHER:
            return "securityOther"
        if self == ExternalIdentifierType.SWHID:
            return "swhid"
        if self == ExternalIdentifierType.SWID:
            return "swid"
        if self == ExternalIdentifierType.URL_SCHEME:
            return "urlScheme"
        return "unknown"

    @staticmethod
    def from_str(value: str) -> Optional["ExternalIdentifierType"]:
        if value == "cpe22":
            return ExternalIdentifierType.CPE22
        if value == "cpe23":
            return ExternalIdentifierType.CPE23
        if value == "cve":
            return ExternalIdentifierType.CVE
        if value == "email":
            return ExternalIdentifierType.EMAIL
        if value == "gitoid":
            return ExternalIdentifierType.GITOID
        if value == "other":
            return ExternalIdentifierType.OTHER
        if value == "pkgUrl":
            return ExternalIdentifierType.PKG_URL
        if value == "securityOther":
            return ExternalIdentifierType.SECURITY_OTHER
        if value == "swhid":
            return ExternalIdentifierType.SWHID
        if value == "swid":
            return ExternalIdentifierType.SWID
        if value == "urlScheme":
            return ExternalIdentifierType.URL_SCHEME
        return None
